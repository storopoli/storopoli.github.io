<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jose Storopoli, PhD</title>
  <link rel="alternate" href="https://storopoli.io/" />
  <link rel="self" href="https://storopoli.io/index.xml" />
  <subtitle>Recent content on Jose Storopoli, PhD</subtitle>
  <id>https://storopoli.io/</id>
  <generator uri="http://gohugo.io" version="0.121.2">Hugo</generator>
  <language>en-us</language>
  <updated>2024-01-14T06:13:19-03:00</updated>
  <author>
    <name>Jose Storopoli</name>
    
  </author>
  <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights>
      <entry>
        <title>htmx: an Oasis in a Desert of Soy</title>
        <link rel="alternate" href="https://storopoli.io/2024-01-14-htmx/" />
        <id>https://storopoli.io/2024-01-14-htmx/</id>
        <published>2024-01-14T06:13:19-03:00</published>
        <updated>2024-01-14T08:39:28-03:00</updated>
        <summary type="html">Warning: This post has mermaid.js enabled, so if you want to view the rendered diagrams, you&amp;rsquo;ll have to unfortunately enable JavaScript.
I love to learn new things and I&amp;rsquo;m passionate about Stoic philosophy. So, when I acquired the domain stoicquotes.io1, I&amp;rsquo;ve decided to give htmx a try.
What is htmx? htmx is a small JavaScript library that allows you to enhance your HTML with attributes to perform AJAX (Asynchronous JavaScript and XML) without writing JavaScript2.</summary>
          <content type="html"><![CDATA[<blockquote>
<p>Warning: This post has <a href="https://mermaid.js.org"><code>mermaid.js</code></a> enabled,
so if you want to view the rendered diagrams,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p><img loading="lazy" src="bellcurve.png#center" alt="htmx bell curve"  />
</p>
<p>I love to learn new things and I&rsquo;m passionate about Stoic philosophy.
So, when I acquired the domain
<a href="https://stoicquotes.io"><code>stoicquotes.io</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
I&rsquo;ve decided to give <a href="https://htmx.org"><code>htmx</code></a> a try.</p>
<h2 id="what-is-htmx">What is <code>htmx</code>?</h2>
<p><strong><code>htmx</code></strong> is a small JavaScript library that allows you to enhance your HTML with
attributes to perform AJAX (Asynchronous JavaScript and XML) without writing
JavaScript<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It focuses on extending HTML by adding custom attributes
that describe how to perform common dynamic web page behaviors like partial page
updates, form submission, etc. <code>htmx</code> is designed to be easy to use, requiring
minimal JavaScript knowledge, so that you can add interactivity<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> to web pages
with just HTML.</p>
<p>Let&rsquo;s contrast this with the <a href="../2023-11-10-2023-11-13-soydev/">Soy stuff</a>
like the notorious React framework. <strong>React</strong>, on the other hand, is a JavaScript
library for building user interfaces, primarily through a component-based
architecture. It manages the creation of user interface elements, updates the UI
efficiently when data changes, and helps keep your UI in sync with the state of
your application. React requires a deeper knowledge of JavaScript and understanding
of its principles, such as components, state, and props.</p>
<p><strong>In simple terms:</strong></p>
<ul>
<li><strong><code>htmx</code></strong> enhances plain HTML by letting you add attributes for dynamic
behaviors, so you can make webpages interactive with no JavaScript coding;
you can think of it as boosting your HTML to do more.</li>
<li><strong>React</strong> is more like building a complex machine from customizable parts that
you program with JavaScript, giving you full control over how your application
looks and behaves but also requiring more from you in terms of code complexity
and architecture.</li>
</ul>
<p>Additionally, React can be slower and less performant than <code>htmx</code>.
This is due to <code>htmx</code> manipulating the actual
<a href="https://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> itself,
while React updates objects in the Virtual DOM. Afterward, React compares the
new Virtual DOM with a pre-update version and calculates the
most efficient way to make these changes to the real DOM.
So React has to do this whole trip around diff&rsquo;ing all the time the Virtual DOM
against the actual DOM for <strong>every fucking change</strong>.</p>
<p>Finally, <code>htmx</code> receives pure HTML from the server.
React needs to the <strong>JSON busboy thing</strong>: the server sends JSON, React parses
JSON into JavaScript code, then it parses it again to HTML for the browser.</p>
<p>Here are some <a href="https://mermaid.js.org/"><code>mermaid.js</code></a> diagrams to illustrate
what is going on under the hood:</p>
<div class="mermaid" style="text-align: center">

<!-- dprint-ignore-start -->
---
title: htmx
---
<!-- dprint-ignore-end -->

flowchart LR
HTML --> DOM
</div>

<div class="mermaid" style="text-align: center">

<!-- dprint-ignore-start -->
---
title: React
---
<!-- dprint-ignore-end -->

flowchart LR
JSON --> JavaScript --> HTML --> VDOM[Virtual DOM] --> DOM
</div>

<p>A consequence of these different paradigms is that <code>htmx</code> don&rsquo;t care about
what the server sends back and will happily include in the DOM.
Hence, front-end and back-end are decoupled and less complex.
Whereas in Reactland, we need to have a tight synchronicity between front-end
and back-end. If the JSON that the server sends doesn&rsquo;t conform to the exact
specifications of the front-end, the application <del>becomes a dumpster fire</del>
breaks.</p>
<h2 id="hypermedia">Hypermedia</h2>
<p>When the web was created it was based on the concept of
<a href="https://en.wikipedia.org/wiki/Hypermedia"><strong>Hypermedia</strong></a>.
Hypermedia refers to a system of interconnected multimedia elements, which can
include text, graphics, audio, video, and hyperlinks. It allows users to
navigate between related pieces of content across the web or within
applications, creating a non-linear way of accessing information.</p>
<p>HTML follows the Hypermedia protocol. HTML is the native language of browsers<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.
That&rsquo;s why all the React-like frameworks have to convert JavaScript into HTML.
So it&rsquo;s only natural to rely primarily on HTML to deliver content and sprinkle
JavaScript sparingly when you need something that HTML cannot offer.</p>
<p>Unfortunately, HTML has stopped in time. Despite all the richness of
<a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a> with the diverse request methods:
<code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>CONNECT</code>, <code>OPTIONS</code>, <code>TRACE</code>, <code>PATCH</code>;
HTML only has <em>two</em> elements that interact with the server:</p>
<ul>
<li><code>&lt;a&gt;</code>: sends a <code>GET</code> request to fetch new data.</li>
<li><code>&lt;form&gt;</code>: sends a <code>POST</code> request to create new data.</li>
</ul>
<p>That&rsquo;s the main purpose of <code>htmx</code>: allowing HTML elements to leverage all the
capabilities of HTTP.</p>
<h2 id="htmx-in-practice"><code>htmx</code> in Practice</h2>
<p>OK, enough of abstract and theoretical concepts. Let&rsquo;s see how <code>htmx</code> works in
practice.</p>
<p>First, the only thing you need to do enable <code>htmx</code> is to insert this <code>&lt;script&gt;</code>
tag in your HTML:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://unpkg.com/htmx.org@{version}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>where <code>{version}</code> is the desired <code>htmx</code> version that you&rsquo;ll want to use.
I has around 40kb of size.</p>
<p>Inside the code behind <a href="https://stoicquotes.io"><code>stoicquotes.io</code></a><sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
we have the following HTML<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;quote&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        Some nice Stoic quote...
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">hx-get</span><span class="o">=</span><span class="s">&#34;/quote&#34;</span> <span class="na">hx-trigger</span><span class="o">=</span><span class="s">&#34;click&#34;</span> <span class="na">hx-target</span><span class="o">=</span><span class="s">&#34;#quote&#34;</span> <span class="na">hx-swap</span><span class="o">=</span><span class="s">&#34;outerHTML&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    New
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>When the user clicks (<code>hx-trigger</code>) in the &ldquo;New&rdquo; button, <code>htmx</code> sends a <code>GET</code>
request to the <code>/quote</code> endpoint (<code>hx-get</code>). Then it swaps the whole HTML
(<code>hx-swap</code>) of the element that has id &ldquo;quote&rdquo; (<code>hx-target</code>).
This is accomplished without a single character of JavaScript.
Instead we extend HTML by adding new attributes to the HTML elements:</p>
<ul>
<li><code>hx-get</code></li>
<li><code>hx-trigger</code></li>
<li><code>hx-target</code></li>
<li><code>hx-swap</code></li>
</ul>
<p>The server replies with a new <code>&lt;blockquote&gt;</code> element every time it gets a <code>GET</code>
request in the <code>/quote</code> endpoint.</p>
<p>This is truly amazing. We just used one line of <code>htmx</code>.</p>
<p><img loading="lazy" src="4-lines.png#center" alt="htmx 4 lines"  />
</p>
<p><code>htmx</code> adheres to my trifecta of amazing tools<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>:</p>
<ul>
<li>powerful</li>
<li>expressive</li>
<li>concise</li>
</ul>
<p>Here&rsquo;s a breakdown of what the trifecta of amazing tools means:</p>
<ol>
<li>
<p><strong>Powerful:</strong>
A powerful tool has the capability to handle complex, demanding tasks with
relative ease. It possesses the strength, performance, and features necessary to
accomplish a wide range of functions.</p>
</li>
<li>
<p><strong>Expressive:</strong>
An expressive tool gives users the ability to articulate complex ideas,
designs, or concepts with simplicity and nuance. It provides a rich set of
capabilities that allow for diverse and sophisticated forms of expression.</p>
</li>
<li>
<p><strong>Concise:</strong>
A concise tool allows for achieving goals with minimal effort or complexity.
It focuses on efficiency and effectiveness, often through simplification and the
removal of unnecessary components. It should be capable of performing tasks
without requiring verbose instructions or processes.</p>
</li>
</ol>
<h3 id="how-we-would-do-this-in-react">How we would do this in React?</h3>
<p>Now compare this with React.</p>
<p>First, we need to install React.
This is not simple, but here&rsquo;s a breakdown:</p>
<ol>
<li>
<p>install Node.js</p>
</li>
<li>
<p>install React: <code>npm install react react-dom</code></p>
</li>
<li>
<p>create an <code>index.js</code> file with some variant of:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">createRoot</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-dom/client&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div id=&#34;app&#34;&gt;&lt;/div&gt;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="err">/h1&gt;);</span>
</span></span></code></pre></div></li>
</ol>
<p>And now here&rsquo;s the code for the <code>Quote</code> component:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Quote</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">[</span><span class="nx">quote</span><span class="p">,</span> <span class="nx">setQuote</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="s1">&#39;Some nice Stoic quote...&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">fetchNewQuote</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/quote&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">newQuote</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setQuote</span><span class="p">(</span><span class="nx">newQuote</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error fetching new quote:&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;quote&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="nx">quote</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">fetchNewQuote</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">New</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">Quote</span><span class="p">;</span>
</span></span></code></pre></div><p>That&rsquo;s a LOT of JavaScript code.
The Soy Gods must be smiling upon you, my friend.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I highly recommend that you check out <a href="https://htmx.org"><code>htmx</code></a>,
especially the free <a href="https://htmx.org/#book">Hypermedia systems book</a> which
goes into details and it is way more comprehensive than this short blog post.</p>
<p><code>htmx</code> is a fresh and elegant approach to build simple reactive web pages.
It extends HTML to be able to use all of the capabilities of any JavaScript-based
reactive framework without a single drop of JavaScript.
You just add some new HTML attributes to your HTML elements.</p>
<p>I&rsquo;ve had such joy using <code>htmx</code> lately.
It made me go back into my early teens, when I was doing HTML pages in
<a href="https://en.wikipedia.org/wiki/GeoCities">GeoCities</a>.
Good times, no JavaScript-bloated code.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>you can find the source code at
<a href="https://github.com/storopoli/stoic-quotes"><code>storopoli/stoic-quotes</code></a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>YES, yes, no YavaScript. Hooray!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><code>htmx</code> can do much more, such as lazy loading, infinite scroll,
or submitting forms without a full page reload, etc.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>actually we also have <a href="https://webassembly.org">WASM</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I&rsquo;ve simplified a bit removing some styling for the purpose of clarity.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>there are some other tools that I use that adhere to the trifecta.
Most notoriously is <a href="https://julialang.org">Julia</a> and
<a href="https://rust-lang.org">Rust</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Testing Bayesian Models with Nix and GitHub Actions</title>
        <link rel="alternate" href="https://storopoli.io/2023-12-04-bayesian_models_ci/" />
        <id>https://storopoli.io/2023-12-04-bayesian_models_ci/</id>
        <published>2023-12-04T17:43:03-03:00</published>
        <updated>2024-01-14T06:37:31-03:00</updated>
        <summary type="html">I have an open access and open source1 graduate-level course on Bayesian statistics. It is available in GitHub through the repo storopoli/Bayesian-Statistics. I&amp;rsquo;ve taught it many times and every time was such a joy. It is composed of:
a set of 300+ slides2 covering the theoretical part Stan3 models Turing.jl4 models Now and then I receive emails from someone saying that the materials helped them to understand Bayesian statistics. These kind messages really make my day, and that&amp;rsquo;s why I strive to keep the content up-to-date and relevant.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="bayesian-models-go-brrrrr.png#center" alt="bayesian-models-go-brrrrr"  />
</p>
<p>I have an open access and open source<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> graduate-level course on Bayesian statistics.
It is available in GitHub through the repo <a href="https://github.com/storopoli/Bayesian-Statistics"><code>storopoli/Bayesian-Statistics</code></a>.
I&rsquo;ve taught it many times and every time was such a joy.
It is composed of:</p>
<ul>
<li>a set of 300+ slides<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> covering the theoretical part</li>
<li><a href="https://mc-stan.org">Stan</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> models</li>
<li><a href="https://turinglang.org">Turing.jl</a><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> models</li>
</ul>
<p>Now and then I receive emails from someone saying that the materials helped
them to understand Bayesian statistics.
These kind messages really make my day, and that&rsquo;s why I strive to keep
the content up-to-date and relevant.</p>
<p>I decided to make the repository fully reproducible and testable in CI<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> using
<a href="https://nixos.org">Nix</a>
and <a href="https://docs.github.com/en/actions">GitHub actions</a>.</p>
<p>Here&rsquo;s what I am testing on every new change to the main repository
and every new pull request (PR):</p>
<ol>
<li><strong>slides in LaTeX</strong> are built and released as PDF in CI</li>
<li><strong>typos</strong> in content and code are tested</li>
<li><strong>Turing.jl models</strong> are run and tested in CI using the latest version of Julia,
Turing.jl and dependencies</li>
<li><strong>Stan models</strong> are run and test in CI using the latest version of Stan</li>
</ol>
<h2 id="nix">Nix</h2>
<p>All of these tests demand a highly reproducible and intricate development
environment.
That&rsquo;s where <a href="https://nixos.org">Nix</a> comes in.
Nix can be viewed as a package manager, operating system, build tool,
immutable system, and many things.</p>
<p>Nix is purely functional.
Everything is described as an expression/function,
taking some inputs and producing deterministic outputs.
This guarantees reproducible results and makes caching everything easy.
Nix expressions are lazy. Anything described in Nix code will only be executed
if some other expression needs its results.
This is very powerful but somewhat unnatural for developers not familiar
with functional programming.</p>
<p>I enjoy Nix so much that I use it as the operating system and package manager in
all of my computers.
Feel free to check my setup at
<a href="https://github.com/storopoli/flakes"><code>storopoli/flakes</code></a>.</p>
<p>The main essence of the repository setup is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/flake.nix"><code>flake.nix</code> file</a>.
A Flake is a collection of recipes (Nix derivations) that the repository
provides.
From the <a href="https://nixos.wiki/wiki/Flakes">NixOS Wiki article on Flakes</a>:</p>
<blockquote>
<p>Flakes is a feature of managing Nix packages to simplify usability and improve
reproducibility of Nix installations.
Flakes manages dependencies between Nix expressions,
which are the primary protocols for specifying packages.
Flakes implements these protocols in a consistent schema with a common set
of policies for managing packages.</p>
</blockquote>
<p>I use the Nix&rsquo;s Flakes to not only setup the main repository package,
defined in the Flake as just <code>package.default</code>
which is the PDF build of the LaTeX slides,
but also to setup the development environment,
defined in the Flake as the <code>devShell.default</code>,
to run the latest versions of
Stan and Julia/Turing.jl.</p>
<p>We&rsquo;ll go over the Flake file in detail.
However, let me show the full Flake file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;A basic flake with a shell&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">flake-utils</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:numtide/flake-utils&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:cachix/pre-commit-hooks.nix&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">flake-utils</span><span class="o">,</span> <span class="n">pre-commit-hooks</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flake-utils</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">eachDefaultSystem</span> <span class="p">(</span><span class="n">system</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">let</span>
</span></span><span class="line"><span class="cl">        <span class="n">pkgs</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">legacyPackages</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">tex</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="o">.</span><span class="n">combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">scheme-small</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">latexmk</span> <span class="n">pgf</span> <span class="n">pgfplots</span> <span class="n">tikzsymbols</span> <span class="n">biblatex</span> <span class="n">beamer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">silence</span> <span class="n">appendixnumberbeamer</span> <span class="n">fira</span> <span class="n">fontaxes</span> <span class="n">mwe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">noto</span> <span class="n">csquotes</span> <span class="n">babel</span> <span class="n">helvetic</span> <span class="n">transparent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">xpatch</span> <span class="n">hyphenat</span> <span class="n">wasysym</span> <span class="n">algorithm2e</span> <span class="n">listings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">lstbayes</span> <span class="n">ulem</span> <span class="n">subfigure</span> <span class="n">ifoddpage</span> <span class="n">relsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">adjustbox</span> <span class="n">media9</span> <span class="n">ocgx2</span> <span class="n">biblatex-apa</span> <span class="n">wasy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">julia</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">julia-bin</span><span class="o">.</span><span class="n">overrideDerivation</span> <span class="p">(</span><span class="n">oldAttrs</span><span class="p">:</span> <span class="p">{</span> <span class="n">doInstallCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">in</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">checks</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">pre-commit-check</span> <span class="o">=</span> <span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">src</span> <span class="o">=</span> <span class="sr">./.</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">typos</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">};</span>
</span></span><span class="line"><span class="cl">          <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">            <span class="n">bashInteractive</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># pdfpc # FIXME: broken on darwin</span>
</span></span><span class="line"><span class="cl">            <span class="n">typos</span>
</span></span><span class="line"><span class="cl">            <span class="n">cmdstan</span>
</span></span><span class="line"><span class="cl">            <span class="n">julia</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export JULIA_NUM_THREADS=&#34;auto&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export JULIA_PROJECT=&#34;turing&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export CMDSTAN_HOME=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">cmdstan</span><span class="si">}</span><span class="s1">/opt/cmdstan&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            </span><span class="si">${</span><span class="n">self</span><span class="o">.</span><span class="n">checks</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="o">.</span><span class="n">pre-commit-check</span><span class="o">.</span><span class="n">shellHook</span><span class="si">}</span><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">packages</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">stdenvNoCC</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;slides&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">src</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">coreutils</span>
</span></span><span class="line"><span class="cl">            <span class="n">tex</span>
</span></span><span class="line"><span class="cl">            <span class="n">gnuplot</span>
</span></span><span class="line"><span class="cl">            <span class="n">biber</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">phases</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;unpackPhase&#34;</span> <span class="s2">&#34;buildPhase&#34;</span> <span class="s2">&#34;installPhase&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">buildPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export PATH=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">makeBinPath</span> <span class="n">buildInputs</span><span class="si">}</span><span class="s1">&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            cd slides
</span></span></span><span class="line"><span class="cl"><span class="s1">            export HOME=$(pwd)
</span></span></span><span class="line"><span class="cl"><span class="s1">            latexmk -pdflatex -shell-escape slides.tex
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">installPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            mkdir -p $out
</span></span></span><span class="line"><span class="cl"><span class="s1">            cp slides.pdf $out/
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A flake is composed primarily of <code>inputs</code> and <code>outputs</code>.
As <code>inputs</code> I have:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">flake-utils</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:numtide/flake-utils&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:cachix/pre-commit-hooks.nix&#34;</span><span class="p">;</span>
</span></span></code></pre></div><ul>
<li><a href="https://github.com/NixOS/nixpkgs"><strong><code>nixpkgs</code></strong></a>
is responsible for providing all of the packages necessary for both
<code>package.default</code> and <code>devShell.default</code>: <code>cmdstan</code>, <code>julia-bin</code>, <code>typos</code>,
and a bunch of <code>texlive</code> LaTeX small packages.</li>
<li><a href="https://github.com/numtide/flake-utils"><strong><code>flake-utils</code></strong></a>
are a bunch of Nix utility functions that creates tons of
syntactic sugar to make the Flake easily accessible in all platforms,
such as macOS and Linux.</li>
<li><a href="https://github.com/cachix/pre-commit-hooks.nix"><strong><code>pre-commit-hooks</code></strong></a>
is a nice Nix utility to create easy
<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hooks</a>
that do some checking at several steps of the git workflow.
The only hook that I am using is the <a href="https://github.com/crate-ci/typos"><code>typos</code></a>
pre-commit hook that checks the whole commit changes for common typos and won&rsquo;t
let you commit successfully if you have typos:
either correct or whitelist them in the <code>_typos.toml</code> file.</li>
</ul>
<p>The <code>outputs</code> are the bulk of the Flake file and it is a Nix function that
takes all the above as inputs and outputs a couple of things:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">outputs</span> <span class="err">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">flake-utils</span><span class="o">,</span> <span class="n">pre-commit-hooks</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flake-utils</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">eachDefaultSystem</span> <span class="p">(</span><span class="n">system</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">checks</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">devShells</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">packages</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="p">});</span>
</span></span></code></pre></div><ul>
<li><code>checks</code> things that are executed/built when you run <code>nix flake check</code></li>
<li><code>devShells</code> things that are executed/built when you run <code>nix develop</code></li>
<li><code>packages</code> things that are executed/built when you run <code>nix build</code></li>
</ul>
<p>Let&rsquo;s go over each one of the outputs that the repository Flake has.</p>
<h3 id="packages----latex-slides"><code>packages</code> &ndash; LaTeX slides</h3>
<p>We all know that LaTeX is a pain to make it work.
If it builds in my machine definitely won&rsquo;t build in yours.
This is solved effortlessly in Nix.
Take a look at the <code>tex</code> variable definition in the <code>let ... in</code> block:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="n">tex</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="o">.</span><span class="n">combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">scheme-small</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">latexmk</span> <span class="n">pgf</span> <span class="n">pgfplots</span> <span class="n">tikzsymbols</span> <span class="n">biblatex</span> <span class="n">beamer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">silence</span> <span class="n">appendixnumberbeamer</span> <span class="n">fira</span> <span class="n">fontaxes</span> <span class="n">mwe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">noto</span> <span class="n">csquotes</span> <span class="n">babel</span> <span class="n">helvetic</span> <span class="n">transparent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">xpatch</span> <span class="n">hyphenat</span> <span class="n">wasysym</span> <span class="n">algorithm2e</span> <span class="n">listings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">lstbayes</span> <span class="n">ulem</span> <span class="n">subfigure</span> <span class="n">ifoddpage</span> <span class="n">relsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">adjustbox</span> <span class="n">media9</span> <span class="n">ocgx2</span> <span class="n">biblatex-apa</span> <span class="n">wasy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span>
</span></span></code></pre></div><p><code>tex</code> is a custom instantiation of the <code>texlive.combine</code> derivation with some
overrides to specify which CTAN packages you need to build the slides.
We use <code>tex</code> in the <code>packages.default</code> Flake <code>output</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">packages</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">stdenvNoCC</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;slides&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">src</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">coreutils</span>
</span></span><span class="line"><span class="cl">    <span class="n">tex</span>
</span></span><span class="line"><span class="cl">    <span class="n">gnuplot</span>
</span></span><span class="line"><span class="cl">    <span class="n">biber</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">phases</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;unpackPhase&#34;</span> <span class="s2">&#34;buildPhase&#34;</span> <span class="s2">&#34;installPhase&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    export PATH=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">makeBinPath</span> <span class="n">buildInputs</span><span class="si">}</span><span class="s1">&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">    cd slides
</span></span></span><span class="line"><span class="cl"><span class="s1">    export HOME=$(pwd)
</span></span></span><span class="line"><span class="cl"><span class="s1">    latexmk -pdflatex -shell-escape slides.tex
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">installPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    mkdir -p $out
</span></span></span><span class="line"><span class="cl"><span class="s1">    cp slides.pdf $out/
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Here we are declaring a Nix derivation with the <code>stdenvNoCC.mkDerivation</code>,
the <code>NoCC</code> part means that we don&rsquo;t need C/C++ build tools.
The <code>src</code> is the Flake repository itself and I also specify the dependencies
in <code>buildInputs</code>: I still need some fancy stuff to build my slides.
Finally, I specify the several <code>phases</code> of the derivation.
The most important part is that I <code>cd</code> into the <code>slides/</code> directory
and run <code>latexmk</code> in it, and copy the resulting PDF to the <code>$out</code> Nix
special directory which serves as the output directory for the derivation.</p>
<p>This is really nice because anyone with Nix installed can run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ nix build github:storopoli/Bayesian-Statistics
</span></span></code></pre></div><p>and bingo! You have my slides as PDF built from LaTeX files without having to
clone or download the repository.
Fully reproducible in any machine or architecture.</p>
<p>The next step is to configure GitHub actions to run Nix and build the slides'
PDF file in CI.
I have two workflows for that and they are almost identical except for the
last step.
The first one is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/build-slides.yml"><code>build-slides.yml</code></a>,
which, of course, builds the slides.
These are the relevant parts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Slides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Nix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">DeterminateSystems/nix-installer-action@v8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Slides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">nix build -L</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Copy result out of nix store</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">cp -v result/slides.pdf slides.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload Artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./slides.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">if-no-files-found</span><span class="p">:</span><span class="w"> </span><span class="l">error</span><span class="w">
</span></span></span></code></pre></div><p>Here we use a set of actions to:</p>
<ol>
<li>install Nix</li>
<li>build the slides&rsquo; PDF file using <code>nix build</code>
(the <code>-L</code> flag is to have more verbose logs)</li>
<li>upload the built slides&rsquo; PDF file as an artifact of the CI run.
This is useful for inspection and debugging.
There is also the caveat that if the PDF file is not found the whole workflow
should error.</li>
</ol>
<p>The last one is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/release-slides.yml"><code>release-slides.yml</code></a>,
which releases the slides when I publish a new tag.
It is almost the same as <code>build-slides.yml</code>, thus I will only highlight the
relevant bits:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">ncipollo/release-action@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">artifacts</span><span class="p">:</span><span class="w"> </span><span class="l">./slides.pdf</span><span class="w">
</span></span></span></code></pre></div><p>The only change is the final step that we now use a <code>release-action</code>
that automatically publishes a release with the slides&rsquo; PDF file as one of the
release artifacts.
This is good since, once I achieve a milestone in the slides,
I can easily tag a new version and have GitHub automatically publish a new
release with the resulting PDF file attached in the release.</p>
<p>This is a very good workflow, both in GitHub but also locally.
I don&rsquo;t need to install tons of gigabytes of texlive stuff to build my slides
locally.
I just run <code>nix build</code>.
Also, if someones contributes to the slides I don&rsquo;t need to check the correctness
of the LaTeX code, only the content and the output PDF artifact in the
resulting CI from the PR.
If it&rsquo;s all good, just thank the blessed soul and merge it!</p>
<h3 id="turingjl-models">Turing.jl Models</h3>
<p>The repository has a directory called <code>turing/</code> which is a Julia project with
<code>.jl</code> files and a <code>Project.toml</code> that lists the Julia dependencies and
appropriate <code>compat</code> bounds.
In order to test the Turing.jl models in the Julia files,
I have the following things in the Nix Flake <code>devShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="n">julia</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">julia-bin</span><span class="o">.</span><span class="n">overrideDerivation</span> <span class="p">(</span><span class="n">oldAttrs</span><span class="p">:</span> <span class="p">{</span> <span class="n">doInstallCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">julia</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">    export JULIA_NUM_THREADS=&#34;auto&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    export JULIA_PROJECT=&#34;turing&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Nix <code>devShell</code> lets you create a development environment by adding a
transparent layer on top of your standard shell environment with additional
packages, hooks, and environment variables.
First, in the <code>let ... in</code> block, I am defining a variable called <code>julia</code>
that is the <code>julia-bin</code> package with an attribute <code>doInstallCheck</code>
being overridden to <code>false</code>.
I don&rsquo;t want the Nix derivation of the <code>mkShell</code> to run all Julia standard tests.
Next, I define some environment variables in the <code>shellHook</code>,
which, as the name implies, runs every time that I instantiate the default
<code>devShell</code> with <code>nix develop</code>.</p>
<p>With the Nix Flake part covered, let&rsquo;s check how we wrap everything in a
GitHub action workflow file named
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/models.yml"><code>models.yml</code></a>.
Again, I will only highlight the relevant parts for the Turing.jl model testing
CI job:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-turing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test Turing Models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matrix</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">jl-file</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s2">&#34;01-predictive_checks.jl&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s2">&#34;13-model_comparison-roaches.jl&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test ${{ matrix.jl-file }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;julia -e &#39;using Pkg; Pkg.instantiate()&#39;&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;julia turing/${{ matrix.jl-file }}&#34;</span><span class="w">          
</span></span></span></code></pre></div><p>I list all the Turing.jl model Julia files in a <code>matrix.jl-file</code> list
to
<a href="https://docs.github.com/actions/using-jobs/using-a-matrix-for-your-jobs">define variations for each job</a>.
Next, we install the latest Julia version.
Finally, we run everything in parallel using the YAML string interpolation
<code>${{ matrix.jl-file }}</code>.
This expands the expression into <code>N</code> parallel jobs,
where <code>N</code> is the <code>jl-file</code> list length.</p>
<p>If any of these parallel jobs error out, then the whole workflow will error.
Hence, we are always certain that the models are up-to-date with the latest Julia
version in <code>nixpkgs</code>, and the latest Turing.jl dependencies.</p>
<h3 id="stan-models">Stan Models</h3>
<p>The repository has a directory called <code>stan/</code> that holds a bunch of Stan models
in <code>.stan</code> files.
These models can be used with any Stan interface,
such as
<a href="https://mc-stan.org/rstan"><code>RStan</code></a>/<a href="https://mc-stan.org/cmdstanr"><code>CmdStanR</code></a>,
<a href="https://pystan.readthedocs.org/en/latest/"><code>PyStan</code></a>/<a href="https://mc-stan.org/cmdstanpy"><code>CmdStanPy</code></a>,
or <a href="https://github.com/goedman/Stan.jl"><code>Stan.jl</code></a>.
However I am using <a href="https://mc-stan.org/docs/cmdstan-guide/index.html"><code>CmdStan</code></a>
which only needs a shell environment and Stan, no additional dependencies
like Python, R, or Julia.
Additionally, <code>nixpkgs</code> has a
<a href="https://search.nixos.org/packages?query=cmdstan"><code>cmdstan</code></a>
package that is well-maintained and up-to-date with the latest Stan release.</p>
<p>In order to test the Stan models,
I have the following setup in the Nix Flake <code>devShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmdstan</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">    export CMDSTAN_HOME=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">cmdstan</span><span class="si">}</span><span class="s1">/opt/cmdstan&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Here I am also defining an environment variable in the <code>shellHook</code>,
<code>CMDSTAN_HOME</code> because that is useful for local development.</p>
<p>In the same GitHub action workflow
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/models.yml"><code>models.yml</code></a>
file is defined the Stan model testing CI job:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-stan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test Stan Models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matrix</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">stan</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">model</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;01-predictive_checks-posterior&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;coin_flip.data.json&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">model</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;13-model_comparison-zero_inflated-poisson&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;roaches.data.json&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test ${{ matrix.stan.model }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo &#34;Compiling: ${{ matrix.stan.model }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;stan stan/${{ matrix.stan.model }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;stan/${{ matrix.stan.model }} sample data file=stan/${{ matrix.stan.data }}&#34;</span><span class="w">          
</span></span></span></code></pre></div><p>Now I am using a YAML dictionary as the entry for every element in the <code>stan</code>
YAML list with two keys: <code>model</code> and <code>data</code>.
<code>model</code> lists the Stan model file without the <code>.stan</code> extension,
and <code>data</code> lists the JSON data file that the model needs to run.
We&rsquo;ll use both to run parallel jobs to test all the Stan models listed in the
<code>stan</code> list.
For that we use the following commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">nix</span> <span class="n">develop</span> <span class="err">-</span><span class="n">L</span> <span class="o">.</span> <span class="err">--</span><span class="n">command</span> <span class="n">bash</span> <span class="err">-</span><span class="n">c</span> <span class="s2">&#34;stan stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">model</span> <span class="p">}</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">nix</span> <span class="n">develop</span> <span class="err">-</span><span class="n">L</span> <span class="o">.</span> <span class="err">--</span><span class="n">command</span> <span class="n">bash</span> <span class="err">-</span><span class="n">c</span> <span class="s2">&#34;stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">model</span> <span class="p">}</span><span class="si">}</span><span class="s2"> sample data file=stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">data</span> <span class="p">}</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This instantiates the <code>devShell.default</code> shell environment,
and uses the <code>stan</code> binary provided by the <code>cmdstan</code> Nix package to compile the
model into an executable binary.
Next, we run this model executable binary in <code>sample</code> mode while also providing
the corresponding data file with <code>data file=</code>.</p>
<p>As before, if any of these parallel jobs error out, then the whole workflow will
error.
Hence, we are always certain that the models are up-to-date with the latest
Stan/CmdStan version in <code>nixpkgs</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I am quite happy with this setup.
It makes easy to run test in CI with GitHub Actions,
while also being effortless to instantiate a development environment with Nix.
If I want to get a new computer up and running, I don&rsquo;t need to install a bunch
of packages and go over &ldquo;getting started&rdquo; instructions to have all the necessary
dependencies.</p>
<p>This setup also helps onboard new contributors since it is:</p>
<ol>
<li>easy to setup the dependencies necessary to develop and test</li>
<li>trivial to check if contributions won&rsquo;t break anything</li>
</ol>
<p>Speaking of &ldquo;contributors&rdquo;, if you are interested in Bayesian modeling,
feel free to go over the contents of the repository
<a href="https://github.com/storopoli/Bayesian-Statistics"><code>storopoli/Bayesian-Statistics</code></a>.
<strong>Contributions are most welcomed</strong>.
Don&rsquo;t hesitate on opening an issue or pull request.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>the code is MIT-licensed and the content is CreativeCommons
Non-Commercial 4.0&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I am also planning to go over the slides for every lecture
in a YouTube playlist in the near future.
This would make it the experience complete: slides, lectures, and code.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>a probabilistic programming language and suite of MCMC samplers written in C++.
It is today&rsquo;s gold standard in Bayesian stats.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>is an ecosystem of Julia packages for Bayesian inference using probabilistic
programming.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>CI stands for <strong>c</strong>ontinuous <strong>i</strong>ntegration,
sometimes also known as CI/CD, <strong>c</strong>ontinuous <strong>i</strong>ntegration and <strong>c</strong>ontinuous
<strong>d</strong>elivery.
<a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a> is a wide &ldquo;umbrella&rdquo; term
for &ldquo;everything that is tested in all parts of the development cicle&rdquo;,
and these tests commonly take place in a cloud machine.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Zero-cost Abstractions</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-28-zero_cost_abstractions/" />
        <id>https://storopoli.io/2023-11-28-zero_cost_abstractions/</id>
        <published>2023-11-28T18:19:36-03:00</published>
        <updated>2024-01-14T06:37:31-03:00</updated>
        <summary type="html">In programming language circles there&amp;rsquo;s a recently trend of discussing a concept called zero-cost abstractions: the ability to use higher-levels abstractions without suffering any loss of performance.
Zero-cost abstractions allows you to write performant code without having to give up a single drop of convenience and expressiveness:
You want for-loops? You can have it. Generics? Yeah, why not? Data structures? Sure, keep&amp;rsquo;em coming. Async operations? You bet ya! Multi-threading? Hell yes!</summary>
          <content type="html"><![CDATA[<p>In programming language circles there&rsquo;s a recently trend of discussing a concept
called <strong>zero-cost abstractions</strong>:
the ability to use higher-levels abstractions without suffering any loss of performance.</p>
<p>Zero-cost abstractions allows you to write performant code without having to
give up a single drop of convenience and expressiveness:</p>
<p>You want for-loops?
<em>You can have it</em>.
Generics?
<em>Yeah, why not</em>?
Data structures?
<em>Sure, keep&rsquo;em coming</em>.
Async operations?
<em>You bet ya</em>!
Multi-threading?
<em>Hell yes</em>!</p>
<p>To put more formally,
I like <a href="https://stackoverflow.com/a/69178445">this definition from StackOverflow</a>:</p>
<blockquote>
<p>Zero Cost Abstractions means adding higher-level programming concepts, like generics,
collections and so on do not come with a run-time cost,
only compile time cost (the code will be slower to compile).
Any operation on zero-cost abstractions is as fast as you would write out
matching functionality by hand using lower-level programming concepts like
for loops, counters, ifs and using raw pointers.</p>
</blockquote>
<p>Here&rsquo;s an analogy:</p>
<blockquote>
<p>Imagine that you are going to buy a car.
The sales person offers you a fancy car praising how easy it is to drive it,
that you don&rsquo;t need to think about RPM, clutch and stick shift,
parking maneuver, fuel type, and other shenanigans.
You just turn it on and drive.
However, once you take a look at the car&rsquo;s data sheet, you are horrified.
The car is bad in every aspect except easy of use.
It has dreadful fuel consumption,
atrocious safety ratings,
disastrous handling, and so on&hellip;</p>
</blockquote>
<p>Believe me, you wouldn&rsquo;t want to own that car.</p>
<p>Metaphors aside, that&rsquo;s <strong>exactly what professional developers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and whole teams
choose to use every day: unacceptable inferior tools</strong>.
Tools that, not only don&rsquo;t have <strong>zero-cost abstractions</strong>,
rather don&rsquo;t allow you to even have non-zero-cost anything!</p>
<p>Let&rsquo;s do some Python bashing in the meantime.
I know that&rsquo;s easy to bash Python,
but that&rsquo;s not the point.
If Python wasn&rsquo;t used so widely in production,
I would definitely leave it alone.
Don&rsquo;t get me wrong, Python is the second-best language for everything<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="the-curious-case-of-the-python-boolean">The curious case of the Python boolean</h2>
<p><img loading="lazy" src="non-zero-cost-abstraction.png#center" alt="non-zero-cost-abstraction"  />
</p>
<p>I wish this meme was a joke, but it isn&rsquo;t.
A boolean is one of the simplest data type taking only two possible values:
true or false.
Just grab your nearest Python REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">getsizeof</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">getsizeof</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">28</span>
</span></span></code></pre></div><p>The function <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof"><code>sys.getsizeof</code></a>
returns the size of an object in bytes.
<strong>How the hell Python needs 28 bytes to represent something that needs at most 1 byte</strong><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>?
Imagine incurring a 28x penalty in memory size requirements for every boolean
that you use.
Now multiply this by every operation that your code is going to run in production
over time.
Again: <strong>unacceptable</strong>.</p>
<p>That&rsquo;s because all objects in Python,
in the sense that everything that you can instantiate,
i.e. everything that you can put on the left hand-side of the <code>=</code> assignment,
is a <a href="https://docs.python.org/3/c-api/structures.html#c.PyObject"><code>PyObject</code></a>:</p>
<blockquote>
<p>All Python objects ultimately share a small number of fields at the
beginning of the object’s representation in memory.
These are represented by the <code>PyObject</code> and <code>PyVarObject</code> types.</p>
</blockquote>
<p>Python is dynamically-typed, which means that you don&rsquo;t have primitives like
8-, 16-, 32-bit (un)signed integers and so on.
Everything is a huge mess allocated in the heap that must carry not only its value,
but also information about its type.</p>
<p>Most important, everything that is fast in Python is <em>not Python-based</em>.
Take a look at the image below,
I grabbed some popular Python libraries from GitHub,
namely <a href="https://github.com/numpy/numpy">NumPy</a> (linear algebra package)
and <a href="https://github.com/pytorch/pytorch">PyToch</a> (deep learning package),
and checked the
language codebase percentage.</p>
<p><img loading="lazy" src="python-my-ass.jpg#center" alt="python-my-ass"  />
</p>
<p>Surprise, they are <strong><em>not</em> Python libraries</strong>.
They are <strong>C/C++ codebases</strong>.
Even if Python is the main language used in these codebases<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>,
I still think that this is not the case due to the nature of the Python code:
<strong>all docstrings are written in Python</strong>.
If you have a very fast C function in your codebase that takes 50 lines of code,
followed by a Python wrapper function that calls it using 10 lines of code,
<em>but</em> with a docstring that is 50 lines of code;
you have a &ldquo;Python&rdquo;-majority codebase.</p>
<p>In a sense the most efficient Python programmer is a C/C++ programmer&hellip;</p>
<p>Here&rsquo;s <a href="https://julialang.org">Julia</a>, which is also dynamically-typed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Base</span><span class="o">.</span><span class="n">summarysize</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></div><p>And to your surprise,
Julia is coded in &hellip;. Julia!
Check the image below for the language codebase percentage of
<a href="https://github.com/JuliaLang/julia">Julia</a>
and <a href="https://github.com/LuxDL/Lux.jl"><code>Lux.jl</code></a><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> (deep learning package).</p>
<p><img loading="lazy" src="julia.jpg#center" alt="julia"  />
</p>
<p>Finally, here&rsquo;s <a href="https://rust-lang.org">Rust</a>, which is not dynamically-,
but static-typed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Size of bool: </span><span class="si">{}</span><span class="s"> byte&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem</span>::<span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo run --release
</span></span><span class="line"><span class="cl">   Compiling size_of_bool v0.1.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/release/size_of_bool<span class="sb">`</span>
</span></span><span class="line"><span class="cl">Size of bool: <span class="m">1</span> byte
</span></span></code></pre></div><h2 id="more-zero-costs-abstractions">More zero-costs abstractions</h2>
<p>Let&rsquo;s cover two more zero-costs abstractions, both in Julia and in Rust:
<strong>for-loops</strong> and <strong>enums</strong>.</p>
<h3 id="for-loops">For-loops</h3>
<p>A friend and a Julia-advocate once told me that Julia&rsquo;s master plan is to secretly
&ldquo;make everyone aware about <em>compilers</em>&rdquo;.
The <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>
is a program that translate source code from a high-level programming language
to a low-level programming language
(e.g. assembly language, object code, or machine code) to create an
executable program.</p>
<p>Python uses <a href="https://github.com/python/cpython">CPython</a> as the compiler.
If you search around on why CPython/Python is so slow and inefficient,
you&rsquo;ll find that the culprits are:</p>
<ol>
<li>Python is <strong>dynamic-typed language</strong>.</li>
<li>Python&rsquo;s <strong>Global Interpreter Lock (GIL) restricts multi-threading capabilities</strong>.</li>
<li>Python is <strong>interpreted</strong>, which means that Python code is executed sequentially:
line-by-line.</li>
<li>Python is <strong>garbage-collected</strong>: all memory its tracked,
and allocated or deallocated which introduces overhead.</li>
</ol>
<p>I completely disagree with almost all the above reasons, except the GIL.
<strong>Python is slow because of its design decisions</strong>,
more specifically the way CPython works under the hood.
It is not built for performance in mind.
Actually, the main objective of Python was to be a
&ldquo;language that would be easy to read, write, and maintain&rdquo;.
I salute that: Python has remained true to its main objective.</p>
<p>Now let&rsquo;s switch to Julia:</p>
<ol>
<li>Julia is <strong>dynamic-typed language</strong>.</li>
<li>Julia is <strong>interpreted</strong>, which means that Julia code is executed sequentially:
line-by-line.</li>
<li>Julia is <strong>garbage-collected</strong>: all memory its tracked,
and allocated or deallocated which introduces overhead.</li>
</ol>
<p>I&rsquo;ve copy-pasted all Python&rsquo;s arguments for inefficiency, except the GIL.
And, contrary to Python, <a href="https://julialang.org/benchmarks/">Julia is fast</a>!
Sometimes even faster than C<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.
Actually, that was the goal all along since Julia&rsquo;s inception.
If you check the <a href="https://julialang.org/blog/2012/02/why-we-created-julia/">notorious Julia announcement blog post from 2012</a>:</p>
<blockquote>
<p>We want a language that&rsquo;s open source, with a liberal license.
We want the speed of C with the dynamism of Ruby.
We want a language that&rsquo;s homoiconic, with true macros like Lisp,
but with obvious, familiar mathematical notation like Matlab.
We want something as usable for general programming as Python,
as easy for statistics as R, as natural for string processing as Perl,
as powerful for linear algebra as Matlab, as good at gluing programs together as the shell.
Something that is dirt simple to learn,
yet keeps the most serious hackers happy.
We want it interactive and we want it compiled.</p>
<p>(Did we mention it should be as fast as C?)</p>
</blockquote>
<p>It mentions &ldquo;speed&rdquo; twice.
Not only that, but also specifically says that it should match C&rsquo;s speed.</p>
<p>Julia is fast because of its design decisions.
One of the major reasons why Julia is fast is because of the choice of compiler
that it uses: <a href="https://llvm.org/">LLVM</a>.</p>
<p>LLVM originally stood for <strong>l</strong>ow <strong>l</strong>evel <strong>v</strong>irtual <strong>m</strong>achine.
Despite its name, LLVM has little to do with traditional virtual machines.
LLVM can take <a href="https://en.wikipedia.org/wiki/Intermediate_representation">intermediate representation (IR)</a>
code and compile it into machine-dependent instructions.
It has <a href="https://foundation.llvm.org/docs/sponsors/">support and sponsorship</a>
from a lot of big-tech corporations,
such as Apple, Google, IBM, Meta, Arm, Intel, AMD, Nvidia, and so on.
It is a pretty fast compiler that can do wonders in optimizing IR code to a
plethora of computer architectures.</p>
<p>In a sense, Julia is a front-end for LLVM.
It turns your easy-to-read and easy-to-write Julia code into LLVM IR code.
Take this for-loop example inside a function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">10</span>
</span></span><span class="line"><span class="cl">        <span class="n">acc</span> <span class="o">+=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">acc</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Let&rsquo;s check what Julia generates as LLVM IR code for this function.
We can do that with the <code>@code_llvm</code> macro.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@code_llvm</span> <span class="n">debuginfo</span><span class="o">=</span><span class="ss">:none</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">define</span> <span class="n">i64</span> <span class="nd">@julia_sum_10_172</span><span class="p">()</span> <span class="c">#0 {</span>
</span></span><span class="line"><span class="cl"><span class="n">top</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">ret</span> <span class="n">i64</span> <span class="mi">55</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></div><p>You can&rsquo;t easily fool the compiler.
Julia understands that the answer is 55,
and the LLVM IR generated code is pretty much just &ldquo;return 55 as a 64-bit integer&rdquo;.</p>
<p>Let&rsquo;s also check the machine-dependent instructions with the <code>@code_native</code> macro.
I am using an Apple Silicon machine, so these instructions might differ from yours:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@code_native</span> <span class="n">debuginfo</span><span class="o">=</span><span class="ss">:none</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">section</span>        <span class="n">__TEXT</span><span class="p">,</span><span class="n">__text</span><span class="p">,</span><span class="n">regular</span><span class="p">,</span><span class="n">pure_instructions</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">build_version</span> <span class="n">macos</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">globl</span>  <span class="n">_julia_sum_10_214</span>               <span class="p">;</span> <span class="o">--</span> <span class="n">Begin</span> <span class="k">function</span> <span class="n">julia_sum_10_214</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">p2align</span>        <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">_julia_sum_10_214</span><span class="o">:</span>                      <span class="p">;</span> <span class="nd">@julia_sum_10_214</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">cfi_startproc</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">%</span><span class="n">bb</span><span class="mf">.0</span><span class="o">:</span>                                <span class="p">;</span> <span class="o">%</span><span class="n">top</span>
</span></span><span class="line"><span class="cl">        <span class="n">mov</span>     <span class="n">w0</span><span class="p">,</span> <span class="c">#55</span>
</span></span><span class="line"><span class="cl">        <span class="n">ret</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">cfi_endproc</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">;</span> <span class="o">--</span> <span class="n">End</span> <span class="k">function</span>
</span></span><span class="line"><span class="cl"><span class="o">.</span><span class="n">subsections_via_symbols</span>
</span></span></code></pre></div><p>The only important instruction for our argument here is the <code>mov w0, #55</code>.
This means &ldquo;move the value 55 into the <code>w0</code> register&rdquo;,
where <code>w0</code> is one of registers available in ARM-based architectures
(which Apple Silicon chips are).</p>
<p>This is a <strong>zero-cost abstraction</strong>!
I don&rsquo;t need to give up for-loops, because they might be slow and inefficient;
like some Python users suggest newcomers.
I can have the full convenience and expressiveness of for-loops without
paying performance costs.
Pretty much the definition of a zero-cost abstraction from above.</p>
<p>Using LLVM as a compiler backend is not something unique to Julia.
Rust also uses LLVM under the hood.
Take for example this simple Rust code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">sum_10</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..=</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">acc</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">acc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;sum_10: </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sum_10</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>We can inspect both LLVM IR code and machine instructions with the
<a href="https://github.com/pacak/cargo-show-asm"><code>cargo-show-asm</code></a> crate:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo asm --llvm <span class="s2">&#34;sum_10::main&#34;</span> <span class="p">|</span> grep <span class="m">55</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  store i32 55, ptr %_9, align <span class="m">4</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo asm <span class="s2">&#34;sum_10::main&#34;</span> <span class="p">|</span> grep <span class="m">55</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        mov w8, <span class="c1">#55</span>
</span></span></code></pre></div><p>No coincidence that the LLVM IR code is very similar,
with the difference that integers, by default,
in Julia are 64 bits and in Rust 32 bits.
However, the machine code is <strong>identical</strong>:
&ldquo;move the value 55 into a <code>w</code> something register&rdquo;.</p>
<h3 id="enums">Enums</h3>
<p>Another zero-cost abstraction, in Julia and Rust, is <strong>enums</strong>.</p>
<p>In Julia all enums, by default have a <code>BaseType</code> of <code>Int32</code>:
a signed 32-bit integer.
However, we can override this with type annotations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@enum</span> <span class="n">Thing</span><span class="o">::</span><span class="kt">Bool</span> <span class="n">One</span> <span class="n">Two</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Base</span><span class="o">.</span><span class="n">summarysize</span><span class="p">(</span><span class="n">Thing</span><span class="p">(</span><span class="nb">false</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></div><p>Here we have an enum <code>Thing</code> with two variants: <code>One</code> and <code>Two</code>.
Since we can safely represent all the possible variant space of <code>Thing</code>
with a boolean type, we override the <code>BaseType</code> of <code>Thing</code> to be the <code>Bool</code> type.
Unsurprised, any object of <code>Thing</code> occupies 1 byte in memory.</p>
<p>We can achieve the same with Rust:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[allow(dead_code)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">enum</span> <span class="nc">Thing</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">One</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Two</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Size of Thing: </span><span class="si">{}</span><span class="s"> byte&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem</span>::<span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Thing</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo run --release
</span></span><span class="line"><span class="cl">   Compiling enum_size v0.1.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.09s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/release/enum_size<span class="sb">`</span>
</span></span><span class="line"><span class="cl">Size of Thing: <span class="m">1</span> byte
</span></span></code></pre></div><p>However, contrary to Julia, Rust compiler automatically detects the enum&rsquo;s
variant space size and adjust accordingly.
So, no need of overrides.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Zero-cost abstractions are a joy to have in a programming language.
It enables you, as a programmer, to just focus on what&rsquo;s important:
write expressive code that is easy to read, maintain, debug, and build upon.</p>
<p>It is no wonder that zero-cost abstractions is a pervasive feature
of two of my top-favorite languages:
<a href="https://julialang.org">Julia</a>
and <a href="https://rust-lang.org">Rust</a>.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>this post is somehow connected to my <a href="../2023-11-10-2023-11-13-soydev/">soydev rant</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>and that&rsquo;s not a compliment.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>technically, we can represent a boolean with just one bit.
However, the short answer is still one byte,
because that&rsquo;s <a href="https://en.wikipedia.org/wiki/Byte">smallest addressable unit of memory</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>and modifying <code>.gitattributes</code> is cheating.
Yes, I am talking to you <a href="https://github.com/numpy/numpy/blob/06d7bdfbb585264dcf23d4322be7aee449733ca2/.gitattributes#L6-L7">NumPy</a>!&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://github.com/LuxDL/Lux.jl"><code>Lux.jl</code></a> doesn&rsquo;t even have a <code>.gitattributes</code> file.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>if you compare runtime execution.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Lindley&#39;s Paradox, or The consistency of Bayesian Thinking</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-23-lindley_paradox/" />
        <id>https://storopoli.io/2023-11-23-lindley_paradox/</id>
        <published>2023-11-22T07:06:59-03:00</published>
        <updated>2024-01-14T06:37:31-03:00</updated>
        <summary type="html">Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you&amp;rsquo;ll have to unfortunately enable JavaScript.
Dennis Lindley, one of my many heroes, was an English statistician, decision theorist and leading advocate of Bayesian statistics. He published a pivotal book, Understanding Uncertainty, that changed my view on what is and how to handle uncertainty in a coherent1 way. He is responsible for one of my favorites quotes: &amp;ldquo;Inside every non-Bayesian there is a Bayesian struggling to get out&amp;rdquo;; and one of my favorite heuristics around prior probabilities: Cromwell&amp;rsquo;s Rule2.</summary>
          <content type="html"><![CDATA[<blockquote>
<p>Warning: This post has <a href="https://katex.org/">KaTeX</a> enabled,
so if you want to view the rendered math formulas,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p><img loading="lazy" src="lindley.jpg#center" alt="Dennis Lindley"  />
</p>
<p><a href="https://en.wikipedia.org/wiki/Dennis_Lindley">Dennis Lindley</a>,
one of my many heroes,
was an English statistician,
decision theorist and leading advocate of Bayesian statistics.
He published a pivotal book,
<a href="https://onlinelibrary.wiley.com/doi/book/10.1002/9781118650158">Understanding Uncertainty</a>,
that changed my view on what is and how to handle uncertainty in a
coherent<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> way.
He is responsible for one of my favorites quotes:
&ldquo;Inside every non-Bayesian there is a Bayesian struggling to get out&rdquo;;
and one of my favorite heuristics around prior probabilities:
<a href="https://en.wikipedia.org/wiki/Cromwell%27s_rule">Cromwell&rsquo;s Rule</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.
Lindley predicted in 1975 that &ldquo;Bayesian methods will indeed become pervasive,
enabled by the development of powerful computing facilities&rdquo; (Lindley, 1975).
You can find more about all of Lindley&rsquo;s achievements in his <a href="https://www.theguardian.com/science/2014/mar/16/dennis-lindley">obituary</a>.</p>
<h2 id="lindleys-paradox">Lindley&rsquo;s Paradox</h2>
<p>Lindley&rsquo;s paradox<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> is a counterintuitive situation in statistics
in which the Bayesian and frequentist approaches to a hypothesis testing problem
give different results for certain choices of the prior distribution.</p>
<p>More formally, the paradox is as follows.
We have some parameter $\theta$ that we are interested in.
Then, we proceed with an experiment to test two competing hypotheses:</p>
<ol>
<li>$H_0$ (also known as <em>null hypothesis</em>):
there is no &ldquo;effect&rdquo;, or, more specifically,
$\theta = 0$.</li>
<li>$H_a$ (also known as <em>alternative hypothesis</em>):
there is an &ldquo;effect&rdquo;, or, more specifically,
$\theta \ne 0$.</li>
</ol>
<p>The paradox occurs when two conditions are met:</p>
<ol>
<li>The result of the experiment is <em>significant</em> by a frequentist test of $H_0$,
which indicates sufficient evidence to reject $H_0$, at a certain threshold of
probability<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</li>
<li>The posterior probability (Bayesian approach) of $H_0 \mid \theta$
(null hypothesis given $\theta$) is high,
which indicates strong evidence that $H_0$ should be favored over $H_a$,
that is, to <em>not</em> reject $H_0$.</li>
</ol>
<p>These results can occur at the same time when $H_0$ is very specific,
$H_a$ more diffuse,
and the prior distribution does not strongly favor one or the other.
These conditions are pervasive across science
and common in traditional null-hypothesis significance testing approaches.</p>
<p>This is a duel of frequentist versus Bayesian approaches,
and one of the many in which Bayesian emerges as the most coherent.
Let&rsquo;s give a example and go over the analytical result with a ton of math,
but also a computational result with <a href="https://julialang.org">Julia</a>.</p>
<h2 id="example">Example</h2>
<p>Here&rsquo;s the setup for the example.
In a certain city 49,581 boys and 48,870 girls have been
born over a certain time period.
The observed proportion of male births is thus
$\frac{49,581}{98,451} \approx 0.5036$.</p>
<p>We assume that the birth of a child is independent with a certain probability
$\theta$.
Since our data is a sequence of $n$ independent <a href="https://en.wikipedia.org/wiki/Bernoulli_trial">Bernoulli trials</a>,
i.e., $n$ independent random experiments with exactly two possible outcomes:
&ldquo;success&rdquo; and &ldquo;failure&rdquo;,
in which the probability of success is the same every time the
experiment is conducted.
We can safely assume that it follows a <a href="https://en.wikipedia.org/wiki/Binomial_distribution">binomial distribution</a>
with parameters:</p>
<ul>
<li>$n$: the number of &ldquo;trials&rdquo; (or the total number of births).</li>
<li>$\theta$: the probability of male births.</li>
</ul>
<p>We then set up our two competing hypotheses:</p>
<ol>
<li>$H_0$: $\theta = 0.5$.</li>
<li>$H_a$: $\theta \ne 0.5$.</li>
</ol>
<h3 id="analytical-solution">Analytical Solution</h3>
<p>This is a toy-problem and, like most toy problems,
we can solve it analytically<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> for both the frequentist and the Bayesian approaches.</p>
<h4 id="analytical-solutions----frequentist-approach">Analytical Solutions &ndash; Frequentist Approach</h4>
<p>The frequentist approach to testing $H_0$ is to compute a $p$-value<sup id="fnref1:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>,
the probability of observing births of boys at least as large as 49,581
assuming $H_0$ is true.
Because the number of births is very large,
we can use a normal approximation<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> for the
binomial-distributed number of male births.
Let&rsquo;s define $X$ as the total number of male births,
then $X$ follows a normal distribution:</p>
<p>$$X \sim \text{Normal}(\mu, \sigma)$$</p>
<p>where $\mu$ is the mean parameter,
$n \theta$ in our case,
and $\sigma$ is the standard deviation parameter,
$\sqrt{n \theta (1 - \theta)}$.
We need to calculate the conditional probability of
$X \geq \frac{49,581}{98,451} \approx 0.5036$
given $\mu = n \theta = 98,451 \cdot \frac{1}{2} = 49,225.5$
and
$\sigma = \sqrt{n \theta (1 - \theta)} = \sqrt{98,451 \cdot \frac{1}{2} \cdot (1 - \frac{1}{2})}$:</p>
<p>$$P(X \ge 0.5036 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75})$$</p>
<p>This is basically a
<a href="https://en.wikipedia.org/wiki/Cumulative_distribution_function">cumulative distribution function (CDF)</a>
of $X$ on the interval $[49,225.5, 98,451]$:</p>
<p>$$\int_{49,225.5}^{98,451} \frac{1}{\sqrt{2 \pi \sigma^2}} e^{- \frac{\left( \frac{x - \mu}{\sigma} \right)^2}{2}} dx$$</p>
<p>After inserting the values and doing some arithmetic,
our answer is approximately $0.0117$.
Note that this is a one-sided test,
since it is symmetrical,
the two-sided test would be
$0.0117 \cdot 2 = 0.0235$.
Since we don&rsquo;t deviate from the Fisher&rsquo;s canon,
this is well below the 5% threshold.
Hooray! We rejected the null hypothesis!
Quick! Grab a frequentist celebratory cigar!
But, wait. Let&rsquo;s check the Bayesian approach.</p>
<h4 id="analytical-solutions----bayesian-approach">Analytical Solutions &ndash; Bayesian Approach</h4>
<p>For the Bayesian approach, we need to set prior probabilities on both hypotheses.
Since we do not favor one from another, let&rsquo;s set equal prior probabilities:</p>
<p>$$P(H_0) = P(H_a) = \frac{1}{2}$$</p>
<p>Additionally, all parameters of interest need a prior distribution.
So, let&rsquo;s put a prior distribution on $\theta$.
We could be fancy here, but let&rsquo;s not.
We&rsquo;ll use a uniform distribution on $[0, 1]$.</p>
<p>We have everything we need to compute the posterior probability of $H_0$ given
$\theta$.
For this, we&rsquo;ll use <a href="https://en.wikipedia.org/wiki/Bayes%27_theorem">Bayes theorem</a><sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>:</p>
<p>$$P(A \mid B) = \frac{P(B \mid A) P(A)}{P(B)}$$</p>
<p>Now again let&rsquo;s plug in all the values:</p>
<p>$$P(H_0 \mid \theta) = \frac{P(\theta \mid H_0) P(H_0)}{P(\theta)}$$</p>
<p>Note that by the <a href="https://en.wikipedia.org/wiki/Probability_axioms">axioms of probability</a>
and by the <a href="https://en.wikipedia.org/wiki/Chain_rule_(probability)">product rule of probability</a>
we can decompose $P(\theta)$ into:</p>
<p>$$P(\theta) = P(\theta \mid H_0) P(H_0) + P(\theta \mid H_a) P(H_a)$$</p>
<p>Again, we&rsquo;ll use the normal approximation:</p>
<p>$$
\begin{aligned}
&amp;P \left( \theta = 0.5 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75} \right) \\
&amp;= \frac{
\frac{1}{\sqrt{2 \pi \sigma^2}} e^{- \left( \frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5
}
{
\frac{1}{\sqrt{2 \pi \sigma^2}} e^{ \left( -\frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5 +
\int_0^1 \frac {1}{\sqrt{2 \pi \sigma^2} } e^{- \left( \frac{\mu - \mu \cdot \theta)}{2 \sigma} \right)^2}d \theta \cdot 0.5
} \\
&amp;= 0.9505
\end{aligned}
$$</p>
<p>The likelihood of the alternative hypothesis,
$P(\theta \mid H_a)$,
is just the CDF of all possible values of $\theta \ne 0.5$.</p>
<p>$$P(H_0 \mid \text{data}) = P \left( \theta = 0.5 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75} \right) &gt; 0.95$$</p>
<p>And we fail to reject the null hypothesis, in frequentist terms.
However, we can also say in Bayesian terms, that we strongly favor $H_0$
over $H_a$.</p>
<p>Quick! Grab the Bayesian celebratory cigar!
The null is back on the game!</p>
<h3 id="computational-solutional">Computational Solutional</h3>
<p>For the computational solution, we&rsquo;ll use <a href="https://julialang.org">Julia</a>
and the following packages:</p>
<ul>
<li><a href="https://github.com/JuliaStats/HypothesisTests.jl"><code>HypothesisTest.jl</code></a></li>
<li><a href="https://turinglang.org/"><code>Turing.jl</code></a></li>
</ul>
<h4 id="computational-solutions----frequentist-approach">Computational Solutions &ndash; Frequentist Approach</h4>
<p>We can perform a <a href="https://juliastats.org/HypothesisTests.jl/stable/nonparametric/#Binomial-test"><code>BinomialTest</code></a>
with <code>HypothesisTest.jl</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">using</span> <span class="n">HypothesisTests</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">BinomialTest</span><span class="p">(</span><span class="mi">49_225</span><span class="p">,</span> <span class="mi">98_451</span><span class="p">,</span> <span class="mf">0.5036</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Binomial</span> <span class="n">test</span>
</span></span><span class="line"><span class="cl"><span class="o">-------------</span>
</span></span><span class="line"><span class="cl"><span class="n">Population</span> <span class="n">details</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">parameter</span> <span class="n">of</span> <span class="n">interest</span><span class="o">:</span>   <span class="n">Probability</span> <span class="n">of</span> <span class="n">success</span>
</span></span><span class="line"><span class="cl">    <span class="n">value</span> <span class="n">under</span> <span class="n">h_0</span><span class="o">:</span>         <span class="mf">0.5036</span>
</span></span><span class="line"><span class="cl">    <span class="n">point</span> <span class="n">estimate</span><span class="o">:</span>          <span class="mf">0.499995</span>
</span></span><span class="line"><span class="cl">    <span class="mi">95</span><span class="o">%</span> <span class="n">confidence</span> <span class="n">interval</span><span class="o">:</span> <span class="p">(</span><span class="mf">0.4969</span><span class="p">,</span> <span class="mf">0.5031</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Test</span> <span class="n">summary</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">outcome</span> <span class="n">with</span> <span class="mi">95</span><span class="o">%</span> <span class="n">confidence</span><span class="o">:</span> <span class="n">reject</span> <span class="n">h_0</span>
</span></span><span class="line"><span class="cl">    <span class="n">two</span><span class="o">-</span><span class="n">sided</span> <span class="n">p</span><span class="o">-</span><span class="n">value</span><span class="o">:</span>           <span class="mf">0.0239</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Details</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">number</span> <span class="n">of</span> <span class="n">observations</span><span class="o">:</span> <span class="mi">98451</span>
</span></span><span class="line"><span class="cl">    <span class="n">number</span> <span class="n">of</span> <span class="n">successes</span><span class="o">:</span>    <span class="mi">49225</span>
</span></span></code></pre></div><p>This is the two-sided test,
and I had to round $49,225.5$ to $49,225$
since <code>BinomialTest</code> do not support real numbers.
But the results match with the analytical solution,
we still reject the null.</p>
<h4 id="computational-solutions----bayesian-approach">Computational Solutions &ndash; Bayesian Approach</h4>
<p>Now, for the Bayesian computational approach,
I&rsquo;m going to use a generative modeling approach,
and one of my favorites probabilistic programming languages,
<code>Turing.jl</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">using</span> <span class="n">Turing</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@model</span> <span class="k">function</span> <span class="n">birth_rate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">           <span class="n">θ</span> <span class="o">~</span> <span class="n">Uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="n">total_births</span> <span class="o">=</span> <span class="mi">98_451</span>
</span></span><span class="line"><span class="cl">           <span class="n">male_births</span> <span class="o">~</span> <span class="n">Binomial</span><span class="p">(</span><span class="n">total_births</span><span class="p">,</span> <span class="n">θ</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="k">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="n">birth_rate</span><span class="p">()</span> <span class="o">|</span> <span class="p">(;</span> <span class="n">male_births</span> <span class="o">=</span> <span class="mi">49_225</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">(</span><span class="mi">1_000</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">),</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="mi">1_000</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Chains</span> <span class="n">MCMC</span> <span class="n">chain</span> <span class="p">(</span><span class="mi">1000</span><span class="o">×</span><span class="mi">13</span><span class="o">×</span><span class="mi">4</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Float64</span><span class="p">,</span> <span class="mi">3</span><span class="p">})</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Iterations</span>        <span class="o">=</span> <span class="mi">1001</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">2000</span>
</span></span><span class="line"><span class="cl"><span class="kt">Number</span> <span class="n">of</span> <span class="n">chains</span>  <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="n">Samples</span> <span class="n">per</span> <span class="n">chain</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="n">Wall</span> <span class="n">duration</span>     <span class="o">=</span> <span class="mf">0.2</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">Compute</span> <span class="n">duration</span>  <span class="o">=</span> <span class="mf">0.19</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">parameters</span>        <span class="o">=</span> <span class="n">θ</span>
</span></span><span class="line"><span class="cl"><span class="n">internals</span>         <span class="o">=</span> <span class="n">lp</span><span class="p">,</span> <span class="n">n_steps</span><span class="p">,</span> <span class="n">is_accept</span><span class="p">,</span> <span class="n">acceptance_rate</span><span class="p">,</span> <span class="n">log_density</span><span class="p">,</span> <span class="n">hamiltonian_energy</span><span class="p">,</span> <span class="n">hamiltonian_energy_error</span><span class="p">,</span> <span class="n">max_hamiltonian_energy_error</span><span class="p">,</span> <span class="n">tree_depth</span><span class="p">,</span> <span class="n">numerical_error</span><span class="p">,</span> <span class="n">step_size</span><span class="p">,</span> <span class="n">nom_step_size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Summary</span> <span class="n">Statistics</span>
</span></span><span class="line"><span class="cl">  <span class="n">parameters</span>      <span class="n">mean</span>       <span class="n">std</span>      <span class="n">mcse</span>    <span class="n">ess_bulk</span>    <span class="n">ess_tail</span>      <span class="n">rhat</span>   <span class="n">ess_per_sec</span>
</span></span><span class="line"><span class="cl">      <span class="kt">Symbol</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>     <span class="kt">Float64</span>     <span class="kt">Float64</span>   <span class="kt">Float64</span>       <span class="kt">Float64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">θ</span>    <span class="mf">0.4999</span>    <span class="mf">0.0016</span>    <span class="mf">0.0000</span>   <span class="mf">1422.2028</span>   <span class="mf">2198.1987</span>    <span class="mf">1.0057</span>     <span class="mf">7368.9267</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Quantiles</span>
</span></span><span class="line"><span class="cl">  <span class="n">parameters</span>      <span class="mf">2.5</span><span class="o">%</span>     <span class="mf">25.0</span><span class="o">%</span>     <span class="mf">50.0</span><span class="o">%</span>     <span class="mf">75.0</span><span class="o">%</span>     <span class="mf">97.5</span><span class="o">%</span>
</span></span><span class="line"><span class="cl">      <span class="kt">Symbol</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">θ</span>    <span class="mf">0.4969</span>    <span class="mf">0.4988</span>    <span class="mf">0.4999</span>    <span class="mf">0.5011</span>    <span class="mf">0.5031</span>
</span></span></code></pre></div><p>We can see from the output of the quantiles that the 95% quantile for $\theta$ is
the interval $(0.4969, 0.5031)$.
Although it overlaps zero, that is not the equivalent of a hypothesis test.
For that, we&rsquo;ll use the
<a href="https://en.wikipedia.org/wiki/highest_posterior_density_interval">highest posterior density interval (HPDI)</a>,
which is defined as &ldquo;choosing the narrowest interval&rdquo; that
captures a certain posterior density threshold value.
In this case, we&rsquo;ll use a threshold interval of 95%,
i.e. an $\alpha = 0.05$:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">hpd</span><span class="p">(</span><span class="n">chain</span><span class="p">;</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.05</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">HPD</span>
</span></span><span class="line"><span class="cl">  <span class="n">parameters</span>     <span class="n">lower</span>     <span class="n">upper</span>
</span></span><span class="line"><span class="cl">      <span class="kt">Symbol</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">θ</span>    <span class="mf">0.4970</span>    <span class="mf">0.5031</span>
</span></span></code></pre></div><p>We see that we fail to reject the null,
$\theta = 0.5$ at $\alpha = 0.05$ which is in accordance with the analytical
solution.</p>
<h2 id="why-the-frequentist-and-bayesian-approaches-disagree">Why the Frequentist and Bayesian Approaches Disagree</h2>
<p>Why do the approaches disagree?
What is going on under the hood?</p>
<p>The answer is disappointing<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>.
The main problem is that the frequentist approach only allows fixed significance
levels with respect to sample size.
Whereas the Bayesian approach is consistent and robust to sample size variations.</p>
<p>Taken to extreme, in some cases, due to huge sample sizes,
the $p$-value is pretty much a <em>proxy</em> for sample size
and have little to no utility on hypothesis testing.
This is known as $p$-hacking<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<h2 id="references">References</h2>
<p>Lindley, Dennis V. &ldquo;The future of statistics: A Bayesian 21st century&rdquo;.
<em>Advances in Applied Probability</em> 7 (1975): 106-115.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>as far as I know there&rsquo;s only one coherent approach to uncertainty,
and it is the Bayesian approach.
Otherwise, as de Finetti and Ramsey proposed,
you are susceptible to a <a href="https://en.wikipedia.org/wiki/Dutch_book">Dutch book</a>.
This is a topic for another blog post&hellip;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Cromwell&rsquo;s rule states that the use of prior probabilities of 1
(&ldquo;the event will definitely occur&rdquo;) or 0 (&ldquo;the event will definitely not occur&rdquo;)
should be avoided, except when applied to statements that are logically true or false.
Hence, anything that is not a math theorem should have priors in $(0,1)$.
The reference comes from <a href="https://en.wikipedia.org/wiki/Oliver_Cromwell">Oliver Cromwell</a>,
asking, very politely, for the Church of Scotland to consider that their prior probability
might be wrong.
This footnote also deserves a whole blog post&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://en.wikipedia.org/wiki/Stigler%27s_law_of_eponymy">Stigler&rsquo;s law of eponymy</a>
states that no scientific discovery is named after its original discoverer.
The paradox was already was discussed in <a href="https://en.wikipedia.org/wiki/Harold_Jeffreys">Harold Jeffreys</a>'
1939 textbook.
Also, fun fact, Stigler&rsquo;s is not the original creator of such law&hellip;
Now that&rsquo;s a self-referential paradox, and a broad version of the <a href="https://en.wikipedia.org/wiki/Halting_problem">Halting problem</a>,
which should earn its own footnote.
Nevertheless, we are getting into self-referential danger zone here with
footnotes&rsquo; of footnotes&rsquo; of footnotes&rsquo;&hellip;&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>this is called $p$-value and can be easily defined as
&ldquo;the probability of sampling data from a target population given that $H_0$
is true as the number of sampling procedures $\to \infty$&rdquo;.
Yes, it is not that intuitive, and it deserves not a blog post,
but a full curriculum to hammer it home.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>that is not true for most of the real-world problems.
For Bayesian approaches,
we need to run computational asymptotic exact approximations using a class
of methods called <a href="https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo">Markov chain Monte Carlo (MCMC)</a>.
Furthermore, for some nasty problems we need to use different set of methods
called <a href="https://en.wikipedia.org/wiki/Variational_Inference">variational inference (VI)</a>
or <a href="https://en.wikipedia.org/wiki/Approximate_Bayesian_computation">approximate Bayesian computation (ABC)</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>if you are curious about how this approximation works,
check the backup slides of my
<a href="https://github.com/storopoli/Bayesian-Statistics">open access and open source graduate course on Bayesian statistics</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Bayes&rsquo; theorem is officially called Bayes-Price-Laplace theorem.
Bayes was trying to disprove David Hume&rsquo;s argument that miracles did not exist
(How dare he?).
He used the probabilistic approach of trying to quantify the probability of a parameter
(god exists) given data (miracles happened).
He died without publishing any of his ideas.
His wife probably freaked out when she saw the huge pile of notes that he had
and called his buddy Richard Price to figure out what to do with it.
Price struck gold and immediately noticed the relevance of Bayes&rsquo; findings.
He read it aloud at the Royal Society.
Later, Pierre-Simon Laplace, unbeknownst to the work of Bayes,
used the same probabilistic approach to perform statistical inference using France&rsquo;s
first census data in the early-Napoleonic era.
Somehow we had the answer to statistical inference back then,
and we had to rediscover everything again in the late-20th century&hellip;&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>disappointing because most of
published scientific studies suffer from this flaw.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>and, like all footnotes here, it deserves its own blog post&hellip;&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Word Embeddings</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-20-word_embeddings/" />
        <id>https://storopoli.io/2023-11-20-word_embeddings/</id>
        <published>2023-11-19T22:49:51-03:00</published>
        <updated>2023-11-21T13:13:27+01:00</updated>
        <summary type="html">Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you&amp;rsquo;ll have to unfortunately enable JavaScript.
I wish I could go back in time and tell my younger self that you can make a machine understand human language with trigonometry. That would definitely have made me more aware and interested in the subject during my school years. I would have looked at triangles, circles, sines, cosines, and tangents in a whole different way.</summary>
          <content type="html"><![CDATA[<blockquote>
<p>Warning: This post has <a href="https://katex.org/">KaTeX</a> enabled,
so if you want to view the rendered math formulas,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p><img loading="lazy" src="euclid.jpg#center" alt="Euclid of Alexandria"  />
</p>
<p>I wish I could go back in time and tell my younger self
that you can make a machine understand human language with trigonometry.
That would definitely have made me more aware and interested in the
subject during my school years.
I would have looked at triangles, circles, sines, cosines, and tangents
in a whole different way.
Alas, better late than never.</p>
<p>In this post, we&rsquo;ll learn how to represent words using word embeddings,
and how to use basic trigonometry to play around with them.
Of course, we&rsquo;ll use <a href="https://julialang.org">Julia</a>.</p>
<h2 id="word-embeddings">Word Embeddings</h2>
<p><strong><a href="https://en.wikipedia.org/wiki/Word_embedding">Word embeddings</a> is a way to
represent words as a real-valued vector that encodes the meaning of the word
in such a way that words that are closer in the vector space are expected
to be similar in meaning</strong>.</p>
<p>Ok, let&rsquo;s unwrap the above definition.
First, a <strong>real-valued vector</strong> is any vector which its elements belong to the real
numbers.
Generally we denote vectors with a bold lower-case letter,
and we denote its elements (also called components) using square brackets.
Hence, a vector $\bold{v}$ that has 3 elements, $1$, $2$, and $3$,
can be written as</p>
<p>$$\bold{v} = \begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix}$$</p>
<p>Next, what &ldquo;close&rdquo; means for vectors?
We can use distance functions to get a measurable value.
The most famous and commonly used distance function is the <strong>Euclidean distance</strong>,
in honor of <a href="https://en.wikipedia.org/wiki/Euclid">Euclid</a>, the &ldquo;father of geometry&rdquo;,
and the guy pictured in the image at the top of this post.
The Euclidean distance is defined in trigonometry for 2-D and 3-D spaces.
However, it can be generalized to any dimension $n &gt; 1$ by using vectors.</p>
<p>Since every word is represented by an $n$-dimensional vector,
we can use distances to compute a metric that represent similarity between vectors.
And, more interesting, we can add and subtract words
(or any other linear combination of one or more words) to generate new words.</p>
<p>Before we jump to code and examples, a quick note about how word embeddings
are constructed.
They are trained like a regular machine learning algorithm,
where the cost function measures the difference between
some vector distance between the vectors and a &ldquo;semantic distance&rdquo;.
The goal is to iteratively find good vector values that minimize the cost.
So, if a vector is close to another vector measured by a distance function,
but far apart measured by some semantic distance on the words that these
vectors represent, then the cost function will be higher.
The algorithm cannot change the semantic distance, it is treated as a fixed value.
However, it can change the vector elements&rsquo; values so that the vector distance function
closely resembles the semantic distance function.
Lastly, generally the dimensionality of the vectors used in word embeddings
are high, $n &gt; 50$, since it needs a proper amount of dimensions in order to
represent all the semantic information of words with vectors.</p>
<h2 id="pre-trained-word-embeddings">Pre-Trained Word Embeddings</h2>
<p>Generally we don&rsquo;t train our own word embeddings from scratch,
we use pre-trained ones.
Here is a list of some of the most popular ones:</p>
<ul>
<li><a href="https://code.google.com/archive/p/word2vec/">Word2Vec</a>:
One of the first public available word embeddings,
made by Google in 2013.
Only supports English.</li>
<li><a href="https://nlp.stanford.edu/projects/glove/">GloVe</a>:
made by Stanford in 2014.
Only supports English.</li>
<li><a href="https://fasttext.cc/">FastText</a>:
From Facebook, released in 2016.
Supports hundreds of languages.</li>
</ul>
<h2 id="julia-code">Julia Code</h2>
<p>We will use the <a href="https://github.com/JuliaText/Embeddings.jl"><code>Embeddings.jl</code></a>
package to easily load word embeddings as vectors,
and the <a href="https://github.com/JuliaStats/Distances.jl"><code>Distances.jl</code></a>
package for the convenience of several distance functions.
This is a nice example of the Julia package ecosystem composability,
where one package can define types, another can define functions,
and another can define custom behavior of these functions on types that
are defined in other packages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jl" data-lang="jl"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">using</span> <span class="n">Embeddings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">using</span> <span class="n">Distances</span>
</span></span></code></pre></div><p>Let&rsquo;s load the <a href="https://nlp.stanford.edu/projects/glove/">GloVe</a>
word embeddings.
First, let&rsquo;s check what we have in store to choose from
GloVe&rsquo;s English language embeddings:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jl" data-lang="jl"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">language_files</span><span class="p">(</span><span class="kt">GloVe</span><span class="p">{</span><span class="ss">:en</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="mi">20</span><span class="o">-</span><span class="n">element</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">String</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.50d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.100d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.200d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.300d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.42B.300d/glove.42B.300d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.840B.300d/glove.840B.300d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.25d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.50d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.100d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.200d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.50d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.100d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.200d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.6B/glove.6B.300d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.42B.300d/glove.42B.300d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.840B.300d/glove.840B.300d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.25d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.50d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.100d.txt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;glove.twitter.27B/glove.twitter.27B.200d.txt&#34;</span>
</span></span></code></pre></div><p>I&rsquo;ll use the <code>&quot;glove.6B/glove.6B.50d.txt&quot;</code>.
This means that it was trained with 6 billion tokens,
and it provides embeddings with 50-dimensional vectors.
The <code>load_embeddings</code> function takes an optional second positional
argument as an <code>Int</code> to choose from which index of the <code>language_files</code> to use.
Finally, I just want the words &ldquo;king&rdquo;, &ldquo;queen&rdquo;, &ldquo;man&rdquo;, &ldquo;woman&rdquo;;
so I am passing these words as a <code>Set</code> to the <code>keep_words</code> keyword argument:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jl" data-lang="jl"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">const</span> <span class="n">glove</span> <span class="o">=</span> <span class="n">load_embeddings</span><span class="p">(</span><span class="kt">GloVe</span><span class="p">{</span><span class="ss">:en</span><span class="p">},</span> <span class="mi">1</span><span class="p">;</span> <span class="n">keep_words</span><span class="o">=</span><span class="kt">Set</span><span class="p">([</span><span class="s">&#34;king&#34;</span><span class="p">,</span> <span class="s">&#34;queen&#34;</span><span class="p">,</span> <span class="s">&#34;man&#34;</span><span class="p">,</span> <span class="s">&#34;woman&#34;</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl"><span class="n">Embeddings</span><span class="o">.</span><span class="kt">EmbeddingTable</span><span class="p">{</span><span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float32</span><span class="p">},</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">String</span><span class="p">}}(</span><span class="kt">Float32</span><span class="p">[</span><span class="o">-</span><span class="mf">0.094386</span> <span class="mf">0.50451</span> <span class="o">-</span><span class="mf">0.18153</span> <span class="mf">0.37854</span><span class="p">;</span> <span class="mf">0.43007</span> <span class="mf">0.68607</span> <span class="mf">0.64827</span> <span class="mf">1.8233</span><span class="p">;</span> <span class="o">…</span> <span class="p">;</span> <span class="mf">0.53135</span> <span class="o">-</span><span class="mf">0.64426</span> <span class="mf">0.48764</span> <span class="mf">0.0092753</span><span class="p">;</span> <span class="o">-</span><span class="mf">0.11725</span> <span class="o">-</span><span class="mf">0.51042</span> <span class="o">-</span><span class="mf">0.10467</span> <span class="o">-</span><span class="mf">0.60284</span><span class="p">],</span> <span class="p">[</span><span class="s">&#34;man&#34;</span><span class="p">,</span> <span class="s">&#34;king&#34;</span><span class="p">,</span> <span class="s">&#34;woman&#34;</span><span class="p">,</span> <span class="s">&#34;queen&#34;</span><span class="p">])</span>
</span></span></code></pre></div><p>Watch out with the order that we get back.
If you see the output of <code>load_embeddings</code>,
the order is <code>&quot;man&quot;, &quot;king&quot;, &quot;woman&quot;, &quot;queen&quot;]</code>
Let&rsquo;s see how a word is represented:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jl" data-lang="jl"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">queen</span> <span class="o">=</span> <span class="n">glove</span><span class="o">.</span><span class="n">embeddings</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">50</span><span class="o">-</span><span class="n">element</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float32</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="mf">0.37854</span>
</span></span><span class="line"><span class="cl">  <span class="mf">1.8233</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">1.2648</span>
</span></span><span class="line"><span class="cl">  <span class="o">⋮</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">2.2839</span>
</span></span><span class="line"><span class="cl">  <span class="mf">0.0092753</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">0.60284</span>
</span></span></code></pre></div><p>They are 50-dimensional vectors of <code>Float32</code>.</p>
<p>Now, here&rsquo;s the fun part:
let&rsquo;s add words and check the similarity between the
result and some other word.
A classical example is to start with the word &ldquo;king&rdquo;,
subtract the word &ldquo;men&rdquo;,
add the word &ldquo;woman&rdquo;,
and check the distance of the result to the word &ldquo;queen&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jl" data-lang="jl"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">man</span> <span class="o">=</span> <span class="n">glove</span><span class="o">.</span><span class="n">embeddings</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">king</span> <span class="o">=</span> <span class="n">glove</span><span class="o">.</span><span class="n">embeddings</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">woman</span> <span class="o">=</span> <span class="n">glove</span><span class="o">.</span><span class="n">embeddings</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">cosine_dist</span><span class="p">(</span><span class="n">king</span> <span class="o">-</span> <span class="n">man</span> <span class="o">+</span> <span class="n">woman</span><span class="p">,</span> <span class="n">queen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mf">0.13904202f0</span>
</span></span></code></pre></div><p>This is less than 1/4 of the distance of &ldquo;woman&rdquo; to &ldquo;king&rdquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jl" data-lang="jl"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">cosine_dist</span><span class="p">(</span><span class="n">woman</span><span class="p">,</span> <span class="n">king</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mf">0.58866215f0</span>
</span></span></code></pre></div><p>Feel free to play around with others words.
If you want suggestions, another classical example is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">cosine_dist</span><span class="p">(</span><span class="n">Madrid</span> <span class="o">-</span> <span class="n">Spain</span> <span class="o">+</span> <span class="n">France</span><span class="p">,</span> <span class="n">Paris</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I think that by allying interesting applications to abstract math topics
like trigonometry is the vital missing piece in STEM education.
I wish every new kid that is learning math could have the opportunity to contemplate
how new and exciting technologies have some amazing simple math under the hood.
If you liked this post, you would probably like <a href="https://en.wikipedia.org/wiki/Linear_algebra">linear algebra</a>.
I would highly recommend <a href="https://math.mit.edu/~gs/">Gilbert Strang&rsquo;s books</a>
and <a href="https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab">3blue1brown series on linear algebra</a>.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
]]></content>
      </entry>
      <entry>
        <title>What is soydev? And why do I hate it</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-10-2023-11-13-soydev/" />
        <id>https://storopoli.io/2023-11-10-2023-11-13-soydev/</id>
        <published>2023-11-13T00:00:00Z</published>
        <updated>2023-11-14T06:52:00-06:00</updated>
        <summary type="html">Let&amp;rsquo;s dive into the concept of &amp;ldquo;soydev&amp;rdquo;, a term often used pejoratively to describe developers with a superficial understanding of technology. I provide my definition of what soydev is, why is bad, and how it came to be. To counteract soydev inclinations, I propose an abstract approach centered on timeless concepts, protocols, and first principles, fostering a mindset of exploration, resilience in the face of failure, and an insatiable hunger for knowledge.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="soydev.jpg" alt="soydev meme"  />
</p>
<p>Let&rsquo;s dive into the <strong>concept of &ldquo;soydev&rdquo;</strong>,
a term often used pejoratively to describe developers with
a superficial understanding of technology.
I provide my definition of what soydev is,
why is bad, and how it came to be.
To counteract soydev inclinations,
I propose an abstract approach centered on timeless concepts, protocols,
and first principles, fostering a mindset of exploration,
resilience in the face of failure, and an insatiable hunger for knowledge.</p>
<p>While we&rsquo;ll start with a look at the soydev stereotype,
our journey will lead us to a wider reflection on the importance of depth in
technological understanding.</p>
<h2 id="definition">Definition</h2>
<p>First, let&rsquo;s tackle the definition of <em>soydev</em>.
<a href="https://www.urbandictionary.com/define.php?term=Soydev">Urban Dictionary</a>
provides two interesting definitions:</p>
<p>Urban Dictionary definition 1:</p>
<blockquote>
<p>Soydev is a &ldquo;programmer&rdquo; that works at a bigh tech company and
only knows JavaScript and HTML.
They love IDEs like Visual Studio Code and inefficient frameworks
that slow their code down.
They represent the majority of &ldquo;programmers&rdquo; today and
if their numbers continue growing,
not one person on earth will know how a computer works by the year 2050
when all the gigachad 1980s C and Unix programmers are gone.</p>
</blockquote>
<p>Urban Dictionary definition 2:</p>
<blockquote>
<p>Soydev is a type of most abundant Software Developer.
The Software he/she makes is always inefficient and
uses more CPU and RAM than it should.
This person always prefers hard work to smart work,
Has little or no knowledge of existing solutions of a problem,
Comes up with very complex solution for a simple problem and
has fear of native and fast programming languages like C, C++ and Rust</p>
</blockquote>
<p>These definitions give a glimpse of what a soydev is.
However, they are loaded with pejorative language,
and also are based on non-timeless technologies and tools.
I, much prefer to rely on concepts and principles that are timeless.
Hence, I will provide my own definition of soydev:</p>
<p><strong>Soydev is someone who only has a superficial conception of technology
and computers that is restricted to repeating patterns learned
from popular workflows on the internet;
but who doesn&rsquo;t dedicate time or effort to learning concepts in a deeper way.</strong></p>
<p>Although soydev is a term with specific connotations,
it opens the door to a larger conversation about the depth of our engagement
with technology.
This superficiality is not unique to soydevs
but is a symptom of a broader trend in our relationship with technology.</p>
<p>Most of us start our journey in a skill by having the superficial conception of it.
However, some are not satisfied with this superficial conception,
and strive to understand what lies beyond the surface.</p>
<p>Understanding concepts from first principles allows us to achieve a deep graceful
kind of mastery that when seems almost effortless to others.
Deep down lies a lot of effort and time spent in learning and practicing.
Innumerable hours of deep thinking and reflecting on
why things are the way they are, and how they could be different if you
tried to implement them from scratch yourself.</p>
<p>There is also an inherently rare mixture of curiosity and creativity in the
process of profoundly learning and understanding concepts in this way.
You start not only to ask the &ldquo;Why?&rdquo; questions but also the &ldquo;What if?&rdquo; questions.
I feel that this posture on understanding concepts paves the way for joyful mastery.</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Feynman">Richard Feynman</a>
once said &ldquo;What I cannot create, I do not understand&rdquo;.
You cannot create anything that you don&rsquo;t know the underlying concepts.
Therefore, by allying creativity and discovery with deep knowledge,
Feynman&rsquo;s argument was that in order for you truly master something,
you&rsquo;ll need to be able to recreate it from scratch.</p>
<p>If you are struggling with my abstractions, I can provide some concrete examples.
A soydev might be someone who:</p>
<ol>
<li>Instead of using a simple text editor like vim/emacs/nano,
prefers a totally bloated IDE like VSCode to write even basic things in plaintext.
Or cannot SSH into a remote server without a GUI.</li>
<li>Instead of choosing a native solution like HTML for a simple web page section,
prefers to overengineer with a JavaScript framework that has a lot of dependencies,
and takes 3 seconds to render in the browser.</li>
<li>Prefers to use black box abstractions instead of learning about basic tech
primitives and protocols that would get the job done.</li>
<li>Has no idea what about most concepts that are at the core of computing like
bit, byte, heap, stack, garbage collector, async, parallel, CPU cycles,
cache miss, L1/L2/L3 cache etc.</li>
<li>Don&rsquo;t understand the math, or what is going on under the hood when
using machine learning libraries.</li>
</ol>
<h2 id="why-soydev-is-bad">Why soydev is bad</h2>
<p>First, let&rsquo;s understand that being a soydev is not necessarily bad,
but is highly limited on his ability and curiosity.
A soydev will never be able to achieve the same level of mastery
as someone who is willing to go deep and learn concepts from first principles.</p>
<p>Now, on the other hand,
soydev is bad because it perpetuates a mindset of superficiality.
The path of technology innovation is guided by curiosity and creativity.
And paved with hard work and deep understanding.
Imagine if all the great minds in technology took the easy path of mindless
tooling and problem-solving?
We would be in a stagnant and infertile scenario,
where everyone would use the same technology and tools without
questioning or thinking about the problems that they are trying to solve.</p>
<p>Hence, the culture of soydev is bad for the future of technology,
where most new developers will be highly limited in their ability to innovate.</p>
<h2 id="why-soydev-is-on-the-rise">Why soydev is on the rise</h2>
<p>I think that soydev culture is highly correlated with
the increase of technology and
decrease of barriers to access such technology.
We live in an age that not only technology is everywhere,
but also to interact with it is quite effortless.</p>
<p>My computational statistician mind is always aware of cognitive
and statistical bias.
Whenever I see a correlation across time,
I always take a step back and try to think about the assumptions
and conceptual models behind it.</p>
<p>Does the increase in technology usage and importance in daily life
results in more people using technology from a professional point-of-view?
Yes.
Does the increase in people professionally using technology
results in an increase of tooling and conceptual abstractions
that allows superficial interactions without need to deeply understand
the concepts behind such technology?
I do think that this is true as well.</p>
<p>These assumptions cover the constituents of the rise of soydev
from a &ldquo;demand&rdquo; viewpoint.
Nevertheless, there is also the analogous &ldquo;supply&rdquo; viewpoint.
If these trends in demand are not met by trends in supply,
we would not see the establishment of the soydev phenomenon.
There is an emerging trend to standardize all the available tech
into commodities.</p>
<p>While commoditization of technological solutions has inherent advantages,
such as scalability and lower opportunity costs,
it has some disadvantages.
The main disadvantage is the abrupt decrease of technological innovations.
If we have strong standardization that are enforced by market and social forces,
then why care to innovate?
Why bring new solutions or new ways to solve problems if it will not be adopted
and are doomed to oblivion?
Why decide to try to do things different if there is such a high maintenance
cost, especially when training and expanding human resources capable of
dealing with such non-standard solutions?</p>
<p>In this context, technological innovation can only be undertaken
by big corporations that, not only have big budgets,
but also big influence to push its innovations as industry standards.</p>
<p>Don&rsquo;t get me wrong: I do think that industry standards are important.
However, I much prefer a protocol standard than product standards.
First, protocol standards are generally not tied to a single company or brand.
Second, protocol standards have a higher propensity to expose its underlying
concepts to developers.
Think about TCP/IP versus your favorite front-end framework:
Which one would result in deeper understanding of the underlying concepts?</p>
<p>The rise of soydevs mirrors a societal shift towards immediate gratification and
away from the pursuit of deep knowledge.</p>
<h2 id="how-to-stop-being-a-soydev">How to stop being a soydev</h2>
<p>Despite these unstoppable trends I do think that it is possible to use
tools and shallow abstractions without being a soydev.
Or, to stop being a soydev and advance towards deep understanding
of what constitutes your craft.
Moving beyond the &lsquo;soydev&rsquo; mindset is about embracing the richness that
comes from a deep understanding of technology.
Here is a short, not by any means exhaustive list of things that you can start doing:</p>
<ol>
<li><strong>Stop thinking about what is latest and greatest</strong>.
The tools are not important as the problems they are solving.
Understand what is the need that the tool tries to address,
and the major concepts on how it works.</li>
<li><strong>Focus on concepts, protocols and first principles</strong>.
Forget about frameworks, languages, editors, apps, etc.
Focus on what probably won&rsquo;t change in the next decade in technology.
It is easy (and less uncertain) to think concepts and problems,
than in tools and solutions.</li>
<li><strong>Set aside some weekly time to explore new ideas</strong>.
Time block it, make it a calendar event.
Try to find a time slot that you can be free of distraction and worries.
Free all of your working memory when you are starting a &ldquo;new idea&rdquo; session.
Think about what problem is this idea trying to solve.
Also don&rsquo;t be stuck to just using the &ldquo;problem-solving&rdquo; lens.
Most concepts that are worth knowing in computer science and programming
don&rsquo;t have a clear problem tied to them.</li>
<li><strong>Tinker. Play around</strong>. Break something down and see if you can build from scratch.
Remember Feynman&rsquo;s &ldquo;What I cannot create, I do not understand&rdquo;.</li>
<li><strong>Failure is almost certain</strong>. Yes, you will definitely fail.
I say to a lot of junior devs, interns, and students that the only advantage
that I have compared to them is that I&rsquo;ve failed more times that they have tried.</li>
<li><strong>Stay curious and hungry for knowledge</strong>.
I am always impressed on how children are so curious.
I feel sad that almost no one retains their childhood curiosity as an adult
(Maybe that&rsquo;s why I love to interact with children).
Also, I am amazed by how deprived of will to learn some are.
That is an idea that for me, it is hard to grasp,
since I feel the exactly opposite.
Often I have to hold myself not diving into certain areas, ideas or concepts
because I cannot afford the time to learn them.
However, I am always tempted by them.</li>
</ol>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
]]></content>
      </entry>
      <entry>
        <title>About</title>
        <link rel="alternate" href="https://storopoli.io/about/" />
        <id>https://storopoli.io/about/</id>
        <published>0001-01-01T00:00:00Z</published>
        <updated>2024-01-12T16:39:10-03:00</updated>
        <summary type="html">I am a computational statistician, data scientist, machine learning engineer; and an ardent Bayesian. I like Julia, Rust, Vim, and Nix. I love math, computer science, coding, stats, and teaching. I practice Stoic Philosophy daily. I hate bloatware and soydevs. My natural habitat is the terminal. Everything that I do is either open source or has a permissive Creative Commons license.
Here&amp;rsquo;s a list of some resources that I&amp;rsquo;ve made or contributed:</summary>
          <content type="html"><![CDATA[<p>I am a computational statistician, data scientist, machine learning engineer;
and an ardent <a href="https://youtu.be/RMNwsdb5VU4">Bayesian</a>.
I like <a href="https://julialang.org">Julia</a>,
<a href="https://rust-lang.org/">Rust</a>,
<a href="https://www.vim.org/">Vim</a>,
and <a href="https://nixos.org">Nix</a>.
I love math, computer science, coding, stats, and teaching.
I practice <a href="https://stoicquotes.io">Stoic Philosophy</a> daily.
I hate bloatware and <a href="../2023-11-10-2023-11-13-soydev/">soydevs</a>.
My natural habitat is the <a href="https://github.com/storopoli/flakes">terminal</a>.
Everything that I do is either open source or has a permissive Creative Commons license.</p>
<p>Here&rsquo;s a list of some resources that I&rsquo;ve made or contributed:</p>
<ul>
<li><a href="https://juliadatascience.io/">Julia Data Science book</a>.</li>
<li><a href="https://github.com/storopoli/Bayesian-Statistics">Graduate course on Bayesian Statistics</a> +
<a href="https://www.youtube.com/playlist?list=PLpTXaEnTpmwPa1lx7VCbmqsSbXb2gg2PS">online lectures</a>
with <a href="https://mc-stan.org"><code>Stan</code></a> and
<a href="https://turinglang.org"><code>Turing.jl</code></a> code examples.</li>
<li><a href="https://storopoli.io/Bayesian-Julia">Bayesian Statistics with Julia and <code>Turing.jl</code></a></li>
<li><a href="https://github.com/TuringLang/TuringGLM.jl"><code>TuringGLM.jl</code></a></li>
<li><a href="https://youtu.be/uiQpwMQZBTA">Introduction to Julia (JuliaCon 2022 Workshop)</a></li>
<li><a href="https://storopoli.io/Computacao-Cientifica/">Data Science and Scientific Computing with Julia (Portuguese)</a></li>
<li><a href="https://github.com/storopoli/ciencia-de-dados">Undergraduate course on Data Science, Machine Learning and Deep Learning (Portuguese)</a></li>
<li><a href="https://storopoli.io/Why-Julia">Why Julia? A gentle pitch</a></li>
<li><a href="https://storopoli.io/Estatistica/">Graduate course on Statistics (Portuguese)</a>
with <code>R</code></li>
<li><a href="https://storopoli.io/Rcpp/"><code>Rcpp</code> tutorials (Portuguese)</a></li>
<li><a href="https://storopoli.io/topic-modeling-workshop/">Topic Modeling workshop (Portuguese)</a></li>
</ul>
<p>I don&rsquo;t have social media, since I think they are overrated
and &ldquo;they sell your data&rdquo;.
If you want to contact me, please send an email.</p>
]]></content>
      </entry>

</feed>


