[{"content":" Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nI wish I could go back in time and tell my younger self that you can make a machine understand human language with trigonometry. That would definitely have made me more aware and interested in the subject during my school years. I would have looked at triangles, circles, sines, cosines, and tangents in a whole different way. Alas, better late than never.\nIn this post, we\u0026rsquo;ll learn how to represent words using word embeddings, and how to use basic trigonometry to play around with them. Of course, we\u0026rsquo;ll use Julia.\nWord Embeddings Word embeddings is a way to represent words as a real-valued vector that encodes the meaning of the word in such a way that words that are closer in the vector space are expected to be similar in meaning.\nOk, let\u0026rsquo;s unwrap the above definition. First, a real-valued vector is any vector which its elements belong to the real numbers. Generally we denote vectors with a bold lower-case letter, and we denote its elements (also called components) using square brackets. Hence, a vector $\\bold{v}$ that has 3 elements, $1$, $2$, and $3$, can be written as\n$$\\bold{v} = \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix}$$\nNext, what \u0026ldquo;close\u0026rdquo; means for vectors? We can use distance functions to get a measurable value. The most famous and commonly used distance function is the Euclidean distance, in honor of Euclid, the \u0026ldquo;father of geometry\u0026rdquo;, and the guy pictured in the image at the top of this post. The Euclidean distance is defined in trigonometry for 2-D and 3-D spaces. However, it can be generalized to any dimension $n \u0026gt; 1$ by using vectors.\nSince every word is represented by an $n$-dimensional vector, we can use distances to compute a metric that represent similarity between vectors. And, more interesting, we can add and subtract words (or any other linear combination of one or more words) to generate new words.\nBefore we jump to code and examples, a quick note about how word embeddings are constructed. They are trained like a regular machine learning algorithm, where the cost function measures the difference between some vector distance between the vectors and a \u0026ldquo;semantic distance\u0026rdquo;. The goal is to iteratively find good vector values that minimize the cost. So, if a vector is close to another vector measured by a distance function, but far apart measured by some semantic distance on the words that these vectors represent, then the cost function will be higher. The algorithm cannot change the semantic distance, it is treated as a fixed value. However, it can change the vector elements\u0026rsquo; values so that the vector distance function closely resembles the semantic distance function. Lastly, generally the dimensionality of the vectors used in word embeddings are high, $n \u0026gt; 50$, since it needs a proper amount of dimensions in order to represent all the semantic information of words with vectors.\nPre-Trained Word Embeddings Generally we don\u0026rsquo;t train our own word embeddings from scratch, we use pre-trained ones. Here is a list of some of the most popular ones:\nWord2Vec: One of the first public available word embeddings, made by Google in 2013. Only supports English. GloVe: made by Stanford in 2014. Only supports English. FastText: From Facebook, released in 2016. Supports hundreds of languages. Julia Code We will use the Embeddings.jl package to easily load word embeddings as vectors, and the Distances.jl package for the convenience of several distance functions. This is a nice example of the Julia package ecosystem composability, where one package can define types, another can define functions, and another can define custom behavior of these functions on types that are defined in other packages.\njulia\u0026gt; using Embeddings julia\u0026gt; using Distances Let\u0026rsquo;s load the GloVe word embeddings. First, let\u0026rsquo;s check what we have in store to choose from GloVe\u0026rsquo;s English language embeddings:\njulia\u0026gt; language_files(GloVe{:en}) 20-element Vector{String}: \u0026#34;glove.6B/glove.6B.50d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.100d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.200d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.300d.txt\u0026#34; \u0026#34;glove.42B.300d/glove.42B.300d.txt\u0026#34; \u0026#34;glove.840B.300d/glove.840B.300d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.25d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.50d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.100d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.200d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.50d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.100d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.200d.txt\u0026#34; \u0026#34;glove.6B/glove.6B.300d.txt\u0026#34; \u0026#34;glove.42B.300d/glove.42B.300d.txt\u0026#34; \u0026#34;glove.840B.300d/glove.840B.300d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.25d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.50d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.100d.txt\u0026#34; \u0026#34;glove.twitter.27B/glove.twitter.27B.200d.txt\u0026#34; I\u0026rsquo;ll use the \u0026quot;glove.6B/glove.6B.50d.txt\u0026quot;. This means that it was trained with 6 billion tokens, and it provides embeddings with 50-dimensional vectors. The load_embeddings function takes an optional second positional argument as an Int to choose from which index of the language_files to use. Finally, I just want the words \u0026ldquo;king\u0026rdquo;, \u0026ldquo;queen\u0026rdquo;, \u0026ldquo;man\u0026rdquo;, \u0026ldquo;woman\u0026rdquo;; so I am passing these words as a Set to the keep_words keyword argument:\njulia\u0026gt; const glove = load_embeddings(GloVe{:en}, 1; keep_words=Set([\u0026#34;king\u0026#34;, \u0026#34;queen\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;woman\u0026#34;])); Embeddings.EmbeddingTable{Matrix{Float32}, Vector{String}}(Float32[-0.094386 0.50451 -0.18153 0.37854; 0.43007 0.68607 0.64827 1.8233; … ; 0.53135 -0.64426 0.48764 0.0092753; -0.11725 -0.51042 -0.10467 -0.60284], [\u0026#34;man\u0026#34;, \u0026#34;king\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;queen\u0026#34;]) Watch out with the order that we get back. If you see the output of load_embeddings, the order is \u0026quot;man\u0026quot;, \u0026quot;king\u0026quot;, \u0026quot;woman\u0026quot;, \u0026quot;queen\u0026quot;] Let\u0026rsquo;s see how a word is represented:\njulia\u0026gt; queen = glove.embeddings[:, 4] 50-element Vector{Float32}: 0.37854 1.8233 -1.2648 ⋮ -2.2839 0.0092753 -0.60284 They are 50-dimensional vectors of Float32.\nNow, here\u0026rsquo;s the fun part: let\u0026rsquo;s add words and check the similarity between the result and some other word. A classical example is to start with the word \u0026ldquo;king\u0026rdquo;, subtract the word \u0026ldquo;men\u0026rdquo;, add the word \u0026ldquo;woman\u0026rdquo;, and check the distance of the result to the word \u0026ldquo;queen\u0026rdquo;:\njulia\u0026gt; man = glove.embeddings[:, 1]; julia\u0026gt; king = glove.embeddings[:, 2]; julia\u0026gt; woman = glove.embeddings[:, 3]; julia\u0026gt; cosine_dist(king - man + woman, queen) 0.13904202f0 This is less than 1/4 of the distance of \u0026ldquo;woman\u0026rdquo; to \u0026ldquo;king\u0026rdquo;:\njulia\u0026gt; cosine_dist(woman, king) 0.58866215f0 Feel free to play around with others words. If you want suggestions, another classical example is:\ncosine_dist(Madrid - Spain + France, Paris) Conclusion I think that by allying interesting applications to abstract math topics like trigonometry is the vital missing piece in STEM education. I wish every new kid that is learning math could have the opportunity to contemplate how new and exciting technologies have some amazing simple math under the hood. If you liked this post, you would probably like linear algebra. I would highly recommend Gilbert Strang\u0026rsquo;s books and 3blue1brown series on linear algebra.\nLicense This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n","permalink":"https://storopoli.io/2023-11-20-word_embeddings/","summary":"Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you\u0026rsquo;ll have to unfortunately enable JavaScript.\nI wish I could go back in time and tell my younger self that you can make a machine understand human language with trigonometry. That would definitely have made me more aware and interested in the subject during my school years. I would have looked at triangles, circles, sines, cosines, and tangents in a whole different way.","title":"Word Embeddings"},{"content":" Let\u0026rsquo;s dive into the concept of \u0026ldquo;soydev\u0026rdquo;, a term often used pejoratively to describe developers with a superficial understanding of technology. I provide my definition of what soydev is, why is bad, and how it came to be. To counteract soydev inclinations, I propose an abstract approach centered on timeless concepts, protocols, and first principles, fostering a mindset of exploration, resilience in the face of failure, and an insatiable hunger for knowledge.\nWhile we\u0026rsquo;ll start with a look at the soydev stereotype, our journey will lead us to a wider reflection on the importance of depth in technological understanding.\nDefinition First, let\u0026rsquo;s tackle the definition of soydev. Urban Dictionary provides two interesting definitions:\nUrban Dictionary definition 1:\nSoydev is a \u0026ldquo;programmer\u0026rdquo; that works at a bigh tech company and only knows JavaScript and HTML. They love IDEs like Visual Studio Code and inefficient frameworks that slow their code down. They represent the majority of \u0026ldquo;programmers\u0026rdquo; today and if their numbers continue growing, not one person on earth will know how a computer works by the year 2050 when all the gigachad 1980s C and Unix programmers are gone.\nUrban Dictionary definition 2:\nSoydev is a type of most abundant Software Developer. The Software he/she makes is always inefficient and uses more CPU and RAM than it should. This person always prefers hard work to smart work, Has little or no knowledge of existing solutions of a problem, Comes up with very complex solution for a simple problem and has fear of native and fast programming languages like C, C++ and Rust\nThese definitions give a glimpse of what a soydev is. However, they are loaded with pejorative language, and also are based on non-timeless technologies and tools. I, much prefer to rely on concepts and principles that are timeless. Hence, I will provide my own definition of soydev:\nSoydev is someone who only has a superficial conception of technology and computers that is restricted to repeating patterns learned from popular workflows on the internet; but who doesn\u0026rsquo;t dedicate time or effort to learning concepts in a deeper way.\nAlthough soydev is a term with specific connotations, it opens the door to a larger conversation about the depth of our engagement with technology. This superficiality is not unique to soydevs but is a symptom of a broader trend in our relationship with technology.\nMost of us start our journey in a skill by having the superficial conception of it. However, some are not satisfied with this superficial conception, and strive to understand what lies beyond the surface.\nUnderstanding concepts from first principles allows us to achieve a deep graceful kind of mastery that when seems almost effortless to others. Deep down lies a lot of effort and time spent in learning and practicing. Innumerable hours of deep thinking and reflecting on why things are the way they are, and how they could be different if you tried to implement them from scratch yourself.\nThere is also an inherently rare mixture of curiosity and creativity in the process of profoundly learning and understanding concepts in this way. You start not only to ask the \u0026ldquo;Why?\u0026rdquo; questions but also the \u0026ldquo;What if?\u0026rdquo; questions. I feel that this posture on understanding concepts paves the way for joyful mastery.\nRichard Feynman once said \u0026ldquo;What I cannot create, I do not understand\u0026rdquo;. You cannot create anything that you don\u0026rsquo;t know the underlying concepts. Therefore, by allying creativity and discovery with deep knowledge, Feynman\u0026rsquo;s argument was that in order for you truly master something, you\u0026rsquo;ll need to be able to recreate it from scratch.\nIf you are struggling with my abstractions, I can provide some concrete examples. A soydev might be someone who:\nInstead of using a simple text editor like vim/emacs/nano, prefers a totally bloated IDE like VSCode to write even basic things in plaintext. Or cannot SSH into a remote server without a GUI. Instead of choosing a native solution like HTML for a simple web page section, prefers to overengineer with a JavaScript framework that has a lot of dependencies, and takes 3 seconds to render in the browser. Prefers to use black box abstractions instead of learning about basic tech primitives and protocols that would get the job done. Has no idea what about most concepts that are at the core of computing like bit, byte, heap, stack, garbage collector, async, parallel, CPU cycles, cache miss, L1/L2/L3 cache etc. Don\u0026rsquo;t understand the math, or what is going on under the hood when using machine learning libraries. Why soydev is bad First, let\u0026rsquo;s understand that being a soydev is not necessarily bad, but is highly limited on his ability and curiosity. A soydev will never be able to achieve the same level of mastery as someone who is willing to go deep and learn concepts from first principles.\nNow, on the other hand, soydev is bad because it perpetuates a mindset of superficiality. The path of technology innovation is guided by curiosity and creativity. And paved with hard work and deep understanding. Imagine if all the great minds in technology took the easy path of mindless tooling and problem-solving? We would be in a stagnant and infertile scenario, where everyone would use the same technology and tools without questioning or thinking about the problems that they are trying to solve.\nHence, the culture of soydev is bad for the future of technology, where most new developers will be highly limited in their ability to innovate.\nWhy soydev is on the rise I think that soydev culture is highly correlated with the increase of technology and decrease of barriers to access such technology. We live in an age that not only technology is everywhere, but also to interact with it is quite effortless.\nMy computational statistician mind is always aware of cognitive and statistical bias. Whenever I see a correlation across time, I always take a step back and try to think about the assumptions and conceptual models behind it.\nDoes the increase in technology usage and importance in daily life results in more people using technology from a professional point-of-view? Yes. Does the increase in people professionally using technology results in an increase of tooling and conceptual abstractions that allows superficial interactions without need to deeply understand the concepts behind such technology? I do think that this is true as well.\nThese assumptions cover the constituents of the rise of soydev from a \u0026ldquo;demand\u0026rdquo; viewpoint. Nevertheless, there is also the analogous \u0026ldquo;supply\u0026rdquo; viewpoint. If these trends in demand are not met by trends in supply, we would not see the establishment of the soydev phenomenon. There is an emerging trend to standardize all the available tech into commodities.\nWhile commoditization of technological solutions has inherent advantages, such as scalability and lower opportunity costs, it has some disadvantages. The main disadvantage is the abrupt decrease of technological innovations. If we have strong standardization that are enforced by market and social forces, then why care to innovate? Why bring new solutions or new ways to solve problems if it will not be adopted and are doomed to oblivion? Why decide to try to do things different if there is such a high maintenance cost, especially when training and expanding human resources capable of dealing with such non-standard solutions?\nIn this context, technological innovation can only be undertaken by big corporations that, not only have big budgets, but also big influence to push its innovations as industry standards.\nDon\u0026rsquo;t get me wrong: I do think that industry standards are important. However, I much prefer a protocol standard than product standards. First, protocol standards are generally not tied to a single company or brand. Second, protocol standards have a higher propensity to expose its underlying concepts to developers. Think about TCP/IP versus your favorite front-end framework: Which one would result in deeper understanding of the underlying concepts?\nThe rise of soydevs mirrors a societal shift towards immediate gratification and away from the pursuit of deep knowledge.\nHow to stop being a soydev Despite these unstoppable trends I do think that it is possible to use tools and shallow abstractions without being a soydev. Or, to stop being a soydev and advance towards deep understanding of what constitutes your craft. Moving beyond the \u0026lsquo;soydev\u0026rsquo; mindset is about embracing the richness that comes from a deep understanding of technology. Here is a short, not by any means exhaustive list of things that you can start doing:\nStop thinking about what is latest and greatest. The tools are not important as the problems they are solving. Understand what is the need that the tool tries to address, and the major concepts on how it works. Focus on concepts, protocols and first principles. Forget about frameworks, languages, editors, apps, etc. Focus on what probably won\u0026rsquo;t change in the next decade in technology. It is easy (and less uncertain) to think concepts and problems, than in tools and solutions. Set aside some weekly time to explore new ideas. Time block it, make it a calendar event. Try to find a time slot that you can be free of distraction and worries. Free all of your working memory when you are starting a \u0026ldquo;new idea\u0026rdquo; session. Think about what problem is this idea trying to solve. Also don\u0026rsquo;t be stuck to just using the \u0026ldquo;problem-solving\u0026rdquo; lens. Most concepts that are worth knowing in computer science and programming don\u0026rsquo;t have a clear problem tied to them. Tinker. Play around. Break something down and see if you can build from scratch. Remember Feynman\u0026rsquo;s \u0026ldquo;What I cannot create, I do not understand\u0026rdquo;. Failure is almost certain. Yes, you will definitely fail. I say to a lot of junior devs, interns, and students that the only advantage that I have compared to them is that I\u0026rsquo;ve failed more times that they have tried. Stay curious and hungry for knowledge. I am always impressed on how children are so curious. I feel sad that almost no one retains their childhood curiosity as an adult (Maybe that\u0026rsquo;s why I love to interact with children). Also, I am amazed by how deprived of will to learn some are. That is an idea that for me, it is hard to grasp, since I feel the exactly opposite. Often I have to hold myself not diving into certain areas, ideas or concepts because I cannot afford the time to learn them. However, I am always tempted by them. License This post is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n","permalink":"https://storopoli.io/2023-11-10-2023-11-13-soydev/","summary":"Let\u0026rsquo;s dive into the concept of \u0026ldquo;soydev\u0026rdquo;, a term often used pejoratively to describe developers with a superficial understanding of technology. I provide my definition of what soydev is, why is bad, and how it came to be. To counteract soydev inclinations, I propose an abstract approach centered on timeless concepts, protocols, and first principles, fostering a mindset of exploration, resilience in the face of failure, and an insatiable hunger for knowledge.","title":"What is soydev? And why do I hate it"},{"content":"I am a computational statistician and an ardent Bayesian. I like Julia, Rust, Neovim, and Nix. I love math, computer science, coding, stats, and teaching. I hate bloatware and soydevs. My natural habitat is the terminal. Everything that I do is either open source or has a permissive Creative Commons license.\nHere\u0026rsquo;s a list of some resources that I\u0026rsquo;ve made or contributed:\nJulia Data Science book. Graduate course on Bayesian Statistics with Stan and Turing.jl code examples. Bayesian Statistics with Julia and Turing.jl TuringGLM.jl Data Science and Scientific Computing with Julia (Portuguese) Undergraduate course on Data Science, Machine Learning and Deep Learning (Portuguese) Why Julia? A gentle pitch Graduate course on Statistics (Portuguese) with R Rcpp tutorials (Portuguese) Topic Modeling workshop (Portuguese) I don\u0026rsquo;t have social media, since I think they are overrated and \u0026ldquo;they sell your data\u0026rdquo;. If you want to contact me, please send an email.\n","permalink":"https://storopoli.io/about/","summary":"I am a computational statistician and an ardent Bayesian. I like Julia, Rust, Neovim, and Nix. I love math, computer science, coding, stats, and teaching. I hate bloatware and soydevs. My natural habitat is the terminal. Everything that I do is either open source or has a permissive Creative Commons license.\nHere\u0026rsquo;s a list of some resources that I\u0026rsquo;ve made or contributed:\nJulia Data Science book. Graduate course on Bayesian Statistics with Stan and Turing.","title":"About"}]