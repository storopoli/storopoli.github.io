<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bayesian on Jose Storopoli, PhD</title>
  <link rel="alternate" href="https://storopoli.io/tags/bayesian/" />
  <link rel="self" href="https://storopoli.io/tags/bayesian/index.xml" />
  <subtitle>Recent content in Bayesian on Jose Storopoli, PhD</subtitle>
  <id>https://storopoli.io/tags/bayesian/</id>
  <generator uri="http://gohugo.io" version="0.127.0">Hugo</generator>
  <language>en-us</language>
  <updated>2023-12-04T17:43:03-03:00</updated>
  <author>
    <name>Jose Storopoli</name>
    
  </author>
  <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights>
      <entry>
        <title>Testing Bayesian Models with Nix and GitHub Actions</title>
        <link rel="alternate" href="https://storopoli.io/2023-12-04-bayesian_models_ci/" />
        <id>https://storopoli.io/2023-12-04-bayesian_models_ci/</id>
        <published>2023-12-04T17:43:03-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">I have an open access and open source1 graduate-level course on Bayesian statistics. It is available in GitHub through the repo storopoli/Bayesian-Statistics. I&amp;rsquo;ve taught it many times and every time was such a joy. It is composed of:
a set of 300+ slides2 covering the theoretical part Stan3 models Turing.jl4 models Now and then I receive emails from someone saying that the materials helped them to understand Bayesian statistics. These kind messages really make my day, and that&amp;rsquo;s why I strive to keep the content up-to-date and relevant.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="bayesian-models-go-brrrrr.png#center" alt="bayesian-models-go-brrrrr"  />
</p>
<p>I have an open access and open source<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> graduate-level course on Bayesian statistics.
It is available in GitHub through the repo <a href="https://github.com/storopoli/Bayesian-Statistics"><code>storopoli/Bayesian-Statistics</code></a>.
I&rsquo;ve taught it many times and every time was such a joy.
It is composed of:</p>
<ul>
<li>a set of 300+ slides<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> covering the theoretical part</li>
<li><a href="https://mc-stan.org">Stan</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> models</li>
<li><a href="https://turinglang.org">Turing.jl</a><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> models</li>
</ul>
<p>Now and then I receive emails from someone saying that the materials helped
them to understand Bayesian statistics.
These kind messages really make my day, and that&rsquo;s why I strive to keep
the content up-to-date and relevant.</p>
<p>I decided to make the repository fully reproducible and testable in CI<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> using
<a href="https://nixos.org">Nix</a>
and <a href="https://docs.github.com/en/actions">GitHub actions</a>.</p>
<p>Here&rsquo;s what I am testing on every new change to the main repository
and every new pull request (PR):</p>
<ol>
<li><strong>slides in LaTeX</strong> are built and released as PDF in CI</li>
<li><strong>typos</strong> in content and code are tested</li>
<li><strong>Turing.jl models</strong> are run and tested in CI using the latest version of Julia,
Turing.jl and dependencies</li>
<li><strong>Stan models</strong> are run and test in CI using the latest version of Stan</li>
</ol>
<h2 id="nix">Nix</h2>
<p>All of these tests demand a highly reproducible and intricate development
environment.
That&rsquo;s where <a href="https://nixos.org">Nix</a> comes in.
Nix can be viewed as a package manager, operating system, build tool,
immutable system, and many things.</p>
<p>Nix is purely functional.
Everything is described as an expression/function,
taking some inputs and producing deterministic outputs.
This guarantees reproducible results and makes caching everything easy.
Nix expressions are lazy. Anything described in Nix code will only be executed
if some other expression needs its results.
This is very powerful but somewhat unnatural for developers not familiar
with functional programming.</p>
<p>I enjoy Nix so much that I use it as the operating system and package manager in
all of my computers.
Feel free to check my setup at
<a href="https://github.com/storopoli/flakes"><code>storopoli/flakes</code></a>.</p>
<p>The main essence of the repository setup is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/flake.nix"><code>flake.nix</code> file</a>.
A Flake is a collection of recipes (Nix derivations) that the repository
provides.
From the <a href="https://nixos.wiki/wiki/Flakes">NixOS Wiki article on Flakes</a>:</p>
<blockquote>
<p>Flakes is a feature of managing Nix packages to simplify usability and improve
reproducibility of Nix installations.
Flakes manages dependencies between Nix expressions,
which are the primary protocols for specifying packages.
Flakes implements these protocols in a consistent schema with a common set
of policies for managing packages.</p>
</blockquote>
<p>I use the Nix&rsquo;s Flakes to not only setup the main repository package,
defined in the Flake as just <code>package.default</code>
which is the PDF build of the LaTeX slides,
but also to setup the development environment,
defined in the Flake as the <code>devShell.default</code>,
to run the latest versions of
Stan and Julia/Turing.jl.</p>
<p>We&rsquo;ll go over the Flake file in detail.
However, let me show the full Flake file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;A basic flake with a shell&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">flake-utils</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:numtide/flake-utils&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:cachix/pre-commit-hooks.nix&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">flake-utils</span><span class="o">,</span> <span class="n">pre-commit-hooks</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flake-utils</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">eachDefaultSystem</span> <span class="p">(</span><span class="n">system</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">let</span>
</span></span><span class="line"><span class="cl">        <span class="n">pkgs</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">legacyPackages</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">tex</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="o">.</span><span class="n">combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">scheme-small</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">latexmk</span> <span class="n">pgf</span> <span class="n">pgfplots</span> <span class="n">tikzsymbols</span> <span class="n">biblatex</span> <span class="n">beamer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">silence</span> <span class="n">appendixnumberbeamer</span> <span class="n">fira</span> <span class="n">fontaxes</span> <span class="n">mwe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">noto</span> <span class="n">csquotes</span> <span class="n">babel</span> <span class="n">helvetic</span> <span class="n">transparent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">xpatch</span> <span class="n">hyphenat</span> <span class="n">wasysym</span> <span class="n">algorithm2e</span> <span class="n">listings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">lstbayes</span> <span class="n">ulem</span> <span class="n">subfigure</span> <span class="n">ifoddpage</span> <span class="n">relsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">adjustbox</span> <span class="n">media9</span> <span class="n">ocgx2</span> <span class="n">biblatex-apa</span> <span class="n">wasy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">julia</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">julia-bin</span><span class="o">.</span><span class="n">overrideDerivation</span> <span class="p">(</span><span class="n">oldAttrs</span><span class="p">:</span> <span class="p">{</span> <span class="n">doInstallCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">in</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">checks</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">pre-commit-check</span> <span class="o">=</span> <span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">src</span> <span class="o">=</span> <span class="sr">./.</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">typos</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">};</span>
</span></span><span class="line"><span class="cl">          <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">            <span class="n">bashInteractive</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># pdfpc # FIXME: broken on darwin</span>
</span></span><span class="line"><span class="cl">            <span class="n">typos</span>
</span></span><span class="line"><span class="cl">            <span class="n">cmdstan</span>
</span></span><span class="line"><span class="cl">            <span class="n">julia</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export JULIA_NUM_THREADS=&#34;auto&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export JULIA_PROJECT=&#34;turing&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export CMDSTAN_HOME=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">cmdstan</span><span class="si">}</span><span class="s1">/opt/cmdstan&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            </span><span class="si">${</span><span class="n">self</span><span class="o">.</span><span class="n">checks</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="o">.</span><span class="n">pre-commit-check</span><span class="o">.</span><span class="n">shellHook</span><span class="si">}</span><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">packages</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">stdenvNoCC</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;slides&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">src</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">coreutils</span>
</span></span><span class="line"><span class="cl">            <span class="n">tex</span>
</span></span><span class="line"><span class="cl">            <span class="n">gnuplot</span>
</span></span><span class="line"><span class="cl">            <span class="n">biber</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">phases</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;unpackPhase&#34;</span> <span class="s2">&#34;buildPhase&#34;</span> <span class="s2">&#34;installPhase&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">buildPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export PATH=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">makeBinPath</span> <span class="n">buildInputs</span><span class="si">}</span><span class="s1">&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            cd slides
</span></span></span><span class="line"><span class="cl"><span class="s1">            export HOME=$(pwd)
</span></span></span><span class="line"><span class="cl"><span class="s1">            latexmk -pdflatex -shell-escape slides.tex
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">installPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            mkdir -p $out
</span></span></span><span class="line"><span class="cl"><span class="s1">            cp slides.pdf $out/
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A flake is composed primarily of <code>inputs</code> and <code>outputs</code>.
As <code>inputs</code> I have:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">flake-utils</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:numtide/flake-utils&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:cachix/pre-commit-hooks.nix&#34;</span><span class="p">;</span>
</span></span></code></pre></div><ul>
<li><a href="https://github.com/NixOS/nixpkgs"><strong><code>nixpkgs</code></strong></a>
is responsible for providing all of the packages necessary for both
<code>package.default</code> and <code>devShell.default</code>: <code>cmdstan</code>, <code>julia-bin</code>, <code>typos</code>,
and a bunch of <code>texlive</code> LaTeX small packages.</li>
<li><a href="https://github.com/numtide/flake-utils"><strong><code>flake-utils</code></strong></a>
are a bunch of Nix utility functions that creates tons of
syntactic sugar to make the Flake easily accessible in all platforms,
such as macOS and Linux.</li>
<li><a href="https://github.com/cachix/pre-commit-hooks.nix"><strong><code>pre-commit-hooks</code></strong></a>
is a nice Nix utility to create easy
<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hooks</a>
that do some checking at several steps of the git workflow.
The only hook that I am using is the <a href="https://github.com/crate-ci/typos"><code>typos</code></a>
pre-commit hook that checks the whole commit changes for common typos and won&rsquo;t
let you commit successfully if you have typos:
either correct or whitelist them in the <code>_typos.toml</code> file.</li>
</ul>
<p>The <code>outputs</code> are the bulk of the Flake file and it is a Nix function that
takes all the above as inputs and outputs a couple of things:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">outputs</span> <span class="err">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">flake-utils</span><span class="o">,</span> <span class="n">pre-commit-hooks</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flake-utils</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">eachDefaultSystem</span> <span class="p">(</span><span class="n">system</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">checks</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">devShells</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">packages</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="p">});</span>
</span></span></code></pre></div><ul>
<li><code>checks</code> things that are executed/built when you run <code>nix flake check</code></li>
<li><code>devShells</code> things that are executed/built when you run <code>nix develop</code></li>
<li><code>packages</code> things that are executed/built when you run <code>nix build</code></li>
</ul>
<p>Let&rsquo;s go over each one of the outputs that the repository Flake has.</p>
<h3 id="packages----latex-slides"><code>packages</code> &ndash; LaTeX slides</h3>
<p>We all know that LaTeX is a pain to make it work.
If it builds in my machine definitely won&rsquo;t build in yours.
This is solved effortlessly in Nix.
Take a look at the <code>tex</code> variable definition in the <code>let ... in</code> block:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="n">tex</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="o">.</span><span class="n">combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">scheme-small</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">latexmk</span> <span class="n">pgf</span> <span class="n">pgfplots</span> <span class="n">tikzsymbols</span> <span class="n">biblatex</span> <span class="n">beamer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">silence</span> <span class="n">appendixnumberbeamer</span> <span class="n">fira</span> <span class="n">fontaxes</span> <span class="n">mwe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">noto</span> <span class="n">csquotes</span> <span class="n">babel</span> <span class="n">helvetic</span> <span class="n">transparent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">xpatch</span> <span class="n">hyphenat</span> <span class="n">wasysym</span> <span class="n">algorithm2e</span> <span class="n">listings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">lstbayes</span> <span class="n">ulem</span> <span class="n">subfigure</span> <span class="n">ifoddpage</span> <span class="n">relsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">adjustbox</span> <span class="n">media9</span> <span class="n">ocgx2</span> <span class="n">biblatex-apa</span> <span class="n">wasy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span>
</span></span></code></pre></div><p><code>tex</code> is a custom instantiation of the <code>texlive.combine</code> derivation with some
overrides to specify which CTAN packages you need to build the slides.
We use <code>tex</code> in the <code>packages.default</code> Flake <code>output</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">packages</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">stdenvNoCC</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;slides&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">src</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">coreutils</span>
</span></span><span class="line"><span class="cl">    <span class="n">tex</span>
</span></span><span class="line"><span class="cl">    <span class="n">gnuplot</span>
</span></span><span class="line"><span class="cl">    <span class="n">biber</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">phases</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;unpackPhase&#34;</span> <span class="s2">&#34;buildPhase&#34;</span> <span class="s2">&#34;installPhase&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    export PATH=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">makeBinPath</span> <span class="n">buildInputs</span><span class="si">}</span><span class="s1">&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">    cd slides
</span></span></span><span class="line"><span class="cl"><span class="s1">    export HOME=$(pwd)
</span></span></span><span class="line"><span class="cl"><span class="s1">    latexmk -pdflatex -shell-escape slides.tex
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">installPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    mkdir -p $out
</span></span></span><span class="line"><span class="cl"><span class="s1">    cp slides.pdf $out/
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Here we are declaring a Nix derivation with the <code>stdenvNoCC.mkDerivation</code>,
the <code>NoCC</code> part means that we don&rsquo;t need C/C++ build tools.
The <code>src</code> is the Flake repository itself and I also specify the dependencies
in <code>buildInputs</code>: I still need some fancy stuff to build my slides.
Finally, I specify the several <code>phases</code> of the derivation.
The most important part is that I <code>cd</code> into the <code>slides/</code> directory
and run <code>latexmk</code> in it, and copy the resulting PDF to the <code>$out</code> Nix
special directory which serves as the output directory for the derivation.</p>
<p>This is really nice because anyone with Nix installed can run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nix build github:storopoli/Bayesian-Statistics
</span></span></code></pre></div><p>and bingo! You have my slides as PDF built from LaTeX files without having to
clone or download the repository.
Fully reproducible in any machine or architecture.</p>
<p>The next step is to configure GitHub actions to run Nix and build the slides'
PDF file in CI.
I have two workflows for that and they are almost identical except for the
last step.
The first one is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/build-slides.yml"><code>build-slides.yml</code></a>,
which, of course, builds the slides.
These are the relevant parts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Slides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Nix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">DeterminateSystems/nix-installer-action@v8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Slides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">nix build -L</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Copy result out of nix store</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">cp -v result/slides.pdf slides.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload Artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./slides.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">if-no-files-found</span><span class="p">:</span><span class="w"> </span><span class="l">error</span><span class="w">
</span></span></span></code></pre></div><p>Here we use a set of actions to:</p>
<ol>
<li>install Nix</li>
<li>build the slides&rsquo; PDF file using <code>nix build</code>
(the <code>-L</code> flag is to have more verbose logs)</li>
<li>upload the built slides&rsquo; PDF file as an artifact of the CI run.
This is useful for inspection and debugging.
There is also the caveat that if the PDF file is not found the whole workflow
should error.</li>
</ol>
<p>The last one is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/release-slides.yml"><code>release-slides.yml</code></a>,
which releases the slides when I publish a new tag.
It is almost the same as <code>build-slides.yml</code>, thus I will only highlight the
relevant bits:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">ncipollo/release-action@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">artifacts</span><span class="p">:</span><span class="w"> </span><span class="l">./slides.pdf</span><span class="w">
</span></span></span></code></pre></div><p>The only change is the final step that we now use a <code>release-action</code>
that automatically publishes a release with the slides&rsquo; PDF file as one of the
release artifacts.
This is good since, once I achieve a milestone in the slides,
I can easily tag a new version and have GitHub automatically publish a new
release with the resulting PDF file attached in the release.</p>
<p>This is a very good workflow, both in GitHub but also locally.
I don&rsquo;t need to install tons of gigabytes of texlive stuff to build my slides
locally.
I just run <code>nix build</code>.
Also, if someones contributes to the slides I don&rsquo;t need to check the correctness
of the LaTeX code, only the content and the output PDF artifact in the
resulting CI from the PR.
If it&rsquo;s all good, just thank the blessed soul and merge it!</p>
<h3 id="turingjl-models">Turing.jl Models</h3>
<p>The repository has a directory called <code>turing/</code> which is a Julia project with
<code>.jl</code> files and a <code>Project.toml</code> that lists the Julia dependencies and
appropriate <code>compat</code> bounds.
In order to test the Turing.jl models in the Julia files,
I have the following things in the Nix Flake <code>devShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="n">julia</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">julia-bin</span><span class="o">.</span><span class="n">overrideDerivation</span> <span class="p">(</span><span class="n">oldAttrs</span><span class="p">:</span> <span class="p">{</span> <span class="n">doInstallCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">julia</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">    export JULIA_NUM_THREADS=&#34;auto&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    export JULIA_PROJECT=&#34;turing&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Nix <code>devShell</code> lets you create a development environment by adding a
transparent layer on top of your standard shell environment with additional
packages, hooks, and environment variables.
First, in the <code>let ... in</code> block, I am defining a variable called <code>julia</code>
that is the <code>julia-bin</code> package with an attribute <code>doInstallCheck</code>
being overridden to <code>false</code>.
I don&rsquo;t want the Nix derivation of the <code>mkShell</code> to run all Julia standard tests.
Next, I define some environment variables in the <code>shellHook</code>,
which, as the name implies, runs every time that I instantiate the default
<code>devShell</code> with <code>nix develop</code>.</p>
<p>With the Nix Flake part covered, let&rsquo;s check how we wrap everything in a
GitHub action workflow file named
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/models.yml"><code>models.yml</code></a>.
Again, I will only highlight the relevant parts for the Turing.jl model testing
CI job:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-turing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test Turing Models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matrix</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">jl-file</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s2">&#34;01-predictive_checks.jl&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s2">&#34;13-model_comparison-roaches.jl&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test ${{ matrix.jl-file }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;julia -e &#39;using Pkg; Pkg.instantiate()&#39;&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;julia turing/${{ matrix.jl-file }}&#34;</span><span class="w">          
</span></span></span></code></pre></div><p>I list all the Turing.jl model Julia files in a <code>matrix.jl-file</code> list
to
<a href="https://docs.github.com/actions/using-jobs/using-a-matrix-for-your-jobs">define variations for each job</a>.
Next, we install the latest Julia version.
Finally, we run everything in parallel using the YAML string interpolation
<code>${{ matrix.jl-file }}</code>.
This expands the expression into <code>N</code> parallel jobs,
where <code>N</code> is the <code>jl-file</code> list length.</p>
<p>If any of these parallel jobs error out, then the whole workflow will error.
Hence, we are always certain that the models are up-to-date with the latest Julia
version in <code>nixpkgs</code>, and the latest Turing.jl dependencies.</p>
<h3 id="stan-models">Stan Models</h3>
<p>The repository has a directory called <code>stan/</code> that holds a bunch of Stan models
in <code>.stan</code> files.
These models can be used with any Stan interface,
such as
<a href="https://mc-stan.org/rstan"><code>RStan</code></a>/<a href="https://mc-stan.org/cmdstanr"><code>CmdStanR</code></a>,
<a href="https://pystan.readthedocs.org/en/latest/"><code>PyStan</code></a>/<a href="https://mc-stan.org/cmdstanpy"><code>CmdStanPy</code></a>,
or <a href="https://github.com/goedman/Stan.jl"><code>Stan.jl</code></a>.
However I am using <a href="https://mc-stan.org/docs/cmdstan-guide/index.html"><code>CmdStan</code></a>
which only needs a shell environment and Stan, no additional dependencies
like Python, R, or Julia.
Additionally, <code>nixpkgs</code> has a
<a href="https://search.nixos.org/packages?query=cmdstan"><code>cmdstan</code></a>
package that is well-maintained and up-to-date with the latest Stan release.</p>
<p>In order to test the Stan models,
I have the following setup in the Nix Flake <code>devShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmdstan</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">    export CMDSTAN_HOME=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">cmdstan</span><span class="si">}</span><span class="s1">/opt/cmdstan&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Here I am also defining an environment variable in the <code>shellHook</code>,
<code>CMDSTAN_HOME</code> because that is useful for local development.</p>
<p>In the same GitHub action workflow
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/models.yml"><code>models.yml</code></a>
file is defined the Stan model testing CI job:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-stan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test Stan Models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matrix</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">stan</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">model</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;01-predictive_checks-posterior&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;coin_flip.data.json&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">model</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;13-model_comparison-zero_inflated-poisson&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;roaches.data.json&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test ${{ matrix.stan.model }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo &#34;Compiling: ${{ matrix.stan.model }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;stan stan/${{ matrix.stan.model }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;stan/${{ matrix.stan.model }} sample data file=stan/${{ matrix.stan.data }}&#34;</span><span class="w">          
</span></span></span></code></pre></div><p>Now I am using a YAML dictionary as the entry for every element in the <code>stan</code>
YAML list with two keys: <code>model</code> and <code>data</code>.
<code>model</code> lists the Stan model file without the <code>.stan</code> extension,
and <code>data</code> lists the JSON data file that the model needs to run.
We&rsquo;ll use both to run parallel jobs to test all the Stan models listed in the
<code>stan</code> list.
For that we use the following commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">nix</span> <span class="n">develop</span> <span class="err">-</span><span class="n">L</span> <span class="o">.</span> <span class="err">--</span><span class="n">command</span> <span class="n">bash</span> <span class="err">-</span><span class="n">c</span> <span class="s2">&#34;stan stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">model</span> <span class="p">}</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">nix</span> <span class="n">develop</span> <span class="err">-</span><span class="n">L</span> <span class="o">.</span> <span class="err">--</span><span class="n">command</span> <span class="n">bash</span> <span class="err">-</span><span class="n">c</span> <span class="s2">&#34;stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">model</span> <span class="p">}</span><span class="si">}</span><span class="s2"> sample data file=stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">data</span> <span class="p">}</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This instantiates the <code>devShell.default</code> shell environment,
and uses the <code>stan</code> binary provided by the <code>cmdstan</code> Nix package to compile the
model into an executable binary.
Next, we run this model executable binary in <code>sample</code> mode while also providing
the corresponding data file with <code>data file=</code>.</p>
<p>As before, if any of these parallel jobs error out, then the whole workflow will
error.
Hence, we are always certain that the models are up-to-date with the latest
Stan/CmdStan version in <code>nixpkgs</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I am quite happy with this setup.
It makes easy to run test in CI with GitHub Actions,
while also being effortless to instantiate a development environment with Nix.
If I want to get a new computer up and running, I don&rsquo;t need to install a bunch
of packages and go over &ldquo;getting started&rdquo; instructions to have all the necessary
dependencies.</p>
<p>This setup also helps onboard new contributors since it is:</p>
<ol>
<li>easy to setup the dependencies necessary to develop and test</li>
<li>trivial to check if contributions won&rsquo;t break anything</li>
</ol>
<p>Speaking of &ldquo;contributors&rdquo;, if you are interested in Bayesian modeling,
feel free to go over the contents of the repository
<a href="https://github.com/storopoli/Bayesian-Statistics"><code>storopoli/Bayesian-Statistics</code></a>.
<strong>Contributions are most welcomed</strong>.
Don&rsquo;t hesitate on opening an issue or pull request.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>the code is MIT-licensed and the content is CreativeCommons
Non-Commercial 4.0&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I am also planning to go over the slides for every lecture
in a YouTube playlist in the near future.
This would make it the experience complete: slides, lectures, and code.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>a probabilistic programming language and suite of MCMC samplers written in C++.
It is today&rsquo;s gold standard in Bayesian stats.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>is an ecosystem of Julia packages for Bayesian inference using probabilistic
programming.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>CI stands for <strong>c</strong>ontinuous <strong>i</strong>ntegration,
sometimes also known as CI/CD, <strong>c</strong>ontinuous <strong>i</strong>ntegration and <strong>c</strong>ontinuous
<strong>d</strong>elivery.
<a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a> is a wide &ldquo;umbrella&rdquo; term
for &ldquo;everything that is tested in all parts of the development cicle&rdquo;,
and these tests commonly take place in a cloud machine.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Lindley&#39;s Paradox, or The consistency of Bayesian Thinking</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-23-lindley_paradox/" />
        <id>https://storopoli.io/2023-11-23-lindley_paradox/</id>
        <published>2023-11-22T07:06:59-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">Warning: This post has KaTeX enabled, so if you want to view the rendered math formulas, you&amp;rsquo;ll have to unfortunately enable JavaScript.
Dennis Lindley, one of my many heroes, was an English statistician, decision theorist and leading advocate of Bayesian statistics. He published a pivotal book, Understanding Uncertainty, that changed my view on what is and how to handle uncertainty in a coherent1 way. He is responsible for one of my favorites quotes: &amp;ldquo;Inside every non-Bayesian there is a Bayesian struggling to get out&amp;rdquo;; and one of my favorite heuristics around prior probabilities: Cromwell&amp;rsquo;s Rule2.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="lindley.jpg#center" alt="Dennis Lindley"  />
</p>
<blockquote>
<p>Warning: This post has <a href="https://katex.org/">KaTeX</a> enabled,
so if you want to view the rendered math formulas,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Dennis_Lindley">Dennis Lindley</a>,
one of my many heroes,
was an English statistician,
decision theorist and leading advocate of Bayesian statistics.
He published a pivotal book,
<a href="https://onlinelibrary.wiley.com/doi/book/10.1002/9781118650158">Understanding Uncertainty</a>,
that changed my view on what is and how to handle uncertainty in a
coherent<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> way.
He is responsible for one of my favorites quotes:
&ldquo;Inside every non-Bayesian there is a Bayesian struggling to get out&rdquo;;
and one of my favorite heuristics around prior probabilities:
<a href="https://en.wikipedia.org/wiki/Cromwell%27s_rule">Cromwell&rsquo;s Rule</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.
Lindley predicted in 1975 that &ldquo;Bayesian methods will indeed become pervasive,
enabled by the development of powerful computing facilities&rdquo; (Lindley, 1975).
You can find more about all of Lindley&rsquo;s achievements in his <a href="https://www.theguardian.com/science/2014/mar/16/dennis-lindley">obituary</a>.</p>
<h2 id="lindleys-paradox">Lindley&rsquo;s Paradox</h2>
<p>Lindley&rsquo;s paradox<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> is a counterintuitive situation in statistics
in which the Bayesian and frequentist approaches to a hypothesis testing problem
give different results for certain choices of the prior distribution.</p>
<p>More formally, the paradox is as follows.
We have some parameter $\theta$ that we are interested in.
Then, we proceed with an experiment to test two competing hypotheses:</p>
<ol>
<li>$H_0$ (also known as <em>null hypothesis</em>):
there is no &ldquo;effect&rdquo;, or, more specifically,
$\theta = 0$.</li>
<li>$H_a$ (also known as <em>alternative hypothesis</em>):
there is an &ldquo;effect&rdquo;, or, more specifically,
$\theta \ne 0$.</li>
</ol>
<p>The paradox occurs when two conditions are met:</p>
<ol>
<li>The result of the experiment is <em>significant</em> by a frequentist test of $H_0$,
which indicates sufficient evidence to reject $H_0$, at a certain threshold of
probability<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</li>
<li>The posterior probability (Bayesian approach) of $H_0 \mid \theta$
(null hypothesis given $\theta$) is high,
which indicates strong evidence that $H_0$ should be favored over $H_a$,
that is, to <em>not</em> reject $H_0$.</li>
</ol>
<p>These results can occur at the same time when $H_0$ is very specific,
$H_a$ more diffuse,
and the prior distribution does not strongly favor one or the other.
These conditions are pervasive across science
and common in traditional null-hypothesis significance testing approaches.</p>
<p>This is a duel of frequentist versus Bayesian approaches,
and one of the many in which Bayesian emerges as the most coherent.
Let&rsquo;s give a example and go over the analytical result with a ton of math,
but also a computational result with <a href="https://julialang.org">Julia</a>.</p>
<h2 id="example">Example</h2>
<p>Here&rsquo;s the setup for the example.
In a certain city 49,581 boys and 48,870 girls have been
born over a certain time period.
The observed proportion of male births is thus
$\frac{49,581}{98,451} \approx 0.5036$.</p>
<p>We assume that the birth of a child is independent with a certain probability
$\theta$.
Since our data is a sequence of $n$ independent <a href="https://en.wikipedia.org/wiki/Bernoulli_trial">Bernoulli trials</a>,
i.e., $n$ independent random experiments with exactly two possible outcomes:
&ldquo;success&rdquo; and &ldquo;failure&rdquo;,
in which the probability of success is the same every time the
experiment is conducted.
We can safely assume that it follows a <a href="https://en.wikipedia.org/wiki/Binomial_distribution">binomial distribution</a>
with parameters:</p>
<ul>
<li>$n$: the number of &ldquo;trials&rdquo; (or the total number of births).</li>
<li>$\theta$: the probability of male births.</li>
</ul>
<p>We then set up our two competing hypotheses:</p>
<ol>
<li>$H_0$: $\theta = 0.5$.</li>
<li>$H_a$: $\theta \ne 0.5$.</li>
</ol>
<h3 id="analytical-solution">Analytical Solution</h3>
<p>This is a toy-problem and, like most toy problems,
we can solve it analytically<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> for both the frequentist and the Bayesian approaches.</p>
<h4 id="analytical-solutions----frequentist-approach">Analytical Solutions &ndash; Frequentist Approach</h4>
<p>The frequentist approach to testing $H_0$ is to compute a $p$-value<sup id="fnref1:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>,
the probability of observing births of boys at least as large as 49,581
assuming $H_0$ is true.
Because the number of births is very large,
we can use a normal approximation<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> for the
binomial-distributed number of male births.
Let&rsquo;s define $X$ as the total number of male births,
then $X$ follows a normal distribution:</p>
<p>$$X \sim \text{Normal}(\mu, \sigma)$$</p>
<p>where $\mu$ is the mean parameter,
$n \theta$ in our case,
and $\sigma$ is the standard deviation parameter,
$\sqrt{n \theta (1 - \theta)}$.
We need to calculate the conditional probability of
$X \geq \frac{49,581}{98,451} \approx 0.5036$
given $\mu = n \theta = 98,451 \cdot \frac{1}{2} = 49,225.5$
and
$\sigma = \sqrt{n \theta (1 - \theta)} = \sqrt{98,451 \cdot \frac{1}{2} \cdot (1 - \frac{1}{2})}$:</p>
<p>$$P(X \ge 0.5036 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75})$$</p>
<p>This is basically a
<a href="https://en.wikipedia.org/wiki/Cumulative_distribution_function">cumulative distribution function (CDF)</a>
of $X$ on the interval $[49,225.5, 98,451]$:</p>
<p>$$\int_{49,225.5}^{98,451} \frac{1}{\sqrt{2 \pi \sigma^2}} e^{- \frac{\left( \frac{x - \mu}{\sigma} \right)^2}{2}} dx$$</p>
<p>After inserting the values and doing some arithmetic,
our answer is approximately $0.0117$.
Note that this is a one-sided test,
since it is symmetrical,
the two-sided test would be
$0.0117 \cdot 2 = 0.0235$.
Since we don&rsquo;t deviate from the Fisher&rsquo;s canon,
this is well below the 5% threshold.
Hooray! We rejected the null hypothesis!
Quick! Grab a frequentist celebratory cigar!
But, wait. Let&rsquo;s check the Bayesian approach.</p>
<h4 id="analytical-solutions----bayesian-approach">Analytical Solutions &ndash; Bayesian Approach</h4>
<p>For the Bayesian approach, we need to set prior probabilities on both hypotheses.
Since we do not favor one from another, let&rsquo;s set equal prior probabilities:</p>
<p>$$P(H_0) = P(H_a) = \frac{1}{2}$$</p>
<p>Additionally, all parameters of interest need a prior distribution.
So, let&rsquo;s put a prior distribution on $\theta$.
We could be fancy here, but let&rsquo;s not.
We&rsquo;ll use a uniform distribution on $[0, 1]$.</p>
<p>We have everything we need to compute the posterior probability of $H_0$ given
$\theta$.
For this, we&rsquo;ll use <a href="https://en.wikipedia.org/wiki/Bayes%27_theorem">Bayes theorem</a><sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>:</p>
<p>$$P(A \mid B) = \frac{P(B \mid A) P(A)}{P(B)}$$</p>
<p>Now again let&rsquo;s plug in all the values:</p>
<p>$$P(H_0 \mid \theta) = \frac{P(\theta \mid H_0) P(H_0)}{P(\theta)}$$</p>
<p>Note that by the <a href="https://en.wikipedia.org/wiki/Probability_axioms">axioms of probability</a>
and by the <a href="https://en.wikipedia.org/wiki/Chain_rule_(probability)">product rule of probability</a>
we can decompose $P(\theta)$ into:</p>
<p>$$P(\theta) = P(\theta \mid H_0) P(H_0) + P(\theta \mid H_a) P(H_a)$$</p>
<p>Again, we&rsquo;ll use the normal approximation:</p>
<p>$$
\begin{aligned}
&amp;P \left( \theta = 0.5 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75} \right) \\
&amp;= \frac{
\frac{1}{\sqrt{2 \pi \sigma^2}} e^{- \left( \frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5
}
{
\frac{1}{\sqrt{2 \pi \sigma^2}} e^{ \left( -\frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5 +
\int_0^1 \frac {1}{\sqrt{2 \pi \sigma^2} } e^{- \left( \frac{\mu - \mu \cdot \theta)}{2 \sigma} \right)^2}d \theta \cdot 0.5
} \\
&amp;= 0.9505
\end{aligned}
$$</p>
<p>The likelihood of the alternative hypothesis,
$P(\theta \mid H_a)$,
is just the CDF of all possible values of $\theta \ne 0.5$.</p>
<p>$$P(H_0 \mid \text{data}) = P \left( \theta = 0.5 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75} \right) &gt; 0.95$$</p>
<p>And we fail to reject the null hypothesis, in frequentist terms.
However, we can also say in Bayesian terms, that we strongly favor $H_0$
over $H_a$.</p>
<p>Quick! Grab the Bayesian celebratory cigar!
The null is back on the game!</p>
<h3 id="computational-solutional">Computational Solutional</h3>
<p>For the computational solution, we&rsquo;ll use <a href="https://julialang.org">Julia</a>
and the following packages:</p>
<ul>
<li><a href="https://github.com/JuliaStats/HypothesisTests.jl"><code>HypothesisTest.jl</code></a></li>
<li><a href="https://turinglang.org/"><code>Turing.jl</code></a></li>
</ul>
<h4 id="computational-solutions----frequentist-approach">Computational Solutions &ndash; Frequentist Approach</h4>
<p>We can perform a <a href="https://juliastats.org/HypothesisTests.jl/stable/nonparametric/#Binomial-test"><code>BinomialTest</code></a>
with <code>HypothesisTest.jl</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">using</span> <span class="n">HypothesisTests</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">BinomialTest</span><span class="p">(</span><span class="mi">49_225</span><span class="p">,</span> <span class="mi">98_451</span><span class="p">,</span> <span class="mf">0.5036</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Binomial</span> <span class="n">test</span>
</span></span><span class="line"><span class="cl"><span class="o">-------------</span>
</span></span><span class="line"><span class="cl"><span class="n">Population</span> <span class="n">details</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">parameter</span> <span class="n">of</span> <span class="n">interest</span><span class="o">:</span>   <span class="n">Probability</span> <span class="n">of</span> <span class="n">success</span>
</span></span><span class="line"><span class="cl">    <span class="n">value</span> <span class="n">under</span> <span class="n">h_0</span><span class="o">:</span>         <span class="mf">0.5036</span>
</span></span><span class="line"><span class="cl">    <span class="n">point</span> <span class="n">estimate</span><span class="o">:</span>          <span class="mf">0.499995</span>
</span></span><span class="line"><span class="cl">    <span class="mi">95</span><span class="o">%</span> <span class="n">confidence</span> <span class="n">interval</span><span class="o">:</span> <span class="p">(</span><span class="mf">0.4969</span><span class="p">,</span> <span class="mf">0.5031</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Test</span> <span class="n">summary</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">outcome</span> <span class="n">with</span> <span class="mi">95</span><span class="o">%</span> <span class="n">confidence</span><span class="o">:</span> <span class="n">reject</span> <span class="n">h_0</span>
</span></span><span class="line"><span class="cl">    <span class="n">two</span><span class="o">-</span><span class="n">sided</span> <span class="n">p</span><span class="o">-</span><span class="n">value</span><span class="o">:</span>           <span class="mf">0.0239</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Details</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">number</span> <span class="n">of</span> <span class="n">observations</span><span class="o">:</span> <span class="mi">98451</span>
</span></span><span class="line"><span class="cl">    <span class="n">number</span> <span class="n">of</span> <span class="n">successes</span><span class="o">:</span>    <span class="mi">49225</span>
</span></span></code></pre></div><p>This is the two-sided test,
and I had to round $49,225.5$ to $49,225$
since <code>BinomialTest</code> do not support real numbers.
But the results match with the analytical solution,
we still reject the null.</p>
<h4 id="computational-solutions----bayesian-approach">Computational Solutions &ndash; Bayesian Approach</h4>
<p>Now, for the Bayesian computational approach,
I&rsquo;m going to use a generative modeling approach,
and one of my favorites probabilistic programming languages,
<code>Turing.jl</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">using</span> <span class="n">Turing</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@model</span> <span class="k">function</span> <span class="n">birth_rate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">           <span class="n">θ</span> <span class="o">~</span> <span class="n">Uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="n">total_births</span> <span class="o">=</span> <span class="mi">98_451</span>
</span></span><span class="line"><span class="cl">           <span class="n">male_births</span> <span class="o">~</span> <span class="n">Binomial</span><span class="p">(</span><span class="n">total_births</span><span class="p">,</span> <span class="n">θ</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="k">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="n">birth_rate</span><span class="p">()</span> <span class="o">|</span> <span class="p">(;</span> <span class="n">male_births</span> <span class="o">=</span> <span class="mi">49_225</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">(</span><span class="mi">1_000</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">),</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="mi">1_000</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Chains</span> <span class="n">MCMC</span> <span class="n">chain</span> <span class="p">(</span><span class="mi">1000</span><span class="o">×</span><span class="mi">13</span><span class="o">×</span><span class="mi">4</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Float64</span><span class="p">,</span> <span class="mi">3</span><span class="p">})</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Iterations</span>        <span class="o">=</span> <span class="mi">1001</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">2000</span>
</span></span><span class="line"><span class="cl"><span class="kt">Number</span> <span class="n">of</span> <span class="n">chains</span>  <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="n">Samples</span> <span class="n">per</span> <span class="n">chain</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="n">Wall</span> <span class="n">duration</span>     <span class="o">=</span> <span class="mf">0.2</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">Compute</span> <span class="n">duration</span>  <span class="o">=</span> <span class="mf">0.19</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">parameters</span>        <span class="o">=</span> <span class="n">θ</span>
</span></span><span class="line"><span class="cl"><span class="n">internals</span>         <span class="o">=</span> <span class="n">lp</span><span class="p">,</span> <span class="n">n_steps</span><span class="p">,</span> <span class="n">is_accept</span><span class="p">,</span> <span class="n">acceptance_rate</span><span class="p">,</span> <span class="n">log_density</span><span class="p">,</span> <span class="n">hamiltonian_energy</span><span class="p">,</span> <span class="n">hamiltonian_energy_error</span><span class="p">,</span> <span class="n">max_hamiltonian_energy_error</span><span class="p">,</span> <span class="n">tree_depth</span><span class="p">,</span> <span class="n">numerical_error</span><span class="p">,</span> <span class="n">step_size</span><span class="p">,</span> <span class="n">nom_step_size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Summary</span> <span class="n">Statistics</span>
</span></span><span class="line"><span class="cl">  <span class="n">parameters</span>      <span class="n">mean</span>       <span class="n">std</span>      <span class="n">mcse</span>    <span class="n">ess_bulk</span>    <span class="n">ess_tail</span>      <span class="n">rhat</span>   <span class="n">ess_per_sec</span>
</span></span><span class="line"><span class="cl">      <span class="kt">Symbol</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>     <span class="kt">Float64</span>     <span class="kt">Float64</span>   <span class="kt">Float64</span>       <span class="kt">Float64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">θ</span>    <span class="mf">0.4999</span>    <span class="mf">0.0016</span>    <span class="mf">0.0000</span>   <span class="mf">1422.2028</span>   <span class="mf">2198.1987</span>    <span class="mf">1.0057</span>     <span class="mf">7368.9267</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Quantiles</span>
</span></span><span class="line"><span class="cl">  <span class="n">parameters</span>      <span class="mf">2.5</span><span class="o">%</span>     <span class="mf">25.0</span><span class="o">%</span>     <span class="mf">50.0</span><span class="o">%</span>     <span class="mf">75.0</span><span class="o">%</span>     <span class="mf">97.5</span><span class="o">%</span>
</span></span><span class="line"><span class="cl">      <span class="kt">Symbol</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">θ</span>    <span class="mf">0.4969</span>    <span class="mf">0.4988</span>    <span class="mf">0.4999</span>    <span class="mf">0.5011</span>    <span class="mf">0.5031</span>
</span></span></code></pre></div><p>We can see from the output of the quantiles that the 95% quantile for $\theta$ is
the interval $(0.4969, 0.5031)$.
Although it overlaps zero, that is not the equivalent of a hypothesis test.
For that, we&rsquo;ll use the
<a href="https://en.wikipedia.org/wiki/highest_posterior_density_interval">highest posterior density interval (HPDI)</a>,
which is defined as &ldquo;choosing the narrowest interval&rdquo; that
captures a certain posterior density threshold value.
In this case, we&rsquo;ll use a threshold interval of 95%,
i.e. an $\alpha = 0.05$:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">hpd</span><span class="p">(</span><span class="n">chain</span><span class="p">;</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.05</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">HPD</span>
</span></span><span class="line"><span class="cl">  <span class="n">parameters</span>     <span class="n">lower</span>     <span class="n">upper</span>
</span></span><span class="line"><span class="cl">      <span class="kt">Symbol</span>   <span class="kt">Float64</span>   <span class="kt">Float64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">θ</span>    <span class="mf">0.4970</span>    <span class="mf">0.5031</span>
</span></span></code></pre></div><p>We see that we fail to reject the null,
$\theta = 0.5$ at $\alpha = 0.05$ which is in accordance with the analytical
solution.</p>
<h2 id="why-the-frequentist-and-bayesian-approaches-disagree">Why the Frequentist and Bayesian Approaches Disagree</h2>
<p>Why do the approaches disagree?
What is going on under the hood?</p>
<p>The answer is disappointing<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>.
The main problem is that the frequentist approach only allows fixed significance
levels with respect to sample size.
Whereas the Bayesian approach is consistent and robust to sample size variations.</p>
<p>Taken to extreme, in some cases, due to huge sample sizes,
the $p$-value is pretty much a <em>proxy</em> for sample size
and have little to no utility on hypothesis testing.
This is known as $p$-hacking<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<h2 id="references">References</h2>
<p>Lindley, Dennis V. &ldquo;The future of statistics: A Bayesian 21st century&rdquo;.
<em>Advances in Applied Probability</em> 7 (1975): 106-115.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>as far as I know there&rsquo;s only one coherent approach to uncertainty,
and it is the Bayesian approach.
Otherwise, as de Finetti and Ramsey proposed,
you are susceptible to a <a href="https://en.wikipedia.org/wiki/Dutch_book">Dutch book</a>.
This is a topic for another blog post&hellip;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Cromwell&rsquo;s rule states that the use of prior probabilities of 1
(&ldquo;the event will definitely occur&rdquo;) or 0 (&ldquo;the event will definitely not occur&rdquo;)
should be avoided, except when applied to statements that are logically true or false.
Hence, anything that is not a math theorem should have priors in $(0,1)$.
The reference comes from <a href="https://en.wikipedia.org/wiki/Oliver_Cromwell">Oliver Cromwell</a>,
asking, very politely, for the Church of Scotland to consider that their prior probability
might be wrong.
This footnote also deserves a whole blog post&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://en.wikipedia.org/wiki/Stigler%27s_law_of_eponymy">Stigler&rsquo;s law of eponymy</a>
states that no scientific discovery is named after its original discoverer.
The paradox was already was discussed in <a href="https://en.wikipedia.org/wiki/Harold_Jeffreys">Harold Jeffreys</a>'
1939 textbook.
Also, fun fact, Stigler&rsquo;s is not the original creator of such law&hellip;
Now that&rsquo;s a self-referential paradox, and a broad version of the <a href="https://en.wikipedia.org/wiki/Halting_problem">Halting problem</a>,
which should earn its own footnote.
Nevertheless, we are getting into self-referential danger zone here with
footnotes&rsquo; of footnotes&rsquo; of footnotes&rsquo;&hellip;&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>this is called $p$-value and can be easily defined as
&ldquo;the probability of sampling data from a target population given that $H_0$
is true as the number of sampling procedures $\to \infty$&rdquo;.
Yes, it is not that intuitive, and it deserves not a blog post,
but a full curriculum to hammer it home.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>that is not true for most of the real-world problems.
For Bayesian approaches,
we need to run computational asymptotic exact approximations using a class
of methods called <a href="https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo">Markov chain Monte Carlo (MCMC)</a>.
Furthermore, for some nasty problems we need to use different set of methods
called <a href="https://en.wikipedia.org/wiki/Variational_Inference">variational inference (VI)</a>
or <a href="https://en.wikipedia.org/wiki/Approximate_Bayesian_computation">approximate Bayesian computation (ABC)</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>if you are curious about how this approximation works,
check the backup slides of my
<a href="https://github.com/storopoli/Bayesian-Statistics">open access and open source graduate course on Bayesian statistics</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Bayes&rsquo; theorem is officially called Bayes-Price-Laplace theorem.
Bayes was trying to disprove David Hume&rsquo;s argument that miracles did not exist
(How dare he?).
He used the probabilistic approach of trying to quantify the probability of a parameter
(god exists) given data (miracles happened).
He died without publishing any of his ideas.
His wife probably freaked out when she saw the huge pile of notes that he had
and called his buddy Richard Price to figure out what to do with it.
Price struck gold and immediately noticed the relevance of Bayes&rsquo; findings.
He read it aloud at the Royal Society.
Later, Pierre-Simon Laplace, unbeknownst to the work of Bayes,
used the same probabilistic approach to perform statistical inference using France&rsquo;s
first census data in the early-Napoleonic era.
Somehow we had the answer to statistical inference back then,
and we had to rediscover everything again in the late-20th century&hellip;&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>disappointing because most of
published scientific studies suffer from this flaw.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>and, like all footnotes here, it deserves its own blog post&hellip;&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>

</feed>


