<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>programming on Jose Storopoli, PhD</title>
    <link>https://storopoli.io/tags/programming/</link>
    <description>Recent content in programming on Jose Storopoli, PhD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Tue, 28 Nov 2023 18:19:36 -0300</lastBuildDate><atom:link href="https://storopoli.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zero-cost Abstractions</title>
      <link>https://storopoli.io/2023-11-28-zero_cost_abstractions/</link>
      <pubDate>Tue, 28 Nov 2023 18:19:36 -0300</pubDate>
      
      <guid>https://storopoli.io/2023-11-28-zero_cost_abstractions/</guid>
      <description>In programming language circles there&amp;rsquo;s a recently trend of discussing a concept called zero-cost abstractions: the ability to use higher-levels abstractions without suffering any loss of performance.
Zero-cost abstractions allows you to write performant code without having to give up a single drop of convenience and expressiveness:
You want for-loops? You can have it. Generics? Yeah, why not? Data structures? Sure, keep&amp;rsquo;em coming. Async operations? You bet ya! Multi-threading? Hell yes!</description>
      <content:encoded><![CDATA[<p>In programming language circles there&rsquo;s a recently trend of discussing a concept
called <strong>zero-cost abstractions</strong>:
the ability to use higher-levels abstractions without suffering any loss of performance.</p>
<p>Zero-cost abstractions allows you to write performant code without having to
give up a single drop of convenience and expressiveness:</p>
<p>You want for-loops?
<em>You can have it</em>.
Generics?
<em>Yeah, why not</em>?
Data structures?
<em>Sure, keep&rsquo;em coming</em>.
Async operations?
<em>You bet ya</em>!
Multi-threading?
<em>Hell yes</em>!</p>
<p>To put more formally,
I like <a href="https://stackoverflow.com/a/69178445">this definition from StackOverflow</a>:</p>
<blockquote>
<p>Zero Cost Abstractions means adding higher-level programming concepts, like generics,
collections and so on do not come with a run-time cost,
only compile time cost (the code will be slower to compile).
Any operation on zero-cost abstractions is as fast as you would write out
matching functionality by hand using lower-level programming concepts like
for loops, counters, ifs and using raw pointers.</p>
</blockquote>
<p>Here&rsquo;s an analogy:</p>
<blockquote>
<p>Imagine that you are going to buy a car.
The sales person offers you a fancy car praising how easy it is to drive it,
that you don&rsquo;t need to think about RPM, clutch and stick shift,
parking maneuver, fuel type, and other shenanigans.
You just turn it on and drive.
However, once you take a look at the car&rsquo;s data sheet, you are horrified.
The car is bad in every aspect except easy of use.
It has dreadful fuel consumption,
atrocious safety ratings,
disastrous handling, and so on&hellip;</p>
</blockquote>
<p>Believe me, you wouldn&rsquo;t want to own that car.</p>
<p>Metaphors aside, that&rsquo;s <strong>exactly what professional developers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and whole teams
choose to use every day: unacceptable inferior tools</strong>.
Tools that, not only don&rsquo;t have <strong>zero-cost abstractions</strong>,
rather don&rsquo;t allow you to even have non-zero-cost anything!</p>
<p>Let&rsquo;s do some Python bashing in the meantime.
I know that&rsquo;s easy to bash Python,
but that&rsquo;s not the point.
If Python wasn&rsquo;t used so widely in production,
I would definitely leave it alone.
Don&rsquo;t get me wrong, Python is the second-best language for everything<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="the-curious-case-of-the-python-boolean">The curious case of the Python boolean</h2>
<p><img loading="lazy" src="non-zero-cost-abstraction.png#center" alt="non-zero-cost-abstraction"  />
</p>
<p>I wish this meme was a joke, but it isn&rsquo;t.
A boolean is one of the simplest data type taking only two possible values:
true or false.
Just grab your nearest Python REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">getsizeof</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">getsizeof</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">28</span>
</span></span></code></pre></div><p>The function <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof"><code>sys.getsizeof</code></a>
returns the size of an object in bytes.
<strong>How the hell Python needs 28 bytes to represent something that needs at most 1 byte</strong><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>?
Imagine incurring a 28x penalty in memory size requirements for every boolean
that you use.
Now multiply this by every operation that your code is going to run in production
over time.
Again: <strong>unacceptable</strong>.</p>
<p>That&rsquo;s because all objects in Python,
in the sense that everything that you can instantiate,
i.e. everything that you can put on the left hand-side of the <code>=</code> assignment,
is a <a href="https://docs.python.org/3/c-api/structures.html#c.PyObject"><code>PyObject</code></a>:</p>
<blockquote>
<p>All Python objects ultimately share a small number of fields at the
beginning of the objectâ€™s representation in memory.
These are represented by the <code>PyObject</code> and <code>PyVarObject</code> types.</p>
</blockquote>
<p>Python is dynamically-typed, which means that you don&rsquo;t have primitives like
8-, 16-, 32-bit (un)signed integers and so on.
Everything is a huge mess allocated in the heap that must carry not only its value,
but also information about its type.</p>
<p>Most important, everything that is fast in Python is <em>not Python-based</em>.
Take a look at the image below,
I grabbed some popular Python libraries from GitHub,
namely <a href="https://github.com/numpy/numpy">NumPy</a> (linear algebra package)
and <a href="https://github.com/pytorch/pytorch">PyToch</a> (deep learning package),
and checked the
language codebase percentage.</p>
<p><img loading="lazy" src="python-my-ass.jpg#center" alt="python-my-ass"  />
</p>
<p>Surprise, they are <strong><em>not</em> Python libraries</strong>.
They are <strong>C/C++ codebases</strong>.
Even if Python is the main language used in these codebases<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>,
I still think that this is not the case due to the nature of the Python code:
<strong>all docstrings are written in Python</strong>.
If you have a very fast C function in your codebase that takes 50 lines of code,
followed by a Python wrapper function that calls it using 10 lines of code,
<em>but</em> with a docstring that is 50 lines of code;
you have a &ldquo;Python&rdquo;-majority codebase.</p>
<p>In a sense the most efficient Python programmer is a C/C++ programmer&hellip;</p>
<p>Here&rsquo;s <a href="https://julialang.org">Julia</a>, which is also dynamically-typed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Base</span><span class="o">.</span><span class="n">summarysize</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></div><p>And to your surprise,
Julia is coded in &hellip;. Julia!
Check the image below for the language codebase percentage of
<a href="https://github.com/JuliaLang/julia">Julia</a>
and <a href="https://github.com/LuxDL/Lux.jl"><code>Lux.jl</code></a><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> (deep learning package).</p>
<p><img loading="lazy" src="julia.jpg#center" alt="julia"  />
</p>
<p>Finally, here&rsquo;s <a href="https://rust-lang.org">Rust</a>, which is not dynamically-,
but static-typed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Size of bool: </span><span class="si">{}</span><span class="s"> byte&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem</span>::<span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo run --release
</span></span><span class="line"><span class="cl">   Compiling size_of_bool v0.1.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/release/size_of_bool<span class="sb">`</span>
</span></span><span class="line"><span class="cl">Size of bool: <span class="m">1</span> byte
</span></span></code></pre></div><h2 id="more-zero-costs-abstractions">More zero-costs abstractions</h2>
<p>Let&rsquo;s cover two more zero-costs abstractions, both in Julia and in Rust:
<strong>for-loops</strong> and <strong>enums</strong>.</p>
<h3 id="for-loops">For-loops</h3>
<p>A friend and a Julia-advocate once told me that Julia&rsquo;s master plan is to secretly
&ldquo;make everyone aware about <em>compilers</em>&rdquo;.
The <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>
is a program that translate source code from a high-level programming language
to a low-level programming language
(e.g. assembly language, object code, or machine code) to create an
executable program.</p>
<p>Python uses <a href="https://github.com/python/cpython">CPython</a> as the compiler.
If you search around on why CPython/Python is so slow and inefficient,
you&rsquo;ll find that the culprits are:</p>
<ol>
<li>Python is <strong>dynamic-typed language</strong>.</li>
<li>Python&rsquo;s <strong>Global Interpreter Lock (GIL) restricts multi-threading capabilities</strong>.</li>
<li>Python is <strong>interpreted</strong>, which means that Python code is executed sequentially:
line-by-line.</li>
<li>Python is <strong>garbage-collected</strong>: all memory its tracked,
and allocated or deallocated which introduces overhead.</li>
</ol>
<p>I completely disagree with almost all the above reasons, except the GIL.
<strong>Python is slow because of its design decisions</strong>,
more specifically the way CPython works under the hood.
It is not built for performance in mind.
Actually, the main objective of Python was to be a
&ldquo;language that would be easy to read, write, and maintain&rdquo;.
I salute that: Python has remained true to its main objective.</p>
<p>Now let&rsquo;s switch to Julia:</p>
<ol>
<li>Julia is <strong>dynamic-typed language</strong>.</li>
<li>Julia is <strong>interpreted</strong>, which means that Julia code is executed sequentially:
line-by-line.</li>
<li>Julia is <strong>garbage-collected</strong>: all memory its tracked,
and allocated or deallocated which introduces overhead.</li>
</ol>
<p>I&rsquo;ve copy-pasted all Python&rsquo;s arguments for inefficiency, except the GIL.
And, contrary to Python, <a href="https://julialang.org/benchmarks/">Julia is fast</a>!
Sometimes even faster than C<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.
Actually, that was the goal all along since Julia&rsquo;s inception.
If you check the <a href="https://julialang.org/blog/2012/02/why-we-created-julia/">notorious Julia announcement blog post from 2012</a>:</p>
<blockquote>
<p>We want a language that&rsquo;s open source, with a liberal license.
We want the speed of C with the dynamism of Ruby.
We want a language that&rsquo;s homoiconic, with true macros like Lisp,
but with obvious, familiar mathematical notation like Matlab.
We want something as usable for general programming as Python,
as easy for statistics as R, as natural for string processing as Perl,
as powerful for linear algebra as Matlab, as good at gluing programs together as the shell.
Something that is dirt simple to learn,
yet keeps the most serious hackers happy.
We want it interactive and we want it compiled.</p>
<p>(Did we mention it should be as fast as C?)</p>
</blockquote>
<p>It mentions &ldquo;speed&rdquo; twice.
Not only that, but also specifically says that it should match C&rsquo;s speed.</p>
<p>Julia is fast because of its design decisions.
One of the major reasons why Julia is fast is because of the choice of compiler
that it uses: <a href="https://llvm.org/">LLVM</a>.</p>
<p>LLVM originally stood for <strong>l</strong>ow <strong>l</strong>evel <strong>v</strong>irtual <strong>m</strong>achine.
Despite its name, LLVM has little to do with traditional virtual machines.
LLVM can take <a href="https://en.wikipedia.org/wiki/Intermediate_representation">intermediate representation (IR)</a>
code and compile it into machine-dependent instructions.
It has <a href="https://foundation.llvm.org/docs/sponsors/">support and sponsorship</a>
from a lot of big-tech corporations,
such as Apple, Google, IBM, Meta, Arm, Intel, AMD, Nvidia, and so on.
It is a pretty fast compiler that can do wonders in optimizing IR code to a
plethora of computer architectures.</p>
<p>In a sense, Julia is a front-end for LLVM.
It turns your easy-to-read and easy-to-write Julia code into LLVM IR code.
Take this for-loop example inside a function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">10</span>
</span></span><span class="line"><span class="cl">        <span class="n">acc</span> <span class="o">+=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">acc</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Let&rsquo;s check what Julia generates as LLVM IR code for this function.
We can do that with the <code>@code_llvm</code> macro.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@code_llvm</span> <span class="n">debuginfo</span><span class="o">=</span><span class="ss">:none</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">define</span> <span class="n">i64</span> <span class="nd">@julia_sum_10_172</span><span class="p">()</span> <span class="c">#0 {</span>
</span></span><span class="line"><span class="cl"><span class="n">top</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">ret</span> <span class="n">i64</span> <span class="mi">55</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></div><p>You can&rsquo;t easily fool the compiler.
Julia understands that the answer is 55,
and the LLVM IR generated code is pretty much just &ldquo;return 55 as a 64-bit integer&rdquo;.</p>
<p>Let&rsquo;s also check the machine-dependent instructions with the <code>@code_native</code> macro.
I am using an Apple Silicon machine, so these instructions might differ from yours:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@code_native</span> <span class="n">debuginfo</span><span class="o">=</span><span class="ss">:none</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">section</span>        <span class="n">__TEXT</span><span class="p">,</span><span class="n">__text</span><span class="p">,</span><span class="n">regular</span><span class="p">,</span><span class="n">pure_instructions</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">build_version</span> <span class="n">macos</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">globl</span>  <span class="n">_julia_sum_10_214</span>               <span class="p">;</span> <span class="o">--</span> <span class="n">Begin</span> <span class="k">function</span> <span class="n">julia_sum_10_214</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">p2align</span>        <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">_julia_sum_10_214</span><span class="o">:</span>                      <span class="p">;</span> <span class="nd">@julia_sum_10_214</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">cfi_startproc</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">%</span><span class="n">bb</span><span class="mf">.0</span><span class="o">:</span>                                <span class="p">;</span> <span class="o">%</span><span class="n">top</span>
</span></span><span class="line"><span class="cl">        <span class="n">mov</span>     <span class="n">w0</span><span class="p">,</span> <span class="c">#55</span>
</span></span><span class="line"><span class="cl">        <span class="n">ret</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">cfi_endproc</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">;</span> <span class="o">--</span> <span class="n">End</span> <span class="k">function</span>
</span></span><span class="line"><span class="cl"><span class="o">.</span><span class="n">subsections_via_symbols</span>
</span></span></code></pre></div><p>The only important instruction for our argument here is the <code>mov w0, #55</code>.
This means &ldquo;move the value 55 into the <code>w0</code> register&rdquo;,
where <code>w0</code> is one of registers available in ARM-based architectures
(which Apple Silicon chips are).</p>
<p>This is a <strong>zero-cost abstraction</strong>!
I don&rsquo;t need to give up for-loops, because they might be slow and inefficient;
like some Python users suggest newcomers.
I can have the full convenience and expressiveness of for-loops without
paying performance costs.
Pretty much the definition of a zero-cost abstraction from above.</p>
<p>Using LLVM as a compiler backend is not something unique to Julia.
Rust also uses LLVM under the hood.
Take for example this simple Rust code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">sum_10</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..=</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">acc</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">acc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;sum_10: </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sum_10</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>We can inspect both LLVM IR code and machine instructions with the
<a href="https://github.com/pacak/cargo-show-asm"><code>cargo-show-asm</code></a> crate:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo asm --llvm <span class="s2">&#34;sum_10::main&#34;</span> <span class="p">|</span> grep <span class="m">55</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  store i32 55, ptr %_9, align <span class="m">4</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo asm <span class="s2">&#34;sum_10::main&#34;</span> <span class="p">|</span> grep <span class="m">55</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        mov w8, <span class="c1">#55</span>
</span></span></code></pre></div><p>No coincidence that the LLVM IR code is very similar,
with the difference that integers, by default,
in Julia are 64 bits and in Rust 32 bits.
However, the machine code is <strong>identical</strong>:
&ldquo;move the value 55 into a <code>w</code> something register&rdquo;.</p>
<h3 id="enums">Enums</h3>
<p>Another zero-cost abstraction, in Julia and Rust, is <strong>enums</strong>.</p>
<p>In Julia all enums, by default have a <code>BaseType</code> of <code>Int32</code>:
a signed 32-bit integer.
However, we can override this with type annotations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@enum</span> <span class="n">Thing</span><span class="o">::</span><span class="kt">Bool</span> <span class="n">One</span> <span class="n">Two</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Base</span><span class="o">.</span><span class="n">summarysize</span><span class="p">(</span><span class="n">Thing</span><span class="p">(</span><span class="nb">false</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></div><p>Here we have an enum <code>Thing</code> with two variants: <code>One</code> and <code>Two</code>.
Since we can safely represent all the possible variant space of <code>Thing</code>
with a boolean type, we override the <code>BaseType</code> of <code>Thing</code> to be the <code>Bool</code> type.
Unsurprised, any object of <code>Thing</code> occupies 1 byte in memory.</p>
<p>We can achieve the same with Rust:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[allow(dead_code)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">enum</span> <span class="nc">Thing</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">One</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Two</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Size of Thing: </span><span class="si">{}</span><span class="s"> byte&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem</span>::<span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Thing</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo run --release
</span></span><span class="line"><span class="cl">   Compiling enum_size v0.1.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.09s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/release/enum_size<span class="sb">`</span>
</span></span><span class="line"><span class="cl">Size of Thing: <span class="m">1</span> byte
</span></span></code></pre></div><p>However, contrary to Julia, Rust compiler automatically detects the enum&rsquo;s
variant space size and adjust accordingly.
So, no need of overrides.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Zero-cost abstractions are a joy to have in a programming language.
It enables you, as a programmer, to just focus on what&rsquo;s important:
write expressive code that is easy to read, maintain, debug, and build upon.</p>
<p>It is no wonder that zero-cost abstractions is a pervasive feature
of two of my top-favorite languages:
<a href="https://julialang.org">Julia</a>
and <a href="https://rust-lang.org">Rust</a>.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>this post is somehow connected to my <a href="../2023-11-10-2023-11-13-soydev/">soydev rant</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>and that&rsquo;s not a compliment.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>technically, we can represent a boolean with just one bit.
However, the short answer is still one byte,
because that&rsquo;s <a href="https://en.wikipedia.org/wiki/Byte">smallest addressable unit of memory</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>and modifying <code>.gitattributes</code> is cheating.
Yes, I am talking to you <a href="https://github.com/numpy/numpy/blob/06d7bdfbb585264dcf23d4322be7aee449733ca2/.gitattributes#L6-L7">NumPy</a>!&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://github.com/LuxDL/Lux.jl"><code>Lux.jl</code></a> doesn&rsquo;t even have a <code>.gitattributes</code> file.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>if you compare runtime execution.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is soydev? And why do I hate it</title>
      <link>https://storopoli.io/2023-11-10-2023-11-13-soydev/</link>
      <pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://storopoli.io/2023-11-10-2023-11-13-soydev/</guid>
      <description>Let&amp;rsquo;s dive into the concept of &amp;ldquo;soydev&amp;rdquo;, a term often used pejoratively to describe developers with a superficial understanding of technology. I provide my definition of what soydev is, why is bad, and how it came to be. To counteract soydev inclinations, I propose an abstract approach centered on timeless concepts, protocols, and first principles, fostering a mindset of exploration, resilience in the face of failure, and an insatiable hunger for knowledge.</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="soydev.jpg" alt="soydev meme"  />
</p>
<p>Let&rsquo;s dive into the <strong>concept of &ldquo;soydev&rdquo;</strong>,
a term often used pejoratively to describe developers with
a superficial understanding of technology.
I provide my definition of what soydev is,
why is bad, and how it came to be.
To counteract soydev inclinations,
I propose an abstract approach centered on timeless concepts, protocols,
and first principles, fostering a mindset of exploration,
resilience in the face of failure, and an insatiable hunger for knowledge.</p>
<p>While we&rsquo;ll start with a look at the soydev stereotype,
our journey will lead us to a wider reflection on the importance of depth in
technological understanding.</p>
<h2 id="definition">Definition</h2>
<p>First, let&rsquo;s tackle the definition of <em>soydev</em>.
<a href="https://www.urbandictionary.com/define.php?term=Soydev">Urban Dictionary</a>
provides two interesting definitions:</p>
<p>Urban Dictionary definition 1:</p>
<blockquote>
<p>Soydev is a &ldquo;programmer&rdquo; that works at a bigh tech company and
only knows JavaScript and HTML.
They love IDEs like Visual Studio Code and inefficient frameworks
that slow their code down.
They represent the majority of &ldquo;programmers&rdquo; today and
if their numbers continue growing,
not one person on earth will know how a computer works by the year 2050
when all the gigachad 1980s C and Unix programmers are gone.</p>
</blockquote>
<p>Urban Dictionary definition 2:</p>
<blockquote>
<p>Soydev is a type of most abundant Software Developer.
The Software he/she makes is always inefficient and
uses more CPU and RAM than it should.
This person always prefers hard work to smart work,
Has little or no knowledge of existing solutions of a problem,
Comes up with very complex solution for a simple problem and
has fear of native and fast programming languages like C, C++ and Rust</p>
</blockquote>
<p>These definitions give a glimpse of what a soydev is.
However, they are loaded with pejorative language,
and also are based on non-timeless technologies and tools.
I, much prefer to rely on concepts and principles that are timeless.
Hence, I will provide my own definition of soydev:</p>
<p><strong>Soydev is someone who only has a superficial conception of technology
and computers that is restricted to repeating patterns learned
from popular workflows on the internet;
but who doesn&rsquo;t dedicate time or effort to learning concepts in a deeper way.</strong></p>
<p>Although soydev is a term with specific connotations,
it opens the door to a larger conversation about the depth of our engagement
with technology.
This superficiality is not unique to soydevs
but is a symptom of a broader trend in our relationship with technology.</p>
<p>Most of us start our journey in a skill by having the superficial conception of it.
However, some are not satisfied with this superficial conception,
and strive to understand what lies beyond the surface.</p>
<p>Understanding concepts from first principles allows us to achieve a deep graceful
kind of mastery that when seems almost effortless to others.
Deep down lies a lot of effort and time spent in learning and practicing.
Innumerable hours of deep thinking and reflecting on
why things are the way they are, and how they could be different if you
tried to implement them from scratch yourself.</p>
<p>There is also an inherently rare mixture of curiosity and creativity in the
process of profoundly learning and understanding concepts in this way.
You start not only to ask the &ldquo;Why?&rdquo; questions but also the &ldquo;What if?&rdquo; questions.
I feel that this posture on understanding concepts paves the way for joyful mastery.</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Feynman">Richard Feynman</a>
once said &ldquo;What I cannot create, I do not understand&rdquo;.
You cannot create anything that you don&rsquo;t know the underlying concepts.
Therefore, by allying creativity and discovery with deep knowledge,
Feynman&rsquo;s argument was that in order for you truly master something,
you&rsquo;ll need to be able to recreate it from scratch.</p>
<p>If you are struggling with my abstractions, I can provide some concrete examples.
A soydev might be someone who:</p>
<ol>
<li>Instead of using a simple text editor like vim/emacs/nano,
prefers a totally bloated IDE like VSCode to write even basic things in plaintext.
Or cannot SSH into a remote server without a GUI.</li>
<li>Instead of choosing a native solution like HTML for a simple web page section,
prefers to overengineer with a JavaScript framework that has a lot of dependencies,
and takes 3 seconds to render in the browser.</li>
<li>Prefers to use black box abstractions instead of learning about basic tech
primitives and protocols that would get the job done.</li>
<li>Has no idea what about most concepts that are at the core of computing like
bit, byte, heap, stack, garbage collector, async, parallel, CPU cycles,
cache miss, L1/L2/L3 cache etc.</li>
<li>Don&rsquo;t understand the math, or what is going on under the hood when
using machine learning libraries.</li>
</ol>
<h2 id="why-soydev-is-bad">Why soydev is bad</h2>
<p>First, let&rsquo;s understand that being a soydev is not necessarily bad,
but is highly limited on his ability and curiosity.
A soydev will never be able to achieve the same level of mastery
as someone who is willing to go deep and learn concepts from first principles.</p>
<p>Now, on the other hand,
soydev is bad because it perpetuates a mindset of superficiality.
The path of technology innovation is guided by curiosity and creativity.
And paved with hard work and deep understanding.
Imagine if all the great minds in technology took the easy path of mindless
tooling and problem-solving?
We would be in a stagnant and infertile scenario,
where everyone would use the same technology and tools without
questioning or thinking about the problems that they are trying to solve.</p>
<p>Hence, the culture of soydev is bad for the future of technology,
where most new developers will be highly limited in their ability to innovate.</p>
<h2 id="why-soydev-is-on-the-rise">Why soydev is on the rise</h2>
<p>I think that soydev culture is highly correlated with
the increase of technology and
decrease of barriers to access such technology.
We live in an age that not only technology is everywhere,
but also to interact with it is quite effortless.</p>
<p>My computational statistician mind is always aware of cognitive
and statistical bias.
Whenever I see a correlation across time,
I always take a step back and try to think about the assumptions
and conceptual models behind it.</p>
<p>Does the increase in technology usage and importance in daily life
results in more people using technology from a professional point-of-view?
Yes.
Does the increase in people professionally using technology
results in an increase of tooling and conceptual abstractions
that allows superficial interactions without need to deeply understand
the concepts behind such technology?
I do think that this is true as well.</p>
<p>These assumptions cover the constituents of the rise of soydev
from a &ldquo;demand&rdquo; viewpoint.
Nevertheless, there is also the analogous &ldquo;supply&rdquo; viewpoint.
If these trends in demand are not met by trends in supply,
we would not see the establishment of the soydev phenomenon.
There is an emerging trend to standardize all the available tech
into commodities.</p>
<p>While commoditization of technological solutions has inherent advantages,
such as scalability and lower opportunity costs,
it has some disadvantages.
The main disadvantage is the abrupt decrease of technological innovations.
If we have strong standardization that are enforced by market and social forces,
then why care to innovate?
Why bring new solutions or new ways to solve problems if it will not be adopted
and are doomed to oblivion?
Why decide to try to do things different if there is such a high maintenance
cost, especially when training and expanding human resources capable of
dealing with such non-standard solutions?</p>
<p>In this context, technological innovation can only be undertaken
by big corporations that, not only have big budgets,
but also big influence to push its innovations as industry standards.</p>
<p>Don&rsquo;t get me wrong: I do think that industry standards are important.
However, I much prefer a protocol standard than product standards.
First, protocol standards are generally not tied to a single company or brand.
Second, protocol standards have a higher propensity to expose its underlying
concepts to developers.
Think about TCP/IP versus your favorite front-end framework:
Which one would result in deeper understanding of the underlying concepts?</p>
<p>The rise of soydevs mirrors a societal shift towards immediate gratification and
away from the pursuit of deep knowledge.</p>
<h2 id="how-to-stop-being-a-soydev">How to stop being a soydev</h2>
<p>Despite these unstoppable trends I do think that it is possible to use
tools and shallow abstractions without being a soydev.
Or, to stop being a soydev and advance towards deep understanding
of what constitutes your craft.
Moving beyond the &lsquo;soydev&rsquo; mindset is about embracing the richness that
comes from a deep understanding of technology.
Here is a short, not by any means exhaustive list of things that you can start doing:</p>
<ol>
<li><strong>Stop thinking about what is latest and greatest</strong>.
The tools are not important as the problems they are solving.
Understand what is the need that the tool tries to address,
and the major concepts on how it works.</li>
<li><strong>Focus on concepts, protocols and first principles</strong>.
Forget about frameworks, languages, editors, apps, etc.
Focus on what probably won&rsquo;t change in the next decade in technology.
It is easy (and less uncertain) to think concepts and problems,
than in tools and solutions.</li>
<li><strong>Set aside some weekly time to explore new ideas</strong>.
Time block it, make it a calendar event.
Try to find a time slot that you can be free of distraction and worries.
Free all of your working memory when you are starting a &ldquo;new idea&rdquo; session.
Think about what problem is this idea trying to solve.
Also don&rsquo;t be stuck to just using the &ldquo;problem-solving&rdquo; lens.
Most concepts that are worth knowing in computer science and programming
don&rsquo;t have a clear problem tied to them.</li>
<li><strong>Tinker. Play around</strong>. Break something down and see if you can build from scratch.
Remember Feynman&rsquo;s &ldquo;What I cannot create, I do not understand&rdquo;.</li>
<li><strong>Failure is almost certain</strong>. Yes, you will definitely fail.
I say to a lot of junior devs, interns, and students that the only advantage
that I have compared to them is that I&rsquo;ve failed more times that they have tried.</li>
<li><strong>Stay curious and hungry for knowledge</strong>.
I am always impressed on how children are so curious.
I feel sad that almost no one retains their childhood curiosity as an adult
(Maybe that&rsquo;s why I love to interact with children).
Also, I am amazed by how deprived of will to learn some are.
That is an idea that for me, it is hard to grasp,
since I feel the exactly opposite.
Often I have to hold myself not diving into certain areas, ideas or concepts
because I cannot afford the time to learn them.
However, I am always tempted by them.</li>
</ol>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
