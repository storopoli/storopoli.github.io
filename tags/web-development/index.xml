<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Web Development on Jose Storopoli, PhD</title>
  <link rel="alternate" href="https://storopoli.io/tags/web-development/" />
  <link rel="self" href="https://storopoli.io/tags/web-development/index.xml" />
  <subtitle>Recent content in Web Development on Jose Storopoli, PhD</subtitle>
  <id>https://storopoli.io/tags/web-development/</id>
  <generator uri="http://gohugo.io" version="0.133.0">Hugo</generator>
  <language>en-us</language>
  <updated>2024-01-30T08:57:33Z</updated>
  <author>
    <name>Jose Storopoli</name>
    
  </author>
  <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights>
      <entry>
        <title>Fullstack and Progressive Web Apps in Rust: A Tale of a Sudoku Spyware</title>
        <link rel="alternate" href="https://storopoli.io/2024-01-30-sudoku/" />
        <id>https://storopoli.io/2024-01-30-sudoku/</id>
        <published>2024-01-30T08:57:33Z</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">It all started when I had to accompany my mom to the hospital. It was just a routine checkup, but I had to wait for a few hours. I brought my laptop with me, since they have good WiFi and I could work on my projects. Then I realized that my mom was playing a Sudoku1 game on her phone. I couln&amp;rsquo;t help but notice that the game was full of ads and it was asking for a lot of permissions, like location and sensor data.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="rust_webdev_meme.jpg#center" alt="rust webdev meme"  />
</p>
<p>It all started when I had to accompany my mom to the hospital.
It was just a routine checkup, but I had to wait for a few hours.
I brought my laptop with me, since they have good WiFi and I could work on my projects.
Then I realized that my mom was playing a <a href="https://en.wikipedia.org/wiki/Sudoku">Sudoku</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
game on her phone.
I couln&rsquo;t help but notice that the game was full of ads and it was asking for a lot of permissions,
like location and sensor data.
So I decided to make a <strong>Sudoku game for her, without ads or using any permission</strong>.
It wouldn&rsquo;t even need to ask for the blessing of Google or <a href="https://youtu.be/XHVxm12NbrY">Tim Apple</a>
since it was a Progressive Web App (PWA) and it would work offline.</p>
<p>You can play the game at <a href="https://storopoli.io/sudoku">storopoli.io/sudoku</a>
or check the source code at <a href="https://github.com/storopoli/sudoku"><code>storopoli/sudoku</code></a>.</p>
<p>Here&rsquo;s a screenshot of the game:</p>
<p><img loading="lazy" src="sudoku_screenshot.png#center" alt="sudoku screenshot"  />
</p>
<h2 id="tools-of-choice">Tools of Choice</h2>
<p>So what would I use to build this game?
Only one thing: <a href="https://dioxuslabs.com/"><strong>Dioxus</strong></a>.
Dioxus is a fullstack framework for Rust,
that allows you to build web applications with Rust.
You can benefit from the safety and performance of Rust,
powerful type system and borrow checker,
along with the low memory footprint.</p>
<p>That&rsquo;s it. <strong>Just Rust and HTML with some raw CSS</strong>.
No &ldquo;YavaScript&rdquo;. No Node.js. No npm. No webpack. No Tailwind CSS.
Just <code>cargo run --release</code> and you&rsquo;re done.</p>
<h2 id="package-management">Package Management</h2>
<p>Using Rust for fullstack development is an amazing thing.
First, <strong>package management is a breeze with Cargo</strong>.
Second, you don&rsquo;t have to worry about <strong>&ldquo;npm vulnerabilities&rdquo;</strong>.
Have you ever gone into your project and ran <code>npm audit</code>?</p>
<p><img loading="lazy" src="npm_vulnerabilities.png#center" alt="npm_vulnerabilities"  />
</p>
<p>This is solvable with Rust.</p>
<h2 id="runtime-errors">Runtime Errors</h2>
<p>An additional advantage is that you <strong>don&rsquo;t have to worry about common
runtime errors</strong> like <code>undefined is not a function</code> or <code>null is not an object</code>.
These are all picked-up by <strong>Rust on compile time</strong>.
So you can focus on the logic of your application knowing that it will work as <strong>expected</strong>.</p>
<p>A common workflow in Rust fullstack applications is to use Rust&rsquo;s powerful type system
to parse any user input into a type that you can trust, and then propagate that type
throughout your application. This way you can be sure that you&rsquo;re not going to have
any runtime errors due to invalid input. This is not the case with &ldquo;YavaScript&rdquo;.
You need to validate the input at every step of the way, and you can&rsquo;t be sure
that the input is valid at any point in time.</p>
<p>You can sleep soundly at night knowing that your application won&rsquo;t crash
and as long as the <strong>host machine has electricity and internet access,
your app is working as expected</strong><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="performance">Performance</h2>
<p>Rust is known for its <strong>performance</strong>.
This is due to the fact that Rust gives you control over deciding on which type you&rsquo;ll use for a variable.
This is not the case with &ldquo;YavaScript&rdquo;, where you can&rsquo;t decide if a variable is a number or a string.
Also you can use references and lifetimes to avoid copying data around.</p>
<p>So, if you make sane decisions, like <code>u8</code> (unsigned 8-bit integer) instead of <code>i32</code> (signed 32-bit integer)
for a number that will never be greater than 255, you can have a very low memory footprint.
Also you can use <code>&amp;str</code> (string slice) instead of <code>String</code> to avoid copying strings around.</p>
<p>You just don&rsquo;t have this level of control with &ldquo;YavaScript&rdquo;.
You get either strings or numbers and you can&rsquo;t decide on the size of the number.
And all of your strings will be heap-allocated and copied around.</p>
<h2 id="progressive-web-apps">Progressive Web Apps</h2>
<p>Progressive Web Apps (PWAs) are web applications that are regular web pages or websites,
but can appear to the user like traditional applications or native mobile applications.
Since they use the device&rsquo;s browser, they don&rsquo;t need to be installed through an app store.
This is a great advantage, since you don&rsquo;t have to ask for permissions to Google or
<a href="https://youtu.be/XHVxm12NbrY">Tim Apple</a>.</p>
<p><strong>In Dioxus making a PWA was really easy</strong>.
There is a PWA template in the <a href="https://github.com/DioxusLabs/dioxus/tree/master/examples/PWA-example"><code>examples/</code> directory in their repository</a>.
You just have to follow the instructions in the README and you&rsquo;re done.
In my case, I only had to change the metadata in the <code>manifest.json</code> file
and add what I wanted to cache in the service worker <code>.js</code> file.
These were only the favicon icon and the CSS style file.</p>
<h2 id="sudoku-algorithm">Sudoku Algorithm</h2>
<p>I didn&rsquo;t have to worry about the algorithm to generate the Sudoku board.
This was already implemented in the <a href="https://crates.io/crates/sudoku"><code>sudoku</code></a> crate.
But I had to implement some <strong>Sudoku logic to make the user interface work</strong>.</p>
<p>Some things that I had to implement were:</p>
<ul>
<li><strong>find the related cells</strong>.
Given a cell, find the cells in the same row, column and sub-grid.</li>
<li><strong>find the conflicting cells</strong>.
Given a cell, find the cells in the same row, column and sub-grid that have the same value.</li>
</ul>
<h3 id="find-the-related-cells">Find the Related Cells</h3>
<p>This was a simple task, yet it was very fun to implement.</p>
<p>To get the related cells, you need to find the row and column of the cell.
Then you can find the start row and start column of the 3x3 sub-grid.
After that, you can add the cells in the same row, column and sub-grid to a vector.
Finally, you can remove the duplicates and the original cell from the vector.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_related_cells</span><span class="p">(</span><span class="n">index</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">related_cells</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">start_row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">start_col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Add cells in the same row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">9</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">related_cells</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">row</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Add cells in the same column
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">9</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">related_cells</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">col</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Add cells in the same 3x3 sub-grid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">start_row</span><span class="o">..</span><span class="n">start_row</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">start_col</span><span class="o">..</span><span class="n">start_col</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">related_cells</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">j</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Remove duplicates and the original cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">related_cells</span><span class="p">.</span><span class="n">sort_unstable</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">related_cells</span><span class="p">.</span><span class="n">dedup</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">related_cells</span><span class="p">.</span><span class="n">retain</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">related_cells</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="find-the-conflicting-cells">Find the Conflicting Cells</h3>
<p>To find the conflicting cells, you need to get the value of the target cell.
Then you can get the related cells and filter the ones that have the same value as the target cell.
Easy peasy.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_conflicting_cells</span><span class="p">(</span><span class="n">board</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">,</span><span class="w"> </span><span class="n">index</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Get the value of the target cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">board</span><span class="p">[</span><span class="n">index</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Ignore if the target cell is empty (value 0)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Get related cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">related_cells</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_related_cells</span><span class="p">(</span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Find cells that have the same value as the target cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">related_cells</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">index</span><span class="o">|</span><span class="w"> </span><span class="n">board</span><span class="p">[</span><span class="n">index</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">collect</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Note that I am using <code>0</code> to represent empty cells.</p>
<p>But if the user ignores the conflicting cells and adds a number to the board,
there will be more conflicting cells than the ones related to the target cell.
This can be done with another helper function.</p>
<p>Here&rsquo;s the code, and I took the liberty of adding the docstrings (the <code>///</code> comments that renders as documentation):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Get all the conflictings cells for all filled cells in a Sudoku board
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Parameters
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - `current_sudoku: SudokuState` - A reference to the current [`SudokuState`]
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Returns
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// Returns a `Vec&lt;u8&gt;` representing all cell&#39;s indices that are conflicting
</span></span></span><span class="line"><span class="cl"><span class="sd">/// with the current Sudoku board.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_all_conflicting_cells</span><span class="p">(</span><span class="n">current_sudoku</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">filled</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current_sudoku</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">enumerate</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">filter_map</span><span class="p">(</span><span class="o">|</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">value</span><span class="p">)</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">u8</span>::<span class="n">try_from</span><span class="p">(</span><span class="n">idx</span><span class="p">).</span><span class="n">ok</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nb">None</span><span class="w"> </span><span class="c1">// Filter out the item if the value is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">})</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Get all conflicting cells for the filled cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">conflicting</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">filled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">flat_map</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">v</span><span class="o">|</span><span class="w"> </span><span class="n">get_conflicting_cells</span><span class="p">(</span><span class="n">current_sudoku</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">collect</span>::<span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Retain unique
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">conflicting</span><span class="p">.</span><span class="n">sort_unstable</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">conflicting</span><span class="p">.</span><span class="n">dedup</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">conflicting</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The trick here is that we are using a <code>flat_map</code> since a naive <code>map</code> would return a nested <code>Vec&lt;Vec&lt;Vec&lt;...&gt;&gt;&gt;</code>
of <code>u8</code>s, and we don&rsquo;t want that.
We want a flat <code>Vec&lt;u8&gt;</code> of all conflicting cells.
Recursion is always tricky, go ask Alan Turing.</p>
<h2 id="sudoku-app-state">Sudoku App State</h2>
<p>As you can see, I used a <code>SudokuState</code> type to represent the state of the game.
This is just a type alias for a <code>[u8; 81]</code> array.
This is a very simple and efficient way to represent the state of the game.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">type</span> <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="kt">u8</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>The Sudoku app has also an undo button.
This is implemented by using a <code>Vec&lt;SudokuState&gt;</code> to store the history of the game.
Every time that the user adds a number to the board, the new update state is pushed to the history vector.
When the user clicks the undo button, the last state is popped from the history vector and the board is updated.</p>
<p>There&rsquo;s one additional problem with the undo button.
It needs to switch the clicked cell to the one that was clicked before.
Yet another simple, but fun, task.
First you need to find the index at which two given <code>SudokuState</code>, the current and the last,
differ by exactly one item.</p>
<p>Again I&rsquo;ll add the docstrings since they incorporate some good practices that are worth mentioning:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Finds the index at which two given [`SudokuState`]
</span></span></span><span class="line"><span class="cl"><span class="sd">/// differ by exactly one item.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// This function iterates over both arrays in lockstep and checks for a
</span></span></span><span class="line"><span class="cl"><span class="sd">/// pair of elements that are not equal.
</span></span></span><span class="line"><span class="cl"><span class="sd">/// It assumes that there is exactly one such pair and returns its index.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Parameters
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// * `previous: SudokuState` - A reference to the first [`SudokuState`] to compare.
</span></span></span><span class="line"><span class="cl"><span class="sd">/// * `current: SudokuState` - A reference to the second [`SudokuState`] to compare.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Returns
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// Returns `Some(usize)` with the index of the differing element if found,
</span></span></span><span class="line"><span class="cl"><span class="sd">/// otherwise returns `None` if the arrays are identical (which should not
</span></span></span><span class="line"><span class="cl"><span class="sd">/// happen given the problem constraints).
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Panics
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// The function will panic if cannot convert any of the Sudoku&#39;s board cells
</span></span></span><span class="line"><span class="cl"><span class="sd">/// indexes from `usize` into a `u8`
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Examples
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ```
</span></span></span><span class="line"><span class="cl"><span class="sd">/// let old_board: SudokuState = [0; 81];
</span></span></span><span class="line"><span class="cl"><span class="sd">/// let mut new_boad: SudokuState = [0; 81];
</span></span></span><span class="line"><span class="cl"><span class="sd">/// new_board[42] = 1; // Introduce a change
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// let index = find_changed_cell(&amp;old_board, &amp;new_board);
</span></span></span><span class="line"><span class="cl"><span class="sd">/// assert_eq!(index, Some(42));
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ```
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">find_changed_cell</span><span class="p">(</span><span class="n">previous</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">,</span><span class="w"> </span><span class="n">current</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cell2</span><span class="p">))</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">previous</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="n">iter</span><span class="p">()).</span><span class="n">enumerate</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">cell1</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">cell2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="kt">u8</span>::<span class="n">try_from</span><span class="p">(</span><span class="n">index</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;cannot convert from u8&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">None</span><span class="w"> </span><span class="c1">// Return None if no change is found (which should not happen in your case)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The function <code>find_changed_cell</code> can panic if it cannot convert any of the Sudoku&rsquo;s board cells indexes from <code>usize</code> into a <code>u8</code>.
Hence, we add a <code>## Panics</code> section to the docstring to inform the user of this possibility.
Additionally, we add an <code>## Examples</code> section to show how to use the function.
These are good practices that are worth mentioning<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> and I highly encourage you to use them in your Rust code.</p>
<h2 id="tests">Tests</h2>
<p>Another advantage of using Rust is that you can write tests for your code
without needing to use a third-party library.
It is baked into the language and you can run your tests with <code>cargo test</code>.</p>
<p>Here&rsquo;s an example of a test for the <code>get_conflicting_cells</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_conflicts_multiple</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">board</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 1 with conflict
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 2 with conflict
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 9 with conflict
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">get_conflicting_cells</span><span class="p">(</span><span class="o">&amp;</span><span class="n">board</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">72</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And also two tests for the <code>find_changed_cell</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_find_changed_cell_single_difference</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_board</span>: <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">new_board</span>: <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">new_board</span><span class="p">[</span><span class="mi">42</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// Introduce a change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">find_changed_cell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">old_board</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">new_board</span><span class="p">),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_find_changed_cell_no_difference</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_board</span>: <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// This should return None since there is no difference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">find_changed_cell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">old_board</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">old_board</span><span class="p">),</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I had a lot of fun building this game.
I gave my mother an amazing gift that she&rsquo;ll treasure forever.
Her smartphone has one less spyware now.
I deployed a fullstack web app with Rust that is fast, safe and efficient;
with the caveat that I didn&rsquo;t touched any &ldquo;YavaScript&rdquo; or complexes build tools.</p>
<p>I hope you enjoyed this post and that you&rsquo;ll give Rust a try in your next fullstack project.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>According to <a href="https://en.wikipedia.org/wiki/Sudoku">Wikipedia</a>,
Sudoku is a logic-based, combinatorial number-placement puzzle.
The objective is to fill a 9×9 grid with digits so that each column, each row,
and each of the nine 3×3 subgrids that compose the grid contain all of the digits from 1 to 9.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>in my case I am sending the bill to Bill Gates,
since it is using the GitHub Pages to host the app.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The <code>clippy</code> linter can warn you if you don&rsquo;t add these sections to your docstrings.
Just add <code>pedantic = &quot;deny&quot;</code> inside your <code>Cargo.toml</code> file in the <code>[lints.clippy]</code> section and you&rsquo;re good to go.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>htmx: an Oasis in a Desert of Soy</title>
        <link rel="alternate" href="https://storopoli.io/2024-01-14-htmx/" />
        <id>https://storopoli.io/2024-01-14-htmx/</id>
        <published>2024-01-14T06:13:19-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">Warning: This post has mermaid.js enabled, so if you want to view the rendered diagrams, you&amp;rsquo;ll have to unfortunately enable JavaScript.
I love to learn new things and I&amp;rsquo;m passionate about Stoic philosophy. So, when I acquired the domain stoicquotes.io1, I&amp;rsquo;ve decided to give htmx a try.
What is htmx? htmx is a small JavaScript library that allows you to enhance your HTML with attributes to perform AJAX (Asynchronous JavaScript and XML) without writing JavaScript2.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="bellcurve.png#center" alt="htmx bell curve"  />
</p>
<blockquote>
<p>Warning: This post has <a href="https://mermaid.js.org"><code>mermaid.js</code></a> enabled,
so if you want to view the rendered diagrams,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p>I love to learn new things and I&rsquo;m passionate about Stoic philosophy.
So, when I acquired the domain
<a href="https://stoicquotes.io"><code>stoicquotes.io</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
I&rsquo;ve decided to give <a href="https://htmx.org"><code>htmx</code></a> a try.</p>
<h2 id="what-is-htmx">What is <code>htmx</code>?</h2>
<p><strong><code>htmx</code></strong> is a small JavaScript library that allows you to enhance your HTML with
attributes to perform AJAX (Asynchronous JavaScript and XML) without writing
JavaScript<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It focuses on extending HTML by adding custom attributes
that describe how to perform common dynamic web page behaviors like partial page
updates, form submission, etc. <code>htmx</code> is designed to be easy to use, requiring
minimal JavaScript knowledge, so that you can add interactivity<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> to web pages
with just HTML.</p>
<p>Let&rsquo;s contrast this with the <a href="../2023-11-10-2023-11-13-soydev/">Soy stuff</a>
like the notorious React framework. <strong>React</strong>, on the other hand, is a JavaScript
library for building user interfaces, primarily through a component-based
architecture. It manages the creation of user interface elements, updates the UI
efficiently when data changes, and helps keep your UI in sync with the state of
your application. React requires a deeper knowledge of JavaScript and understanding
of its principles, such as components, state, and props.</p>
<p><strong>In simple terms:</strong></p>
<ul>
<li><strong><code>htmx</code></strong> enhances plain HTML by letting you add attributes for dynamic
behaviors, so you can make webpages interactive with no JavaScript coding;
you can think of it as boosting your HTML to do more.</li>
<li><strong>React</strong> is more like building a complex machine from customizable parts that
you program with JavaScript, giving you full control over how your application
looks and behaves but also requiring more from you in terms of code complexity
and architecture.</li>
</ul>
<p>Additionally, React can be slower and less performant than <code>htmx</code>.
This is due to <code>htmx</code> manipulating the actual
<a href="https://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> itself,
while React updates objects in the Virtual DOM. Afterward, React compares the
new Virtual DOM with a pre-update version and calculates the
most efficient way to make these changes to the real DOM.
So React has to do this whole trip around diff&rsquo;ing all the time the Virtual DOM
against the actual DOM for <strong>every fucking change</strong>.</p>
<p>Finally, <code>htmx</code> receives pure HTML from the server.
React needs to the <strong>JSON busboy thing</strong>: the server sends JSON, React parses
JSON into JavaScript code, then it parses it again to HTML for the browser.</p>
<p>Here are some <a href="https://mermaid.js.org/"><code>mermaid.js</code></a> diagrams to illustrate
what is going on under the hood:</p>
<div class="mermaid" style="text-align: center">

---

## title: htmx

flowchart LR
HTML --> DOM
</div>

<div class="mermaid" style="text-align: center">

---

## title: React

flowchart LR
JSON --> JavaScript --> HTML --> VDOM[Virtual DOM] --> DOM
</div>

<p>A consequence of these different paradigms is that <code>htmx</code> don&rsquo;t care about
what the server sends back and will happily include in the DOM.
Hence, front-end and back-end are decoupled and less complex.
Whereas in Reactland, we need to have a tight synchronicity between front-end
and back-end. If the JSON that the server sends doesn&rsquo;t conform to the exact
specifications of the front-end, the application <del>becomes a dumpster fire</del>
breaks.</p>
<h2 id="hypermedia">Hypermedia</h2>
<p>When the web was created it was based on the concept of
<a href="https://en.wikipedia.org/wiki/Hypermedia"><strong>Hypermedia</strong></a>.
Hypermedia refers to a system of interconnected multimedia elements, which can
include text, graphics, audio, video, and hyperlinks. It allows users to
navigate between related pieces of content across the web or within
applications, creating a non-linear way of accessing information.</p>
<p>HTML follows the Hypermedia protocol. HTML is the native language of browsers<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.
That&rsquo;s why all the React-like frameworks have to convert JavaScript into HTML.
So it&rsquo;s only natural to rely primarily on HTML to deliver content and sprinkle
JavaScript sparingly when you need something that HTML cannot offer.</p>
<p>Unfortunately, HTML has stopped in time. Despite all the richness of
<a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a> with the diverse request methods:
<code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>CONNECT</code>, <code>OPTIONS</code>, <code>TRACE</code>, <code>PATCH</code>;
HTML only has <em>two</em> elements that interact with the server:</p>
<ul>
<li><code>&lt;a&gt;</code>: sends a <code>GET</code> request to fetch new data.</li>
<li><code>&lt;form&gt;</code>: sends a <code>POST</code> request to create new data.</li>
</ul>
<p>That&rsquo;s the main purpose of <code>htmx</code>: allowing HTML elements to leverage all the
capabilities of HTTP.</p>
<h2 id="htmx-in-practice"><code>htmx</code> in Practice</h2>
<p>OK, enough of abstract and theoretical concepts. Let&rsquo;s see how <code>htmx</code> works in
practice.</p>
<p>First, the only thing you need to do enable <code>htmx</code> is to insert this <code>&lt;script&gt;</code>
tag in your HTML:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://unpkg.com/htmx.org@{version}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>where <code>{version}</code> is the desired <code>htmx</code> version that you&rsquo;ll want to use.
I has around 40kb of size.</p>
<p>Inside the code behind <a href="https://stoicquotes.io"><code>stoicquotes.io</code></a><sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
we have the following HTML<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;quote&#34;</span><span class="p">&gt;</span>Some nice Stoic quote...<span class="p">&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-get</span><span class="o">=</span><span class="s">&#34;/quote&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-trigger</span><span class="o">=</span><span class="s">&#34;click&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-target</span><span class="o">=</span><span class="s">&#34;#quote&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-swap</span><span class="o">=</span><span class="s">&#34;outerHTML&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  New
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>When the user clicks (<code>hx-trigger</code>) in the &ldquo;New&rdquo; button, <code>htmx</code> sends a <code>GET</code>
request to the <code>/quote</code> endpoint (<code>hx-get</code>). Then it swaps the whole HTML
(<code>hx-swap</code>) of the element that has id &ldquo;quote&rdquo; (<code>hx-target</code>).
This is accomplished without a single character of JavaScript.
Instead we extend HTML by adding new attributes to the HTML elements:</p>
<ul>
<li><code>hx-get</code></li>
<li><code>hx-trigger</code></li>
<li><code>hx-target</code></li>
<li><code>hx-swap</code></li>
</ul>
<p>The server replies with a new <code>&lt;blockquote&gt;</code> element every time it gets a <code>GET</code>
request in the <code>/quote</code> endpoint.</p>
<p>This is truly amazing. We just used one line of <code>htmx</code>.</p>
<p><img loading="lazy" src="4-lines.png#center" alt="htmx 4 lines"  />
</p>
<p><code>htmx</code> adheres to my trifecta of amazing tools<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>:</p>
<ul>
<li>powerful</li>
<li>expressive</li>
<li>concise</li>
</ul>
<p>Here&rsquo;s a breakdown of what the trifecta of amazing tools means:</p>
<ol>
<li>
<p><strong>Powerful:</strong>
A powerful tool has the capability to handle complex, demanding tasks with
relative ease. It possesses the strength, performance, and features necessary to
accomplish a wide range of functions.</p>
</li>
<li>
<p><strong>Expressive:</strong>
An expressive tool gives users the ability to articulate complex ideas,
designs, or concepts with simplicity and nuance. It provides a rich set of
capabilities that allow for diverse and sophisticated forms of expression.</p>
</li>
<li>
<p><strong>Concise:</strong>
A concise tool allows for achieving goals with minimal effort or complexity.
It focuses on efficiency and effectiveness, often through simplification and the
removal of unnecessary components. It should be capable of performing tasks
without requiring verbose instructions or processes.</p>
</li>
</ol>
<h3 id="how-we-would-do-this-in-react">How we would do this in React?</h3>
<p>Now compare this with React.</p>
<p>First, we need to install React.
This is not simple, but here&rsquo;s a breakdown:</p>
<ol>
<li>
<p>install Node.js</p>
</li>
<li>
<p>install React: <code>npm install react react-dom</code></p>
</li>
<li>
<p>create an <code>index.js</code> file with some variant of:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">createRoot</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react-dom/client&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div id=&#34;app&#34;&gt;&lt;/div&gt;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;app&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="err">/h1&gt;);</span>
</span></span></code></pre></div></li>
</ol>
<p>And now here&rsquo;s the code for the <code>Quote</code> component:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Quote</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">[</span><span class="nx">quote</span><span class="p">,</span> <span class="nx">setQuote</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="s2">&#34;Some nice Stoic quote...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">fetchNewQuote</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;/quote&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">newQuote</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setQuote</span><span class="p">(</span><span class="nx">newQuote</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&#34;Error fetching new quote:&#34;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;quote&#34;</span><span class="p">&gt;{</span><span class="nx">quote</span><span class="p">}&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">fetchNewQuote</span><span class="p">}&gt;</span><span class="nx">New</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">Quote</span><span class="p">;</span>
</span></span></code></pre></div><p>That&rsquo;s a LOT of JavaScript code.
The Soy Gods must be smiling upon you, my friend.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I highly recommend that you check out <a href="https://htmx.org"><code>htmx</code></a>,
especially the free <a href="https://htmx.org/#book">Hypermedia systems book</a> which
goes into details and it is way more comprehensive than this short blog post.</p>
<p><code>htmx</code> is a fresh and elegant approach to build simple reactive web pages.
It extends HTML to be able to use all of the capabilities of any JavaScript-based
reactive framework without a single drop of JavaScript.
You just add some new HTML attributes to your HTML elements.</p>
<p>I&rsquo;ve had such joy using <code>htmx</code> lately.
It made me go back into my early teens, when I was doing HTML pages in
<a href="https://en.wikipedia.org/wiki/GeoCities">GeoCities</a>.
Good times, no JavaScript-bloated code.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>you can find the source code at
<a href="https://github.com/storopoli/stoic-quotes"><code>storopoli/stoic-quotes</code></a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>YES, yes, no YavaScript. Hooray!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><code>htmx</code> can do much more, such as lazy loading, infinite scroll,
or submitting forms without a full page reload, etc.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>actually we also have <a href="https://webassembly.org">WASM</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I&rsquo;ve simplified a bit removing some styling for the purpose of clarity.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>there are some other tools that I use that adhere to the trifecta.
Most notoriously is <a href="https://julialang.org">Julia</a> and
<a href="https://rust-lang.org">Rust</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>What is soydev? And why do I hate it</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-10-2023-11-13-soydev/" />
        <id>https://storopoli.io/2023-11-10-2023-11-13-soydev/</id>
        <published>2023-11-13T00:00:00Z</published>
        <updated>2024-02-11T15:55:02-03:00</updated>
        <summary type="html">Let&amp;rsquo;s dive into the concept of &amp;ldquo;soydev&amp;rdquo;, a term often used pejoratively to describe developers with a superficial understanding of technology. I provide my definition of what soydev is, why is bad, and how it came to be. To counteract soydev inclinations, I propose an abstract approach centered on timeless concepts, protocols, and first principles, fostering a mindset of exploration, resilience in the face of failure, and an insatiable hunger for knowledge.</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="soydev.jpg" alt="soydev meme"  />
</p>
<p>Let&rsquo;s dive into the <strong>concept of &ldquo;soydev&rdquo;</strong>,
a term often used pejoratively to describe developers with
a superficial understanding of technology.
I provide my definition of what soydev is,
why is bad, and how it came to be.
To counteract soydev inclinations,
I propose an abstract approach centered on timeless concepts, protocols,
and first principles, fostering a mindset of exploration,
resilience in the face of failure, and an insatiable hunger for knowledge.</p>
<p>While we&rsquo;ll start with a look at the soydev stereotype,
our journey will lead us to a wider reflection on the importance of depth in
technological understanding.</p>
<h2 id="definition">Definition</h2>
<p>First, let&rsquo;s tackle the definition of <em>soydev</em>.
<a href="https://www.urbandictionary.com/define.php?term=Soydev">Urban Dictionary</a>
provides two interesting definitions:</p>
<p>Urban Dictionary definition 1:</p>
<blockquote>
<p>Soydev is a &ldquo;programmer&rdquo; that works at a bigh tech company and
only knows JavaScript and HTML.
They love IDEs like Visual Studio Code and inefficient frameworks
that slow their code down.
They represent the majority of &ldquo;programmers&rdquo; today and
if their numbers continue growing,
not one person on earth will know how a computer works by the year 2050
when all the gigachad 1980s C and Unix programmers are gone.</p>
</blockquote>
<p>Urban Dictionary definition 2:</p>
<blockquote>
<p>Soydev is a type of most abundant Software Developer.
The Software he/she makes is always inefficient and
uses more CPU and RAM than it should.
This person always prefers hard work to smart work,
Has little or no knowledge of existing solutions of a problem,
Comes up with very complex solution for a simple problem and
has fear of native and fast programming languages like C, C++ and Rust</p>
</blockquote>
<p>These definitions give a glimpse of what a soydev is.
However, they are loaded with pejorative language,
and also are based on non-timeless technologies and tools.
I, much prefer to rely on concepts and principles that are timeless.
Hence, I will provide my own definition of soydev:</p>
<p><strong>Soydev is someone who only has a superficial conception of technology
and computers that is restricted to repeating patterns learned
from popular workflows on the internet;
but who doesn&rsquo;t dedicate time or effort to learning concepts in a deeper way.</strong></p>
<p>Although soydev is a term with specific connotations,
it opens the door to a larger conversation about the depth of our engagement
with technology.
This superficiality is not unique to soydevs
but is a symptom of a broader trend in our relationship with technology.</p>
<p>Most of us start our journey in a skill by having the superficial conception of it.
However, some are not satisfied with this superficial conception,
and strive to understand what lies beyond the surface.</p>
<p>Understanding concepts from first principles allows us to achieve a deep graceful
kind of mastery that when seems almost effortless to others.
Deep down lies a lot of effort and time spent in learning and practicing.
Innumerable hours of deep thinking and reflecting on
why things are the way they are, and how they could be different if you
tried to implement them from scratch yourself.</p>
<p>There is also an inherently rare mixture of curiosity and creativity in the
process of profoundly learning and understanding concepts in this way.
You start not only to ask the &ldquo;Why?&rdquo; questions but also the &ldquo;What if?&rdquo; questions.
I feel that this posture on understanding concepts paves the way for joyful mastery.</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Feynman">Richard Feynman</a>
once said &ldquo;What I cannot create, I do not understand&rdquo;.
You cannot create anything that you don&rsquo;t know the underlying concepts.
Therefore, by allying creativity and discovery with deep knowledge,
Feynman&rsquo;s argument was that in order for you truly master something,
you&rsquo;ll need to be able to recreate it from scratch.</p>
<p>If you are struggling with my abstractions, I can provide some concrete examples.
A soydev might be someone who:</p>
<ol>
<li>Instead of using a simple text editor like vim/emacs/nano,
prefers a totally bloated IDE like VSCode to write even basic things in plaintext.
Or cannot SSH into a remote server without a GUI.</li>
<li>Instead of choosing a native solution like HTML for a simple web page section,
prefers to overengineer with a JavaScript framework that has a lot of dependencies,
and takes 3 seconds to render in the browser.</li>
<li>Prefers to use black box abstractions instead of learning about basic tech
primitives and protocols that would get the job done.</li>
<li>Has no idea what about most concepts that are at the core of computing like
bit, byte, heap, stack, garbage collector, async, parallel, CPU cycles,
cache miss, L1/L2/L3 cache etc.</li>
<li>Don&rsquo;t understand the math, or what is going on under the hood when
using machine learning libraries.</li>
</ol>
<h2 id="why-soydev-is-bad">Why soydev is bad</h2>
<p>First, let&rsquo;s understand that being a soydev is not necessarily bad,
but is highly limited on his ability and curiosity.
A soydev will never be able to achieve the same level of mastery
as someone who is willing to go deep and learn concepts from first principles.</p>
<p>Now, on the other hand,
soydev is bad because it perpetuates a mindset of superficiality.
The path of technology innovation is guided by curiosity and creativity.
And paved with hard work and deep understanding.
Imagine if all the great minds in technology took the easy path of mindless
tooling and problem-solving?
We would be in a stagnant and infertile scenario,
where everyone would use the same technology and tools without
questioning or thinking about the problems that they are trying to solve.</p>
<p>Hence, the culture of soydev is bad for the future of technology,
where most new developers will be highly limited in their ability to innovate.</p>
<h2 id="why-soydev-is-on-the-rise">Why soydev is on the rise</h2>
<p>I think that soydev culture is highly correlated with
the increase of technology and
decrease of barriers to access such technology.
We live in an age that not only technology is everywhere,
but also to interact with it is quite effortless.</p>
<p>My computational statistician mind is always aware of cognitive
and statistical bias.
Whenever I see a correlation across time,
I always take a step back and try to think about the assumptions
and conceptual models behind it.</p>
<p>Does the increase in technology usage and importance in daily life
results in more people using technology from a professional point-of-view?
Yes.
Does the increase in people professionally using technology
results in an increase of tooling and conceptual abstractions
that allows superficial interactions without need to deeply understand
the concepts behind such technology?
I do think that this is true as well.</p>
<p>These assumptions cover the constituents of the rise of soydev
from a &ldquo;demand&rdquo; viewpoint.
Nevertheless, there is also the analogous &ldquo;supply&rdquo; viewpoint.
If these trends in demand are not met by trends in supply,
we would not see the establishment of the soydev phenomenon.
There is an emerging trend to standardize all the available tech
into commodities.</p>
<p>While commoditization of technological solutions has inherent advantages,
such as scalability and lower opportunity costs,
it has some disadvantages.
The main disadvantage is the abrupt decrease of technological innovations.
If we have strong standardization that are enforced by market and social forces,
then why care to innovate?
Why bring new solutions or new ways to solve problems if it will not be adopted
and are doomed to oblivion?
Why decide to try to do things different if there is such a high maintenance
cost, especially when training and expanding human resources capable of
dealing with such non-standard solutions?</p>
<p>In this context, technological innovation can only be undertaken
by big corporations that, not only have big budgets,
but also big influence to push its innovations as industry standards.</p>
<p>Don&rsquo;t get me wrong: I do think that industry standards are important.
However, I much prefer a protocol standard than product standards.
First, protocol standards are generally not tied to a single company or brand.
Second, protocol standards have a higher propensity to expose its underlying
concepts to developers.
Think about TCP/IP versus your favorite front-end framework:
Which one would result in deeper understanding of the underlying concepts?</p>
<p>The rise of soydevs mirrors a societal shift towards immediate gratification and
away from the pursuit of deep knowledge.</p>
<h2 id="how-to-stop-being-a-soydev">How to stop being a soydev</h2>
<p>Despite these unstoppable trends I do think that it is possible to use
tools and shallow abstractions without being a soydev.
Or, to stop being a soydev and advance towards deep understanding
of what constitutes your craft.
Moving beyond the &lsquo;soydev&rsquo; mindset is about embracing the richness that
comes from a deep understanding of technology.
Here is a short, not by any means exhaustive list of things that you can start doing:</p>
<ol>
<li><strong>Stop thinking about what is latest and greatest</strong>.
The tools are not important as the problems they are solving.
Understand what is the need that the tool tries to address,
and the major concepts on how it works.</li>
<li><strong>Focus on concepts, protocols and first principles</strong>.
Forget about frameworks, languages, editors, apps, etc.
Focus on what probably won&rsquo;t change in the next decade in technology.
It is easy (and less uncertain) to think concepts and problems,
than in tools and solutions.</li>
<li><strong>Set aside some weekly time to explore new ideas</strong>.
Time block it, make it a calendar event.
Try to find a time slot that you can be free of distraction and worries.
Free all of your working memory when you are starting a &ldquo;new idea&rdquo; session.
Think about what problem is this idea trying to solve.
Also don&rsquo;t be stuck to just using the &ldquo;problem-solving&rdquo; lens.
Most concepts that are worth knowing in computer science and programming
don&rsquo;t have a clear problem tied to them.</li>
<li><strong>Tinker. Play around</strong>. Break something down and see if you can build from scratch.
Remember Feynman&rsquo;s &ldquo;What I cannot create, I do not understand&rdquo;.</li>
<li><strong>Failure is almost certain</strong>. Yes, you will definitely fail.
I say to a lot of junior devs, interns, and students that the only advantage
that I have compared to them is that I&rsquo;ve failed more times that they have tried.</li>
<li><strong>Stay curious and hungry for knowledge</strong>.
I am always impressed on how children are so curious.
I feel sad that almost no one retains their childhood curiosity as an adult
(Maybe that&rsquo;s why I love to interact with children).
Also, I am amazed by how deprived of will to learn some are.
That is an idea that for me, it is hard to grasp,
since I feel the exactly opposite.
Often I have to hold myself not diving into certain areas, ideas or concepts
because I cannot afford the time to learn them.
However, I am always tempted by them.</li>
</ol>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
]]></content>
      </entry>

</feed>


