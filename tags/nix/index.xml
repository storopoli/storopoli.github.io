<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nix on Jose Storopoli, PhD</title>
  <link rel="alternate" href="https://storopoli.io/tags/nix/" />
  <link rel="self" href="https://storopoli.io/tags/nix/index.xml" />
  <subtitle>Recent content in Nix on Jose Storopoli, PhD</subtitle>
  <id>https://storopoli.io/tags/nix/</id>
  <generator uri="http://gohugo.io" version="0.134.3">Hugo</generator>
  <language>en-us</language>
  <updated>2024-03-23T14:00:16-03:00</updated>
  <author>
    <name>Jose Storopoli</name>
    
  </author>
  <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights>
      <entry>
        <title>Sherlock Holmes Final Letter: A Simple Dead Man&#39;s Switch in Rust</title>
        <link rel="alternate" href="https://storopoli.io/2024-03-23-dead-man-switch/" />
        <id>https://storopoli.io/2024-03-23-dead-man-switch/</id>
        <published>2024-03-23T14:00:16-03:00</published>
        <updated>2024-09-08T19:00:51-03:00</updated>
        <summary type="html">&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;the_final_problem.png#center&#34;
         alt=&#34;Sherlock Holmes fights Moriarty at the Reichenbach Falls&#34; width=&#34;300&#34;/&gt; &lt;figcaption&gt;
            Sherlock Holmes fights Moriarty at the Reichenbach Falls
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Got state secrets? Or maybe 50 BTC?
Don&amp;rsquo;t trust your government or lawyers?
And you want to make sure that if you die, your secrets are passed on?
Don&amp;rsquo;t worry, I got you covered.
In this post,
I&amp;rsquo;ll introduce you to a &lt;strong&gt;simple no-bullshit dead man&amp;rsquo;s switch&lt;/strong&gt; written in Rust.&lt;/p&gt;
&lt;h2 id=&#34;dead-mans-switch&#34;&gt;Dead Man&amp;rsquo;s Switch&lt;/h2&gt;
&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Dead_man%27s_switch&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;</summary>
          <content type="html"><![CDATA[<figure>
    <img loading="lazy" src="the_final_problem.png#center"
         alt="Sherlock Holmes fights Moriarty at the Reichenbach Falls" width="300"/> <figcaption>
            Sherlock Holmes fights Moriarty at the Reichenbach Falls
        </figcaption>
</figure>

<p>Got state secrets? Or maybe 50 BTC?
Don&rsquo;t trust your government or lawyers?
And you want to make sure that if you die, your secrets are passed on?
Don&rsquo;t worry, I got you covered.
In this post,
I&rsquo;ll introduce you to a <strong>simple no-bullshit dead man&rsquo;s switch</strong> written in Rust.</p>
<h2 id="dead-mans-switch">Dead Man&rsquo;s Switch</h2>
<p>According to <a href="https://en.wikipedia.org/wiki/Dead_man%27s_switch">Wikipedia</a>:</p>
<blockquote>
<p>A <strong>dead man&rsquo;s switch</strong> is a switch that is designed to be <strong>activated or
deactivated if the human operator becomes incapacitated</strong>, such as through death,
loss of consciousness, or being bodily removed from control.
Originally applied to switches on a vehicle or machine,
it has since come to be used to describe other intangible uses,
as in <strong>computer software</strong>.</p>
</blockquote>
<p>A Dead Man&rsquo;s Switch (DMS) can be handy and common scenarios might be:</p>
<ul>
<li><strong>Password to your encrypted files</strong>: You gave a trusted person an encrypted
USB drive and the DMS sends the password to decrypt it.</li>
<li><strong>Bitcoin Multisig</strong>: Sending 1 of 3 keys to a trusted person.
You hold 1 key, your friend holds another key, and the DMS holds the last key.</li>
<li><strong>Instructions</strong>: Sending instructions on how to access something of value or
importance.</li>
<li><strong>Goodbye Note</strong>: Sending a goodbye note to loved ones.</li>
</ul>
<p>A DMS is specially useful when you don&rsquo;t trust the government or lawyers to
handle your affairs after you die.
It&rsquo;s also useful when you don&rsquo;t want to disclose your secrets while you are alive.</p>
<p>The idea is simple:</p>
<ol>
<li><strong>You set up a DMS</strong>.</li>
<li><strong>You need to check in periodically</strong>.</li>
<li><strong>If you don&rsquo;t check in, the DMS is triggered</strong>.</li>
</ol>
<p>In this post opening picture, is depicted an image from Conan Doyle&rsquo;s story
<a href="https://en.wikipedia.org/wiki/The_Final_Problem">The Final Problem</a>,
where Sherlock Holmes fights Moriarty at the Reichenbach Falls.
Eventually, both fall to their deaths.
I am pretty confident that Sherlock Holmes had a DMS in place to send Watson
a message.</p>
<p>I&rsquo;ve tried finding nice implementations of DMS, but to no avail.
They all were either unmaintained or plaged with spaghetti code.
My inspiration to build one came from two sources.
First, a friend of mine told me that he is using a bunch of badly-written
shell scripts with some cron jobs to manage his DMS.
Second, there might be a genuine need for a simple DMS in the privacy community.
For example, <a href="https://finalmessage.io">finalmessage.io</a>,
despite being closed source, and you have no idea who&rsquo;s behind it,
has gathered enough users in a subscription model and they are not accepting new
users anymore.
If people are paying for this, they can pay for a Linux server somewhere.
But they would need a simple DMS to run on it.</p>
<h2 id="how-to-use-it">How to Use It</h2>
<blockquote>
<p><strong>Disclaimer</strong>: Use at your own risk. Check the f****(as in <em>friendly</em>) code.</p>
</blockquote>
<p>I invite you to check out the code on GitHub at
<a href="https://github.com/storopoli/dead-man-switch"><code>storopoli/dead-man-switch</code></a>.
The license is <a href="https://www.gnu.org/licenses/agpl-3.0.html">AGPL-3.0</a>,
which means you can use it for free as long as you share your code.
The package is also available on <a href="https://crates.io/crates/dead-man-switch">crates.io</a>,
Rust&rsquo;s package manager.</p>
<p>DMS is very easy to use and deploy.
There are several alternatives on how to deploy it.
Here are the two easiest ways:</p>
<ol>
<li>
<p><strong>Building from Source</strong>:</p>
<ol>
<li>
<p>In a fresh Debian/Ubuntu server install the following dependencies:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install -y cargo pkg-config libssl-dev
</span></span></code></pre></div></li>
<li>
<p>Install the DMS:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cargo install dead-man-switch-tui
</span></span></code></pre></div></li>
<li>
<p>Run the app with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dead-man-switch-tui
</span></span></code></pre></div></li>
</ol>
</li>
<li>
<p><strong>Using Nix</strong>. This is the easiest just do
<code>nix run github:storopoli/dead-man-switch</code>.</p>
</li>
</ol>
<blockquote>
<p><strong>Note</strong>: I&rsquo;ve also released a Web Interface for the dead-man-switch.
You can easily deploy it using Docker or Docker Compose.
Check out the <a href="https://github.com/storopoli/dead-man-switch">GitHub repository</a>.</p>
<p>I&rsquo;ve also launched a <a href="https://start9.com">StartOS</a> app with a simple interface
for configuring and checking in with the Dead Man&rsquo;s Switch.
Check out the instructions on the
<a href="https://github.com/storopoli/dead-man-switch-startos"><code>dead-man-switch-startos</code> repository</a>.</p>
</blockquote>
<p>Once, you successfully run the app, you will see the following output:</p>
<figure>
    <img loading="lazy" src="app_first_run.png#center"
         alt="Initial Screen of Dead Man&#39;s Switch" width="800"/> <figcaption>
            Initial Screen of Dead Man&#39;s Switch
        </figcaption>
</figure>

<p>If you read the instructions carefully, all you need to know is detailed in
these 3 steps:</p>
<ol>
<li>Edit the Config at <code>/root/.config/deadman/config.toml</code> and modify the settings.</li>
<li>Check-In with <code>c</code> within the warning time.</li>
<li>Otherwise the Dead Man&rsquo;s Switch will be triggered and the message with
optional attachment will be sent.</li>
</ol>
<p>Upon the first run, the app will create a configuration file at an OS-agnostic
config file location:</p>
<ul>
<li>Linux: <code>$XDG_CONFIG_HOME</code>, i.e. <code>$HOME/.config|/home/alice/.config</code></li>
<li>macOS: <code>$HOME/Library/Application Support</code>, i.e. <code>/Users/Alice/Library/Application Support</code></li>
<li>Windows: <code>{FOLDERID_RoamingAppData}</code>, i.e. <code>C:\Users\Alice\AppData\Roaming</code></li>
</ul>
<p>In this example, I am running it from a Debian server as the <code>root</code> user.
Hence, the configuration file is at <code>/root/.config/deadman/config.toml</code>.</p>
<p>If you open the configuration file, you will see the following content.
I&rsquo;ve added some default values for inspiration<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">username</span> <span class="p">=</span> <span class="s2">&#34;me@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">password</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">smtp_server</span> <span class="p">=</span> <span class="s2">&#34;smtp.example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">smtp_port</span> <span class="p">=</span> <span class="mi">587</span>
</span></span><span class="line"><span class="cl"><span class="nx">message</span> <span class="p">=</span> <span class="s2">&#34;I&#39;m probably dead, go to Central Park NY under bench #137 you&#39;ll find an age-encrypted drive. Password is our favorite music in Pascal case.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">message_warning</span> <span class="p">=</span> <span class="s2">&#34;Hey, you haven&#39;t checked in for a while. Are you okay?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">subject</span> <span class="p">=</span> <span class="s2">&#34;[URGENT] Something Happened to Me!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">subject_warning</span> <span class="p">=</span> <span class="s2">&#34;[URGENT] You need to check in!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">to</span> <span class="p">=</span> <span class="s2">&#34;someone@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">from</span> <span class="p">=</span> <span class="s2">&#34;me@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">timer_warning</span> <span class="p">=</span> <span class="mi">1209600</span>
</span></span><span class="line"><span class="cl"><span class="nx">timer_dead_man</span> <span class="p">=</span> <span class="mi">604800</span>
</span></span></code></pre></div><p>The configs are self-explanatory.
You might need some help to set up and find a reliable SMTP server.
One option is to use Gmail.
Unfortunately, Proton or Tutanota are not supported because they don&rsquo;t support
SMTP.
Just grab the support page of your email provider and search for SMTP settings.
Plug the values in and you are good to go.</p>
<p>I want to bring your attention to the <strong><code>timer_warning</code></strong> and <strong><code>timer_dead_man</code></strong>
configs.
These are very important.</p>
<p>The way DMS works is by <strong>checking in periodically</strong>.
If you <strong><em>don&rsquo;t</em> check in within the <code>timer_warning</code> time,
the DMS will send a warning message to your own email</strong>, i.e. the <code>from</code> email declared in
the config, with the message <code>message_warning</code>
and subject <code>subject_warning</code>.</p>
<p>If you <strong><em>still don&rsquo;t check in</em> within the <code>timer_dead_man</code> time,
the DMS will send the &ldquo;Dead Man&rsquo;s&rdquo; message to the <code>to</code> email declared in the
config</strong>,
with the message <code>message</code> and subject <code>subject</code>.</p>
<p>The timers are in <strong>seconds</strong>, and the <strong>default values</strong> are:</p>
<ul>
<li><strong>Warning Timer</strong>: 2 weeks</li>
<li><strong>Dead Man&rsquo;s Timer</strong>: 1 week</li>
</ul>
<p>Feel free to change these values to your liking.</p>
<p>You can also add an attachment to the Dead Man&rsquo;s Message.
Just add an <code>attachment</code> field to the config file with the <em>absolute</em> path
to the file.
For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">attachment</span> <span class="p">=</span> <span class="s2">&#34;/root/important_file.txt&#34;</span>
</span></span></code></pre></div><p>A good idea is to make this file encrypted.
Actually, it&rsquo;s even better if you encrypted the whole fucking thing.
You can use <a href="https://gnupg.org/">PGP</a> or <a href="https://age-encryption.org"><code>age</code></a>.
For example, this is a PGP-encrypted message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">-----BEGIN PGP MESSAGE-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jA0ECQMKDpTufzWBF+//0ukBT/vslTBHGlMeri/cqpkxO2X7ZY1SYwiYwDqvdFAV
</span></span><span class="line"><span class="cl">FGzPHUaGh8tQiuoh7tj0HJEIqBaktJoDNe3XsszFVSp3eQAAiWUh+t/5pTIcQhW9
</span></span><span class="line"><span class="cl">iKJHPUKGhqf9vg0Q4LS0F1RMhLejoeXt/TvtHfsHE+kymbvp8p5gNiwoyugEZlta
</span></span><span class="line"><span class="cl">qLd0ZJvMDg5c0/Qw81+e6jW0ApwcT7MVf/Y0dFKW1epsA1QfGH5rQYUWPJDP+SZR
</span></span><span class="line"><span class="cl">hBd5034eKNKTUZYwAAoR0UJ6eqcnev9z9sTuct3uGPeXnNqK0zDKaP3rV/9hnVPN
</span></span><span class="line"><span class="cl">3gwEQEWL2Dl39pjv+x+QdViCirlrjPa0BaHzwveid2N8Ik3QBsxKGkyAXd0w3G+g
</span></span><span class="line"><span class="cl">VAGwKDLUkXUIDytk/PI8vRGLUhSmyG29KdeGdEiKde+DG5MUtjC4UyFCWxa5ZX5y
</span></span><span class="line"><span class="cl">WNEg7049bd5Nx3B5WlFmKyWbsHynoziDJU2aq2uvaBLYA48roDN/0sEUsuGFpxm3
</span></span><span class="line"><span class="cl">0/3vd0kGxMt20HlsVpDRQz75mWJEmzxY2itRJbR84bEyN0ItWE9G5WwQ4mjmU+XL
</span></span><span class="line"><span class="cl">0xYazglNYoAG0FXCxD6EpbDbQZxO/OKIaGWI4d2Zs1zcwbcEfZnhsKB5kI4tYJZ2
</span></span><span class="line"><span class="cl">ZTq+Q4xY4sFEoYzmNQbHY+mpgskgmHbRdBAGea+raiAXK/wL4Qc9x1bDdNIKNBup
</span></span><span class="line"><span class="cl">lsCRA1Dj/5s0Qy64d2cbfWvCvx3R9B0JsHTcFq4DBELSOzSyzC/mpCXCAi9K/jE5
</span></span><span class="line"><span class="cl">5VAnsnqaTZm+DVpciMTRxuRPD50MDYogTA/N+Jer9WmQOgc0e1VrWsho2CgX0Z8I
</span></span><span class="line"><span class="cl">ycF56Wm+lBjTGRMLXexA1Ietm88wg/OrY6BE57xpBMVemRc0P0A2g0KC1WkX8J3I
</span></span><span class="line"><span class="cl">fw5IKoiGsd9mvuHNxJ40Rm14iTYV0z9t97GFTmWji5BZtKoQ8vNmy8skgEgEUuHS
</span></span><span class="line"><span class="cl">LtwCU8D5XsHQY2EWsQv23KPyxpbdvl7vGP75xCzRqcWmeCMSyH1qYPsO87sPJ4eL
</span></span><span class="line"><span class="cl">Z4ywlr9ULagMgNMK/KO7F45yJRCqGKCaYB3cpcEpgUIIlZRCiXZSUifb/0EMWNAb
</span></span><span class="line"><span class="cl">DzV/otFp8aMrhwGxIEYv1wOmot9OrBRVgLVSNTU9EtJVzISEowbhe+7ZP1jUaAaW
</span></span><span class="line"><span class="cl">WrjvDA==
</span></span><span class="line"><span class="cl">=cfGG
</span></span><span class="line"><span class="cl">-----END PGP MESSAGE-----
</span></span></code></pre></div><p>In this message there&rsquo;s a nice Easter Egg for you, my friend.
The password is the name of the waterfall depicted in this post,
all together and in PascalCase.</p>
<p>Upon checking in, the timer will be reset to the Warning Timer,
even if you are already in the Dead Man&rsquo;s Timer.</p>
<p>If both timers run out, the messages will be sent and DMS will exit.</p>
<h2 id="the-implementation-details">The Implementation Details</h2>
<blockquote>
<p>For the stupid smelly nerds that want to go beyond the
<a href="https://github.com/sherlock-project/sherlock/issues/2019">&ldquo;JUST MAKE A FUCKING .EXE AND GIVE IT TO ME&rdquo;</a>.</p>
</blockquote>
<p>Before we dive into the code, here are the <strong>dependencies</strong> that I am using.
I&rsquo;ve tried to keep them to a minimum, since I want this to be a dead-simple
program.
This also helps with reducing the incidence of bugs and narrowing the
attack surface:</p>
<ul>
<li><a href="https://ratatui.rs"><code>ratatui</code></a> for the Terminal User Interface (TUI)</li>
<li><a href="https://serde.rs"><code>serde</code></a>, <a href="https://crates.io/crates/toml"><code>toml</code></a>,
and <a href="https://crates.io/crates/directories-next"><code>directories-next</code></a>
for managing the TOML configuration file.</li>
<li><a href="https://lettre.rs"><code>lettre</code></a> to manage email sending,
and <a href="https://crates.io/crates/mime_guess"><code>mime_guess</code></a> to robustly
handle optional attachments.</li>
<li><a href="https://crates.io/crates/chrono"><code>chrono</code></a> to handle timers and date/time
formatting.</li>
</ul>
<blockquote>
<p><strong>Note</strong>: the Dead Man&rsquo;s Switch Web Interface uses <a href="https://github.com/tokio-rs/axum"><code>axum</code></a>,
<a href="https://djc.github.io/askama/"><code>askama</code></a> and <a href="https://github.com/tower-rs/tower"><code>tower</code></a>.</p>
</blockquote>
<p>The app is divided into a library and a binary.
The library is contained in the <code>lib.rs</code> file and the binary in the <code>main.rs</code>,
both under the <code>src/</code> directory.
Here&rsquo;s a representation of the structure of <code>src/</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">src/
</span></span><span class="line"><span class="cl">├── config.rs
</span></span><span class="line"><span class="cl">├── email.rs
</span></span><span class="line"><span class="cl">├── lib.rs
</span></span><span class="line"><span class="cl">├── main.rs
</span></span><span class="line"><span class="cl">├── timer.rs
</span></span><span class="line"><span class="cl">└── tui.rs
</span></span></code></pre></div><p>As we can see, it is divided into 4 modules:</p>
<ul>
<li><strong><code>config.rs</code></strong>: Handles the configuration file.</li>
<li><strong><code>email.rs</code></strong>: Handles the email sending.</li>
<li><strong><code>timer.rs</code></strong>: Handles the timers and timer logic.</li>
<li><strong><code>tui.rs</code></strong>: Handles the Terminal User Interface (TUI).</li>
</ul>
<p>Feel free to dive in any of these files to understand the implementation details.
I&rsquo;ve made sure that the code is <em>both</em> <strong>well-tested</strong> and <strong>well-documented</strong>.</p>
<h2 id="contributions-are-welcome">Contributions are Welcome</h2>
<p>If you want to contribute to the project, feel free to open a pull request.
I&rsquo;ve marked a few issues as <code>good first issue</code> to help you get started.
Check out the <a href="https://github.com/storopoli/dead-man-switch">GitHub repository</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve built a simple no-bullshit Dead Man&rsquo;s Switch so that any person can use it.
Feel free to use it and share it with your friends.
Let&rsquo;s hope that we don&rsquo;t go to a dystopian future where everyone needs to use it.
Although, I am pretty sure that Sherlock Holmes would have used it no matter what.
Probably the way he would have used it is by:</p>
<ol>
<li>Set-up a non-KYC email account that supports SMTP.</li>
<li>Sign-up for a non-KYC VPS with Bitcoin or Monero.</li>
<li>Access the VPS via Tor using Tails.</li>
<li>Change the server&rsquo;s default SSH port to a random one.</li>
<li>Disallow password authentication and only allow key-based authentication.</li>
<li>Encrypt everything in the case the server is seized.</li>
</ol>
<blockquote>
<p><strong>Note</strong>: Sherlock could also use a coreboot non-KYC piece of hardware that
runs StartOS and the newly launched Dead Man&rsquo;s Switch StartOS app that already
uses an onion service for handling the check-ins via Tor.</p>
</blockquote>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Please don&rsquo;t go to bench 137 in Central Park, NY.
That was just an example.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Testing Bayesian Models with Nix and GitHub Actions</title>
        <link rel="alternate" href="https://storopoli.io/2023-12-04-bayesian_models_ci/" />
        <id>https://storopoli.io/2023-12-04-bayesian_models_ci/</id>
        <published>2023-12-04T17:43:03-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;bayesian-models-go-brrrrr.png#center&#34; alt=&#34;bayesian-models-go-brrrrr&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;I have an open access and open source&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; graduate-level course on Bayesian statistics.
It is available in GitHub through the repo &lt;a href=&#34;https://github.com/storopoli/Bayesian-Statistics&#34;&gt;&lt;code&gt;storopoli/Bayesian-Statistics&lt;/code&gt;&lt;/a&gt;.
I&amp;rsquo;ve taught it many times and every time was such a joy.
It is composed of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a set of 300+ slides&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; covering the theoretical part&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mc-stan.org&#34;&gt;Stan&lt;/a&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; models&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://turinglang.org&#34;&gt;Turing.jl&lt;/a&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; models&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now and then I receive emails from someone saying that the materials helped
them to understand Bayesian statistics.
These kind messages really make my day, and that&amp;rsquo;s why I strive to keep
the content up-to-date and relevant.&lt;/p&gt;</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="bayesian-models-go-brrrrr.png#center" alt="bayesian-models-go-brrrrr"  />
</p>
<p>I have an open access and open source<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> graduate-level course on Bayesian statistics.
It is available in GitHub through the repo <a href="https://github.com/storopoli/Bayesian-Statistics"><code>storopoli/Bayesian-Statistics</code></a>.
I&rsquo;ve taught it many times and every time was such a joy.
It is composed of:</p>
<ul>
<li>a set of 300+ slides<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> covering the theoretical part</li>
<li><a href="https://mc-stan.org">Stan</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> models</li>
<li><a href="https://turinglang.org">Turing.jl</a><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> models</li>
</ul>
<p>Now and then I receive emails from someone saying that the materials helped
them to understand Bayesian statistics.
These kind messages really make my day, and that&rsquo;s why I strive to keep
the content up-to-date and relevant.</p>
<p>I decided to make the repository fully reproducible and testable in CI<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> using
<a href="https://nixos.org">Nix</a>
and <a href="https://docs.github.com/en/actions">GitHub actions</a>.</p>
<p>Here&rsquo;s what I am testing on every new change to the main repository
and every new pull request (PR):</p>
<ol>
<li><strong>slides in LaTeX</strong> are built and released as PDF in CI</li>
<li><strong>typos</strong> in content and code are tested</li>
<li><strong>Turing.jl models</strong> are run and tested in CI using the latest version of Julia,
Turing.jl and dependencies</li>
<li><strong>Stan models</strong> are run and test in CI using the latest version of Stan</li>
</ol>
<h2 id="nix">Nix</h2>
<p>All of these tests demand a highly reproducible and intricate development
environment.
That&rsquo;s where <a href="https://nixos.org">Nix</a> comes in.
Nix can be viewed as a package manager, operating system, build tool,
immutable system, and many things.</p>
<p>Nix is purely functional.
Everything is described as an expression/function,
taking some inputs and producing deterministic outputs.
This guarantees reproducible results and makes caching everything easy.
Nix expressions are lazy. Anything described in Nix code will only be executed
if some other expression needs its results.
This is very powerful but somewhat unnatural for developers not familiar
with functional programming.</p>
<p>I enjoy Nix so much that I use it as the operating system and package manager in
all of my computers.
Feel free to check my setup at
<a href="https://github.com/storopoli/flakes"><code>storopoli/flakes</code></a>.</p>
<p>The main essence of the repository setup is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/flake.nix"><code>flake.nix</code> file</a>.
A Flake is a collection of recipes (Nix derivations) that the repository
provides.
From the <a href="https://nixos.wiki/wiki/Flakes">NixOS Wiki article on Flakes</a>:</p>
<blockquote>
<p>Flakes is a feature of managing Nix packages to simplify usability and improve
reproducibility of Nix installations.
Flakes manages dependencies between Nix expressions,
which are the primary protocols for specifying packages.
Flakes implements these protocols in a consistent schema with a common set
of policies for managing packages.</p>
</blockquote>
<p>I use the Nix&rsquo;s Flakes to not only setup the main repository package,
defined in the Flake as just <code>package.default</code>
which is the PDF build of the LaTeX slides,
but also to setup the development environment,
defined in the Flake as the <code>devShell.default</code>,
to run the latest versions of
Stan and Julia/Turing.jl.</p>
<p>We&rsquo;ll go over the Flake file in detail.
However, let me show the full Flake file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;A basic flake with a shell&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">flake-utils</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:numtide/flake-utils&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span><span class="o">.</span><span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:cachix/pre-commit-hooks.nix&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">flake-utils</span><span class="o">,</span> <span class="n">pre-commit-hooks</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flake-utils</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">eachDefaultSystem</span> <span class="p">(</span><span class="n">system</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">let</span>
</span></span><span class="line"><span class="cl">        <span class="n">pkgs</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">legacyPackages</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">tex</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="o">.</span><span class="n">combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">scheme-small</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">latexmk</span> <span class="n">pgf</span> <span class="n">pgfplots</span> <span class="n">tikzsymbols</span> <span class="n">biblatex</span> <span class="n">beamer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">silence</span> <span class="n">appendixnumberbeamer</span> <span class="n">fira</span> <span class="n">fontaxes</span> <span class="n">mwe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">noto</span> <span class="n">csquotes</span> <span class="n">babel</span> <span class="n">helvetic</span> <span class="n">transparent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">xpatch</span> <span class="n">hyphenat</span> <span class="n">wasysym</span> <span class="n">algorithm2e</span> <span class="n">listings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">lstbayes</span> <span class="n">ulem</span> <span class="n">subfigure</span> <span class="n">ifoddpage</span> <span class="n">relsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">adjustbox</span> <span class="n">media9</span> <span class="n">ocgx2</span> <span class="n">biblatex-apa</span> <span class="n">wasy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">julia</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">julia-bin</span><span class="o">.</span><span class="n">overrideDerivation</span> <span class="p">(</span><span class="n">oldAttrs</span><span class="p">:</span> <span class="p">{</span> <span class="n">doInstallCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">in</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">checks</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">pre-commit-check</span> <span class="o">=</span> <span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">src</span> <span class="o">=</span> <span class="sr">./.</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">typos</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">};</span>
</span></span><span class="line"><span class="cl">          <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">            <span class="n">bashInteractive</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># pdfpc # FIXME: broken on darwin</span>
</span></span><span class="line"><span class="cl">            <span class="n">typos</span>
</span></span><span class="line"><span class="cl">            <span class="n">cmdstan</span>
</span></span><span class="line"><span class="cl">            <span class="n">julia</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export JULIA_NUM_THREADS=&#34;auto&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export JULIA_PROJECT=&#34;turing&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export CMDSTAN_HOME=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">cmdstan</span><span class="si">}</span><span class="s1">/opt/cmdstan&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">            </span><span class="si">${</span><span class="n">self</span><span class="o">.</span><span class="n">checks</span><span class="o">.</span><span class="si">${</span><span class="n">system</span><span class="si">}</span><span class="o">.</span><span class="n">pre-commit-check</span><span class="o">.</span><span class="n">shellHook</span><span class="si">}</span><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">packages</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">stdenvNoCC</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;slides&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">src</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">coreutils</span>
</span></span><span class="line"><span class="cl">            <span class="n">tex</span>
</span></span><span class="line"><span class="cl">            <span class="n">gnuplot</span>
</span></span><span class="line"><span class="cl">            <span class="n">biber</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">phases</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;unpackPhase&#34;</span> <span class="s2">&#34;buildPhase&#34;</span> <span class="s2">&#34;installPhase&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">buildPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            export PATH=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">makeBinPath</span> <span class="n">buildInputs</span><span class="si">}</span><span class="s1">&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            cd slides
</span></span></span><span class="line"><span class="cl"><span class="s1">            export HOME=$(pwd)
</span></span></span><span class="line"><span class="cl"><span class="s1">            latexmk -pdflatex -shell-escape slides.tex
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">installPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            mkdir -p $out
</span></span></span><span class="line"><span class="cl"><span class="s1">            cp slides.pdf $out/
</span></span></span><span class="line"><span class="cl"><span class="s1">          &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A flake is composed primarily of <code>inputs</code> and <code>outputs</code>.
As <code>inputs</code> I have:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">flake-utils</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:numtide/flake-utils&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">inputs</span><span class="o">.</span><span class="n">pre-commit-hooks</span><span class="o">.</span><span class="n">url</span> <span class="err">=</span> <span class="s2">&#34;github:cachix/pre-commit-hooks.nix&#34;</span><span class="p">;</span>
</span></span></code></pre></div><ul>
<li><a href="https://github.com/NixOS/nixpkgs"><strong><code>nixpkgs</code></strong></a>
is responsible for providing all of the packages necessary for both
<code>package.default</code> and <code>devShell.default</code>: <code>cmdstan</code>, <code>julia-bin</code>, <code>typos</code>,
and a bunch of <code>texlive</code> LaTeX small packages.</li>
<li><a href="https://github.com/numtide/flake-utils"><strong><code>flake-utils</code></strong></a>
are a bunch of Nix utility functions that creates tons of
syntactic sugar to make the Flake easily accessible in all platforms,
such as macOS and Linux.</li>
<li><a href="https://github.com/cachix/pre-commit-hooks.nix"><strong><code>pre-commit-hooks</code></strong></a>
is a nice Nix utility to create easy
<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hooks</a>
that do some checking at several steps of the git workflow.
The only hook that I am using is the <a href="https://github.com/crate-ci/typos"><code>typos</code></a>
pre-commit hook that checks the whole commit changes for common typos and won&rsquo;t
let you commit successfully if you have typos:
either correct or whitelist them in the <code>_typos.toml</code> file.</li>
</ul>
<p>The <code>outputs</code> are the bulk of the Flake file and it is a Nix function that
takes all the above as inputs and outputs a couple of things:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">outputs</span> <span class="err">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">flake-utils</span><span class="o">,</span> <span class="n">pre-commit-hooks</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flake-utils</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">eachDefaultSystem</span> <span class="p">(</span><span class="n">system</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">checks</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">devShells</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="n">packages</span> <span class="o">=</span> <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="p">});</span>
</span></span></code></pre></div><ul>
<li><code>checks</code> things that are executed/built when you run <code>nix flake check</code></li>
<li><code>devShells</code> things that are executed/built when you run <code>nix develop</code></li>
<li><code>packages</code> things that are executed/built when you run <code>nix build</code></li>
</ul>
<p>Let&rsquo;s go over each one of the outputs that the repository Flake has.</p>
<h3 id="packages----latex-slides"><code>packages</code> &ndash; LaTeX slides</h3>
<p>We all know that LaTeX is a pain to make it work.
If it builds in my machine definitely won&rsquo;t build in yours.
This is solved effortlessly in Nix.
Take a look at the <code>tex</code> variable definition in the <code>let ... in</code> block:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="n">tex</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="o">.</span><span class="n">combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">scheme-small</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">latexmk</span> <span class="n">pgf</span> <span class="n">pgfplots</span> <span class="n">tikzsymbols</span> <span class="n">biblatex</span> <span class="n">beamer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">silence</span> <span class="n">appendixnumberbeamer</span> <span class="n">fira</span> <span class="n">fontaxes</span> <span class="n">mwe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">noto</span> <span class="n">csquotes</span> <span class="n">babel</span> <span class="n">helvetic</span> <span class="n">transparent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">xpatch</span> <span class="n">hyphenat</span> <span class="n">wasysym</span> <span class="n">algorithm2e</span> <span class="n">listings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">lstbayes</span> <span class="n">ulem</span> <span class="n">subfigure</span> <span class="n">ifoddpage</span> <span class="n">relsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">inherit</span> <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">texlive</span><span class="p">)</span> <span class="n">adjustbox</span> <span class="n">media9</span> <span class="n">ocgx2</span> <span class="n">biblatex-apa</span> <span class="n">wasy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span>
</span></span></code></pre></div><p><code>tex</code> is a custom instantiation of the <code>texlive.combine</code> derivation with some
overrides to specify which CTAN packages you need to build the slides.
We use <code>tex</code> in the <code>packages.default</code> Flake <code>output</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">packages</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">stdenvNoCC</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;slides&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">src</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">coreutils</span>
</span></span><span class="line"><span class="cl">    <span class="n">tex</span>
</span></span><span class="line"><span class="cl">    <span class="n">gnuplot</span>
</span></span><span class="line"><span class="cl">    <span class="n">biber</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">phases</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;unpackPhase&#34;</span> <span class="s2">&#34;buildPhase&#34;</span> <span class="s2">&#34;installPhase&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    export PATH=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">makeBinPath</span> <span class="n">buildInputs</span><span class="si">}</span><span class="s1">&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">    cd slides
</span></span></span><span class="line"><span class="cl"><span class="s1">    export HOME=$(pwd)
</span></span></span><span class="line"><span class="cl"><span class="s1">    latexmk -pdflatex -shell-escape slides.tex
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">installPhase</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    mkdir -p $out
</span></span></span><span class="line"><span class="cl"><span class="s1">    cp slides.pdf $out/
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Here we are declaring a Nix derivation with the <code>stdenvNoCC.mkDerivation</code>,
the <code>NoCC</code> part means that we don&rsquo;t need C/C++ build tools.
The <code>src</code> is the Flake repository itself and I also specify the dependencies
in <code>buildInputs</code>: I still need some fancy stuff to build my slides.
Finally, I specify the several <code>phases</code> of the derivation.
The most important part is that I <code>cd</code> into the <code>slides/</code> directory
and run <code>latexmk</code> in it, and copy the resulting PDF to the <code>$out</code> Nix
special directory which serves as the output directory for the derivation.</p>
<p>This is really nice because anyone with Nix installed can run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nix build github:storopoli/Bayesian-Statistics
</span></span></code></pre></div><p>and bingo! You have my slides as PDF built from LaTeX files without having to
clone or download the repository.
Fully reproducible in any machine or architecture.</p>
<p>The next step is to configure GitHub actions to run Nix and build the slides'
PDF file in CI.
I have two workflows for that and they are almost identical except for the
last step.
The first one is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/build-slides.yml"><code>build-slides.yml</code></a>,
which, of course, builds the slides.
These are the relevant parts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Slides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Nix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">DeterminateSystems/nix-installer-action@v8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Slides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">nix build -L</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Copy result out of nix store</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">cp -v result/slides.pdf slides.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload Artifacts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./slides.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">if-no-files-found</span><span class="p">:</span><span class="w"> </span><span class="l">error</span><span class="w">
</span></span></span></code></pre></div><p>Here we use a set of actions to:</p>
<ol>
<li>install Nix</li>
<li>build the slides&rsquo; PDF file using <code>nix build</code>
(the <code>-L</code> flag is to have more verbose logs)</li>
<li>upload the built slides&rsquo; PDF file as an artifact of the CI run.
This is useful for inspection and debugging.
There is also the caveat that if the PDF file is not found the whole workflow
should error.</li>
</ol>
<p>The last one is the
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/release-slides.yml"><code>release-slides.yml</code></a>,
which releases the slides when I publish a new tag.
It is almost the same as <code>build-slides.yml</code>, thus I will only highlight the
relevant bits:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">ncipollo/release-action@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">artifacts</span><span class="p">:</span><span class="w"> </span><span class="l">./slides.pdf</span><span class="w">
</span></span></span></code></pre></div><p>The only change is the final step that we now use a <code>release-action</code>
that automatically publishes a release with the slides&rsquo; PDF file as one of the
release artifacts.
This is good since, once I achieve a milestone in the slides,
I can easily tag a new version and have GitHub automatically publish a new
release with the resulting PDF file attached in the release.</p>
<p>This is a very good workflow, both in GitHub but also locally.
I don&rsquo;t need to install tons of gigabytes of texlive stuff to build my slides
locally.
I just run <code>nix build</code>.
Also, if someones contributes to the slides I don&rsquo;t need to check the correctness
of the LaTeX code, only the content and the output PDF artifact in the
resulting CI from the PR.
If it&rsquo;s all good, just thank the blessed soul and merge it!</p>
<h3 id="turingjl-models">Turing.jl Models</h3>
<p>The repository has a directory called <code>turing/</code> which is a Julia project with
<code>.jl</code> files and a <code>Project.toml</code> that lists the Julia dependencies and
appropriate <code>compat</code> bounds.
In order to test the Turing.jl models in the Julia files,
I have the following things in the Nix Flake <code>devShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="n">julia</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">julia-bin</span><span class="o">.</span><span class="n">overrideDerivation</span> <span class="p">(</span><span class="n">oldAttrs</span><span class="p">:</span> <span class="p">{</span> <span class="n">doInstallCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">julia</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">    export JULIA_NUM_THREADS=&#34;auto&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    export JULIA_PROJECT=&#34;turing&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Nix <code>devShell</code> lets you create a development environment by adding a
transparent layer on top of your standard shell environment with additional
packages, hooks, and environment variables.
First, in the <code>let ... in</code> block, I am defining a variable called <code>julia</code>
that is the <code>julia-bin</code> package with an attribute <code>doInstallCheck</code>
being overridden to <code>false</code>.
I don&rsquo;t want the Nix derivation of the <code>mkShell</code> to run all Julia standard tests.
Next, I define some environment variables in the <code>shellHook</code>,
which, as the name implies, runs every time that I instantiate the default
<code>devShell</code> with <code>nix develop</code>.</p>
<p>With the Nix Flake part covered, let&rsquo;s check how we wrap everything in a
GitHub action workflow file named
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/models.yml"><code>models.yml</code></a>.
Again, I will only highlight the relevant parts for the Turing.jl model testing
CI job:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-turing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test Turing Models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matrix</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">jl-file</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s2">&#34;01-predictive_checks.jl&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s2">&#34;13-model_comparison-roaches.jl&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test ${{ matrix.jl-file }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;julia -e &#39;using Pkg; Pkg.instantiate()&#39;&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;julia turing/${{ matrix.jl-file }}&#34;</span><span class="w">          
</span></span></span></code></pre></div><p>I list all the Turing.jl model Julia files in a <code>matrix.jl-file</code> list
to
<a href="https://docs.github.com/actions/using-jobs/using-a-matrix-for-your-jobs">define variations for each job</a>.
Next, we install the latest Julia version.
Finally, we run everything in parallel using the YAML string interpolation
<code>${{ matrix.jl-file }}</code>.
This expands the expression into <code>N</code> parallel jobs,
where <code>N</code> is the <code>jl-file</code> list length.</p>
<p>If any of these parallel jobs error out, then the whole workflow will error.
Hence, we are always certain that the models are up-to-date with the latest Julia
version in <code>nixpkgs</code>, and the latest Turing.jl dependencies.</p>
<h3 id="stan-models">Stan Models</h3>
<p>The repository has a directory called <code>stan/</code> that holds a bunch of Stan models
in <code>.stan</code> files.
These models can be used with any Stan interface,
such as
<a href="https://mc-stan.org/rstan"><code>RStan</code></a>/<a href="https://mc-stan.org/cmdstanr"><code>CmdStanR</code></a>,
<a href="https://pystan.readthedocs.org/en/latest/"><code>PyStan</code></a>/<a href="https://mc-stan.org/cmdstanpy"><code>CmdStanPy</code></a>,
or <a href="https://github.com/goedman/Stan.jl"><code>Stan.jl</code></a>.
However I am using <a href="https://mc-stan.org/docs/cmdstan-guide/index.html"><code>CmdStan</code></a>
which only needs a shell environment and Stan, no additional dependencies
like Python, R, or Julia.
Additionally, <code>nixpkgs</code> has a
<a href="https://search.nixos.org/packages?query=cmdstan"><code>cmdstan</code></a>
package that is well-maintained and up-to-date with the latest Stan release.</p>
<p>In order to test the Stan models,
I have the following setup in the Nix Flake <code>devShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">devShells</span><span class="o">.</span><span class="n">default</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmdstan</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">    export CMDSTAN_HOME=&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">cmdstan</span><span class="si">}</span><span class="s1">/opt/cmdstan&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    # ...
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Here I am also defining an environment variable in the <code>shellHook</code>,
<code>CMDSTAN_HOME</code> because that is useful for local development.</p>
<p>In the same GitHub action workflow
<a href="https://github.com/storopoli/Bayesian-Statistics/blob/main/.github/workflows/models.yml"><code>models.yml</code></a>
file is defined the Stan model testing CI job:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-stan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test Stan Models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matrix</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">stan</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">model</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;01-predictive_checks-posterior&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;coin_flip.data.json&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">model</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;13-model_comparison-zero_inflated-poisson&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;roaches.data.json&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Test ${{ matrix.stan.model }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo &#34;Compiling: ${{ matrix.stan.model }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;stan stan/${{ matrix.stan.model }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          nix develop -L . --command bash -c &#34;stan/${{ matrix.stan.model }} sample data file=stan/${{ matrix.stan.data }}&#34;</span><span class="w">          
</span></span></span></code></pre></div><p>Now I am using a YAML dictionary as the entry for every element in the <code>stan</code>
YAML list with two keys: <code>model</code> and <code>data</code>.
<code>model</code> lists the Stan model file without the <code>.stan</code> extension,
and <code>data</code> lists the JSON data file that the model needs to run.
We&rsquo;ll use both to run parallel jobs to test all the Stan models listed in the
<code>stan</code> list.
For that we use the following commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">nix</span> <span class="n">develop</span> <span class="err">-</span><span class="n">L</span> <span class="o">.</span> <span class="err">--</span><span class="n">command</span> <span class="n">bash</span> <span class="err">-</span><span class="n">c</span> <span class="s2">&#34;stan stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">model</span> <span class="p">}</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">nix</span> <span class="n">develop</span> <span class="err">-</span><span class="n">L</span> <span class="o">.</span> <span class="err">--</span><span class="n">command</span> <span class="n">bash</span> <span class="err">-</span><span class="n">c</span> <span class="s2">&#34;stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">model</span> <span class="p">}</span><span class="si">}</span><span class="s2"> sample data file=stan/</span><span class="si">${</span><span class="p">{</span> <span class="n">matrix</span><span class="o">.</span><span class="n">stan</span><span class="o">.</span><span class="n">data</span> <span class="p">}</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This instantiates the <code>devShell.default</code> shell environment,
and uses the <code>stan</code> binary provided by the <code>cmdstan</code> Nix package to compile the
model into an executable binary.
Next, we run this model executable binary in <code>sample</code> mode while also providing
the corresponding data file with <code>data file=</code>.</p>
<p>As before, if any of these parallel jobs error out, then the whole workflow will
error.
Hence, we are always certain that the models are up-to-date with the latest
Stan/CmdStan version in <code>nixpkgs</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I am quite happy with this setup.
It makes easy to run test in CI with GitHub Actions,
while also being effortless to instantiate a development environment with Nix.
If I want to get a new computer up and running, I don&rsquo;t need to install a bunch
of packages and go over &ldquo;getting started&rdquo; instructions to have all the necessary
dependencies.</p>
<p>This setup also helps onboard new contributors since it is:</p>
<ol>
<li>easy to setup the dependencies necessary to develop and test</li>
<li>trivial to check if contributions won&rsquo;t break anything</li>
</ol>
<p>Speaking of &ldquo;contributors&rdquo;, if you are interested in Bayesian modeling,
feel free to go over the contents of the repository
<a href="https://github.com/storopoli/Bayesian-Statistics"><code>storopoli/Bayesian-Statistics</code></a>.
<strong>Contributions are most welcomed</strong>.
Don&rsquo;t hesitate on opening an issue or pull request.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>the code is MIT-licensed and the content is CreativeCommons
Non-Commercial 4.0&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I am also planning to go over the slides for every lecture
in a YouTube playlist in the near future.
This would make it the experience complete: slides, lectures, and code.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>a probabilistic programming language and suite of MCMC samplers written in C++.
It is today&rsquo;s gold standard in Bayesian stats.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>is an ecosystem of Julia packages for Bayesian inference using probabilistic
programming.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>CI stands for <strong>c</strong>ontinuous <strong>i</strong>ntegration,
sometimes also known as CI/CD, <strong>c</strong>ontinuous <strong>i</strong>ntegration and <strong>c</strong>ontinuous
<strong>d</strong>elivery.
<a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a> is a wide &ldquo;umbrella&rdquo; term
for &ldquo;everything that is tested in all parts of the development cicle&rdquo;,
and these tests commonly take place in a cloud machine.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>

</feed>


