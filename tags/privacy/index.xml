<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Privacy on Jose Storopoli, PhD</title>
  <link rel="alternate" href="https://storopoli.io/tags/privacy/" />
  <link rel="self" href="https://storopoli.io/tags/privacy/index.xml" />
  <subtitle>Recent content in Privacy on Jose Storopoli, PhD</subtitle>
  <id>https://storopoli.io/tags/privacy/</id>
  <generator uri="http://gohugo.io" version="0.133.1">Hugo</generator>
  <language>en-us</language>
  <updated>2024-03-23T14:00:16-03:00</updated>
  <author>
    <name>Jose Storopoli</name>
    
  </author>
  <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights>
      <entry>
        <title>Sherlock Holmes Final Letter: A Simple Dead Man&#39;s Switch in Rust</title>
        <link rel="alternate" href="https://storopoli.io/2024-03-23-dead-man-switch/" />
        <id>https://storopoli.io/2024-03-23-dead-man-switch/</id>
        <published>2024-03-23T14:00:16-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">Sherlock Holmes fights Moriarty at the Reichenbach Falls Got state secrets? Or maybe 50 BTC? Don&amp;rsquo;t trust your government or lawyers? And you want to make sure that if you die, your secrets are passed on? Don&amp;rsquo;t worry, I got you covered. In this post, I&amp;rsquo;ll introduce you to a simple no-bullshit dead man&amp;rsquo;s switch written in Rust.
Dead Man&amp;rsquo;s Switch According to Wikipedia:
A dead man&amp;rsquo;s switch is a switch that is designed to be activated or deactivated if the human operator becomes incapacitated, such as through death, loss of consciousness, or being bodily removed from control.</summary>
          <content type="html"><![CDATA[<figure>
    <img loading="lazy" src="the_final_problem.png#center"
         alt="Sherlock Holmes fights Moriarty at the Reichenbach Falls" width="300"/> <figcaption>
            Sherlock Holmes fights Moriarty at the Reichenbach Falls
        </figcaption>
</figure>

<p>Got state secrets? Or maybe 50 BTC?
Don&rsquo;t trust your government or lawyers?
And you want to make sure that if you die, your secrets are passed on?
Don&rsquo;t worry, I got you covered.
In this post,
I&rsquo;ll introduce you to a <strong>simple no-bullshit dead man&rsquo;s switch</strong> written in Rust.</p>
<h2 id="dead-mans-switch">Dead Man&rsquo;s Switch</h2>
<p>According to <a href="https://en.wikipedia.org/wiki/Dead_man%27s_switch">Wikipedia</a>:</p>
<blockquote>
<p>A <strong>dead man&rsquo;s switch</strong> is a switch that is designed to be <strong>activated or
deactivated if the human operator becomes incapacitated</strong>, such as through death,
loss of consciousness, or being bodily removed from control.
Originally applied to switches on a vehicle or machine,
it has since come to be used to describe other intangible uses,
as in <strong>computer software</strong>.</p>
</blockquote>
<p>A Dead Man&rsquo;s Switch (DMS) can be handy and common scenarios might be:</p>
<ul>
<li><strong>Password to your encrypted files</strong>: You gave a trusted person an encrypted
USB drive and the DMS sends the password to decrypt it.</li>
<li><strong>Bitcoin Multisig</strong>: Sending 1 of 3 keys to a trusted person.
You hold 1 key, your friend holds another key, and the DMS holds the last key.</li>
<li><strong>Instructions</strong>: Sending instructions on how to access something of value or
importance.</li>
<li><strong>Goodbye Note</strong>: Sending a goodbye note to loved ones.</li>
</ul>
<p>A DMS is specially useful when you don&rsquo;t trust the government or lawyers to
handle your affairs after you die.
It&rsquo;s also useful when you don&rsquo;t want to disclose your secrets while you are alive.</p>
<p>The idea is simple:</p>
<ol>
<li><strong>You set up a DMS</strong>.</li>
<li><strong>You need to check in periodically</strong>.</li>
<li><strong>If you don&rsquo;t check in, the DMS is triggered</strong>.</li>
</ol>
<p>In this post opening picture, is depicted an image from Conan Doyle&rsquo;s story
<a href="https://en.wikipedia.org/wiki/The_Final_Problem">The Final Problem</a>,
where Sherlock Holmes fights Moriarty at the Reichenbach Falls.
Eventually, both fall to their deaths.
I am pretty confident that Sherlock Holmes had a DMS in place to send Watson
a message.</p>
<p>I&rsquo;ve tried finding nice implementations of DMS, but to no avail.
They all were either unmaintained or plaged with spaghetti code.
My inspiration to build one came from two sources.
First, a friend of mine told me that he is using a bunch of badly-written
shell scripts with some cron jobs to manage his DMS.
Second, there might be a genuine need for a simple DMS in the privacy community.
For example, <a href="https://finalmessage.io">finalmessage.io</a>,
despite being closed source, and you have no idea who&rsquo;s behind it,
has gathered enough users in a subscription model and they are not accepting new
users anymore.
If people are paying for this, they can pay for a Linux server somewhere.
But they would need a simple DMS to run on it.</p>
<h2 id="how-to-use-it">How to Use It</h2>
<blockquote>
<p><strong>Disclaimer</strong>: Use at your own risk. Check the f****(as in <em>friendly</em>) code.</p>
</blockquote>
<p>I invite you to check out the code on GitHub at
<a href="https://github.com/storopoli/dead-man-switch"><code>storopoli/dead-man-switch</code></a>.
The license is <a href="https://www.gnu.org/licenses/agpl-3.0.html">AGPL-3.0</a>,
which means you can use it for free as long as you share your code.
The package is also available on <a href="https://crates.io/crates/dead-man-switch">crates.io</a>,
Rust&rsquo;s package manager.</p>
<p>DMS is very easy to use and deploy.
I&rsquo;ve made an extra effort to make sure that it builds with Rust version 1.63.0,
which is the current Debian stable Rust version<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
There are several alternatives on how to deploy it.
Here are the two easiest ways:</p>
<ol>
<li>
<p><strong>Building from Source</strong>:</p>
<ol>
<li>
<p>In a fresh Debian/Ubuntu server install the following dependencies:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install -y cargo pkg-config libssl-dev
</span></span></code></pre></div></li>
<li>
<p>Install the DMS:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cargo install dead-man-switch
</span></span></code></pre></div></li>
<li>
<p>Run the app with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dead-man-switch
</span></span></code></pre></div></li>
</ol>
</li>
<li>
<p><strong>Using Nix</strong>. This is the easiest just do
<code>nix run github:storopoli/dead-man-switch</code>.</p>
</li>
</ol>
<p>Once, you successfully run the app, you will see the following output:</p>
<figure>
    <img loading="lazy" src="app_first_run.png#center"
         alt="Initial Screen of Dead Man&#39;s Switch" width="800"/> <figcaption>
            Initial Screen of Dead Man&#39;s Switch
        </figcaption>
</figure>

<p>If you read the instructions carefully, all you need to know is detailed in
these 3 steps:</p>
<ol>
<li>Edit the Config at <code>/root/.config/deadman/config.toml</code> and modify the settings.</li>
<li>Check-In with <code>c</code> within the warning time.</li>
<li>Otherwise the Dead Man&rsquo;s Switch will be triggered and the message with
optional attachment will be sent.</li>
</ol>
<p>Upon the first run, the app will create a configuration file at an OS-agnostic
config file location:</p>
<ul>
<li>Linux: <code>$XDG_CONFIG_HOME</code>, i.e. <code>$HOME/.config|/home/alice/.config</code></li>
<li>macOS: <code>$HOME/Library/Application Support</code>, i.e. <code>/Users/Alice/Library/Application Support</code></li>
<li>Windows: <code>{FOLDERID_RoamingAppData}</code>, i.e. <code>C:\Users\Alice\AppData\Roaming</code></li>
</ul>
<p>In this example, I am running it from a Debian server as the <code>root</code> user.
Hence, the configuration file is at <code>/root/.config/deadman/config.toml</code>.</p>
<p>If you open the configuration file, you will see the following content.
I&rsquo;ve added some default values for inspiration<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">username</span> <span class="p">=</span> <span class="s2">&#34;me@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">password</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">smtp_server</span> <span class="p">=</span> <span class="s2">&#34;smtp.example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">smtp_port</span> <span class="p">=</span> <span class="mi">587</span>
</span></span><span class="line"><span class="cl"><span class="nx">message</span> <span class="p">=</span> <span class="s2">&#34;I&#39;m probably dead, go to Central Park NY under bench #137 you&#39;ll find an age-encrypted drive. Password is our favorite music in Pascal case.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">message_warning</span> <span class="p">=</span> <span class="s2">&#34;Hey, you haven&#39;t checked in for a while. Are you okay?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">subject</span> <span class="p">=</span> <span class="s2">&#34;[URGENT] Something Happened to Me!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">subject_warning</span> <span class="p">=</span> <span class="s2">&#34;[URGENT] You need to check in!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">to</span> <span class="p">=</span> <span class="s2">&#34;someone@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">from</span> <span class="p">=</span> <span class="s2">&#34;me@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">timer_warning</span> <span class="p">=</span> <span class="mi">1209600</span>
</span></span><span class="line"><span class="cl"><span class="nx">timer_dead_man</span> <span class="p">=</span> <span class="mi">604800</span>
</span></span></code></pre></div><p>The configs are self-explanatory.
You might need some help to set up and find a reliable SMTP server.
One option is to use Gmail.
Unfortunately, Proton or Tutanota are not supported because they don&rsquo;t support
SMTP.
Just grab the support page of your email provider and search for SMTP settings.
Plug the values in and you are good to go.</p>
<p>I want to bring your attention to the <strong><code>timer_warning</code></strong> and <strong><code>timer_dead_man</code></strong>
configs.
These are very important.</p>
<p>The way DMS works is by <strong>checking in periodically</strong>.
If you <strong><em>don&rsquo;t</em> check in within the <code>timer_warning</code> time,
the DMS will send a warning message to your own email</strong>, i.e. the <code>from</code> email declared in
the config, with the message <code>message_warning</code>
and subject <code>subject_warning</code>.</p>
<p>If you <strong><em>still don&rsquo;t check in</em> within the <code>timer_dead_man</code> time,
the DMS will send the &ldquo;Dead Man&rsquo;s&rdquo; message to the <code>to</code> email declared in the
config</strong>,
with the message <code>message</code> and subject <code>subject</code>.</p>
<p>The timers are in <strong>seconds</strong>, and the <strong>default values</strong> are:</p>
<ul>
<li><strong>Warning Timer</strong>: 2 weeks</li>
<li><strong>Dead Man&rsquo;s Timer</strong>: 1 week</li>
</ul>
<p>Feel free to change these values to your liking.</p>
<p>You can also add an attachment to the Dead Man&rsquo;s Message.
Just add an <code>attachment</code> field to the config file with the <em>absolute</em> path
to the file.
For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">attachment</span> <span class="p">=</span> <span class="s2">&#34;/root/important_file.txt&#34;</span>
</span></span></code></pre></div><p>A good idea is to make this file encrypted.
Actually, it&rsquo;s even better if you encrypted the whole fucking thing.
You can use <a href="https://gnupg.org/">PGP</a> or <a href="https://age-encryption.org"><code>age</code></a>.
For example, this is a PGP-encrypted message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">-----BEGIN PGP MESSAGE-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jA0ECQMKDpTufzWBF+//0ukBT/vslTBHGlMeri/cqpkxO2X7ZY1SYwiYwDqvdFAV
</span></span><span class="line"><span class="cl">FGzPHUaGh8tQiuoh7tj0HJEIqBaktJoDNe3XsszFVSp3eQAAiWUh+t/5pTIcQhW9
</span></span><span class="line"><span class="cl">iKJHPUKGhqf9vg0Q4LS0F1RMhLejoeXt/TvtHfsHE+kymbvp8p5gNiwoyugEZlta
</span></span><span class="line"><span class="cl">qLd0ZJvMDg5c0/Qw81+e6jW0ApwcT7MVf/Y0dFKW1epsA1QfGH5rQYUWPJDP+SZR
</span></span><span class="line"><span class="cl">hBd5034eKNKTUZYwAAoR0UJ6eqcnev9z9sTuct3uGPeXnNqK0zDKaP3rV/9hnVPN
</span></span><span class="line"><span class="cl">3gwEQEWL2Dl39pjv+x+QdViCirlrjPa0BaHzwveid2N8Ik3QBsxKGkyAXd0w3G+g
</span></span><span class="line"><span class="cl">VAGwKDLUkXUIDytk/PI8vRGLUhSmyG29KdeGdEiKde+DG5MUtjC4UyFCWxa5ZX5y
</span></span><span class="line"><span class="cl">WNEg7049bd5Nx3B5WlFmKyWbsHynoziDJU2aq2uvaBLYA48roDN/0sEUsuGFpxm3
</span></span><span class="line"><span class="cl">0/3vd0kGxMt20HlsVpDRQz75mWJEmzxY2itRJbR84bEyN0ItWE9G5WwQ4mjmU+XL
</span></span><span class="line"><span class="cl">0xYazglNYoAG0FXCxD6EpbDbQZxO/OKIaGWI4d2Zs1zcwbcEfZnhsKB5kI4tYJZ2
</span></span><span class="line"><span class="cl">ZTq+Q4xY4sFEoYzmNQbHY+mpgskgmHbRdBAGea+raiAXK/wL4Qc9x1bDdNIKNBup
</span></span><span class="line"><span class="cl">lsCRA1Dj/5s0Qy64d2cbfWvCvx3R9B0JsHTcFq4DBELSOzSyzC/mpCXCAi9K/jE5
</span></span><span class="line"><span class="cl">5VAnsnqaTZm+DVpciMTRxuRPD50MDYogTA/N+Jer9WmQOgc0e1VrWsho2CgX0Z8I
</span></span><span class="line"><span class="cl">ycF56Wm+lBjTGRMLXexA1Ietm88wg/OrY6BE57xpBMVemRc0P0A2g0KC1WkX8J3I
</span></span><span class="line"><span class="cl">fw5IKoiGsd9mvuHNxJ40Rm14iTYV0z9t97GFTmWji5BZtKoQ8vNmy8skgEgEUuHS
</span></span><span class="line"><span class="cl">LtwCU8D5XsHQY2EWsQv23KPyxpbdvl7vGP75xCzRqcWmeCMSyH1qYPsO87sPJ4eL
</span></span><span class="line"><span class="cl">Z4ywlr9ULagMgNMK/KO7F45yJRCqGKCaYB3cpcEpgUIIlZRCiXZSUifb/0EMWNAb
</span></span><span class="line"><span class="cl">DzV/otFp8aMrhwGxIEYv1wOmot9OrBRVgLVSNTU9EtJVzISEowbhe+7ZP1jUaAaW
</span></span><span class="line"><span class="cl">WrjvDA==
</span></span><span class="line"><span class="cl">=cfGG
</span></span><span class="line"><span class="cl">-----END PGP MESSAGE-----
</span></span></code></pre></div><p>In this message there&rsquo;s a nice Easter Egg for you, my friend.
The password is the name of the waterfall depicted in this post,
all together and in PascalCase.</p>
<p>Upon checking in, the timer will be reset to the Warning Timer,
even if you are already in the Dead Man&rsquo;s Timer.</p>
<p>If both timers run out, the messages will be sent and DMS will exit.</p>
<h2 id="the-implementation-details">The Implementation Details</h2>
<blockquote>
<p>For the stupid smelly nerds that want to go beyond the
<a href="https://github.com/sherlock-project/sherlock/issues/2019">&ldquo;JUST MAKE A FUCKING .EXE AND GIVE IT TO ME&rdquo;</a>.</p>
</blockquote>
<p>Before we dive into the code, here are the <strong>dependencies</strong> that I am using.
I&rsquo;ve tried to keep them to a minimum, since I want this to be a dead-simple
program.
This also helps with reducing the incidence of bugs and narrowing the
attack surface:</p>
<ul>
<li><a href="https://ratatui.rs"><code>ratatui</code></a> for the Terminal User Interface (TUI)</li>
<li><a href="https://serde.rs"><code>serde</code></a>, <a href="https://crates.io/crates/toml"><code>toml</code></a>,
and <a href="https://crates.io/crates/directories-next"><code>directories-next</code></a>
for managing the TOML configuration file.</li>
<li><a href="https://lettre.rs"><code>lettre</code></a> to manage email sending,
and <a href="https://crates.io/crates/mime_guess"><code>mime_guess</code></a> to robustly
handle optional attachments.</li>
<li><a href="https://crates.io/crates/chrono"><code>chrono</code></a> to handle timers and date/time
formatting.</li>
</ul>
<p>The app is divided into a library and a binary.
The library is contained in the <code>lib.rs</code> file and the binary in the <code>main.rs</code>,
both under the <code>src/</code> directory.
Here&rsquo;s a representation of the structure of <code>src/</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">src/
</span></span><span class="line"><span class="cl">├── config.rs
</span></span><span class="line"><span class="cl">├── email.rs
</span></span><span class="line"><span class="cl">├── lib.rs
</span></span><span class="line"><span class="cl">├── main.rs
</span></span><span class="line"><span class="cl">├── timer.rs
</span></span><span class="line"><span class="cl">└── tui.rs
</span></span></code></pre></div><p>As we can see, it is divided into 4 modules:</p>
<ul>
<li><strong><code>config.rs</code></strong>: Handles the configuration file.</li>
<li><strong><code>email.rs</code></strong>: Handles the email sending.</li>
<li><strong><code>timer.rs</code></strong>: Handles the timers and timer logic.</li>
<li><strong><code>tui.rs</code></strong>: Handles the Terminal User Interface (TUI).</li>
</ul>
<p>Feel free to dive in any of these files to understand the implementation details.
I&rsquo;ve made sure that the code is <em>both</em> <strong>well-tested</strong> and <strong>well-documented</strong>.</p>
<h2 id="contributions-are-welcome">Contributions are Welcome</h2>
<p>If you want to contribute to the project, feel free to open a pull request.
I&rsquo;ve marked a few issues as <code>good first issue</code> to help you get started.
Check out the <a href="https://github.com/storopoli/dead-man-switch">GitHub repository</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve built a simple no-bullshit Dead Man&rsquo;s Switch so that any person can use it.
Feel free to use it and share it with your friends.
Let&rsquo;s hope that we don&rsquo;t go to a dystopian future where everyone needs to use it.
Although, I am pretty sure that Sherlock Holmes would have used it no matter what.
Probably the way he would have used it is by:</p>
<ol>
<li>Set-up a non-KYC email account that supports SMTP.</li>
<li>Sign-up for a non-KYC VPS with Bitcoin or Monero.</li>
<li>Access the VPS via Tor using Tails.</li>
<li>Change the server&rsquo;s default SSH port to a random one.</li>
<li>Disallow password authentication and only allow key-based authentication.</li>
<li>Encrypt everything in the case the server is seized.</li>
</ol>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Please check
<a href="https://packages.debian.org/search?keywords=rustc">Debian&rsquo;s <code>rustc</code> package</a>
for more details.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Please don&rsquo;t go to bench 137 in Central Park, NY.
That was just an example.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>

</feed>


