<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rust on Jose Storopoli, PhD</title>
  <link rel="alternate" href="https://storopoli.io/tags/rust/" />
  <link rel="self" href="https://storopoli.io/tags/rust/index.xml" />
  <subtitle>Recent content in Rust on Jose Storopoli, PhD</subtitle>
  <id>https://storopoli.io/tags/rust/</id>
  <generator uri="http://gohugo.io" version="0.134.3">Hugo</generator>
  <language>en-us</language>
  <updated>2024-03-23T14:00:16-03:00</updated>
  <author>
    <name>Jose Storopoli</name>
    
  </author>
  <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights>
      <entry>
        <title>Sherlock Holmes Final Letter: A Simple Dead Man&#39;s Switch in Rust</title>
        <link rel="alternate" href="https://storopoli.io/2024-03-23-dead-man-switch/" />
        <id>https://storopoli.io/2024-03-23-dead-man-switch/</id>
        <published>2024-03-23T14:00:16-03:00</published>
        <updated>2024-09-08T19:00:51-03:00</updated>
        <summary type="html">&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;the_final_problem.png#center&#34;
         alt=&#34;Sherlock Holmes fights Moriarty at the Reichenbach Falls&#34; width=&#34;300&#34;/&gt; &lt;figcaption&gt;
            Sherlock Holmes fights Moriarty at the Reichenbach Falls
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Got state secrets? Or maybe 50 BTC?
Don&amp;rsquo;t trust your government or lawyers?
And you want to make sure that if you die, your secrets are passed on?
Don&amp;rsquo;t worry, I got you covered.
In this post,
I&amp;rsquo;ll introduce you to a &lt;strong&gt;simple no-bullshit dead man&amp;rsquo;s switch&lt;/strong&gt; written in Rust.&lt;/p&gt;
&lt;h2 id=&#34;dead-mans-switch&#34;&gt;Dead Man&amp;rsquo;s Switch&lt;/h2&gt;
&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Dead_man%27s_switch&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;</summary>
          <content type="html"><![CDATA[<figure>
    <img loading="lazy" src="the_final_problem.png#center"
         alt="Sherlock Holmes fights Moriarty at the Reichenbach Falls" width="300"/> <figcaption>
            Sherlock Holmes fights Moriarty at the Reichenbach Falls
        </figcaption>
</figure>

<p>Got state secrets? Or maybe 50 BTC?
Don&rsquo;t trust your government or lawyers?
And you want to make sure that if you die, your secrets are passed on?
Don&rsquo;t worry, I got you covered.
In this post,
I&rsquo;ll introduce you to a <strong>simple no-bullshit dead man&rsquo;s switch</strong> written in Rust.</p>
<h2 id="dead-mans-switch">Dead Man&rsquo;s Switch</h2>
<p>According to <a href="https://en.wikipedia.org/wiki/Dead_man%27s_switch">Wikipedia</a>:</p>
<blockquote>
<p>A <strong>dead man&rsquo;s switch</strong> is a switch that is designed to be <strong>activated or
deactivated if the human operator becomes incapacitated</strong>, such as through death,
loss of consciousness, or being bodily removed from control.
Originally applied to switches on a vehicle or machine,
it has since come to be used to describe other intangible uses,
as in <strong>computer software</strong>.</p>
</blockquote>
<p>A Dead Man&rsquo;s Switch (DMS) can be handy and common scenarios might be:</p>
<ul>
<li><strong>Password to your encrypted files</strong>: You gave a trusted person an encrypted
USB drive and the DMS sends the password to decrypt it.</li>
<li><strong>Bitcoin Multisig</strong>: Sending 1 of 3 keys to a trusted person.
You hold 1 key, your friend holds another key, and the DMS holds the last key.</li>
<li><strong>Instructions</strong>: Sending instructions on how to access something of value or
importance.</li>
<li><strong>Goodbye Note</strong>: Sending a goodbye note to loved ones.</li>
</ul>
<p>A DMS is specially useful when you don&rsquo;t trust the government or lawyers to
handle your affairs after you die.
It&rsquo;s also useful when you don&rsquo;t want to disclose your secrets while you are alive.</p>
<p>The idea is simple:</p>
<ol>
<li><strong>You set up a DMS</strong>.</li>
<li><strong>You need to check in periodically</strong>.</li>
<li><strong>If you don&rsquo;t check in, the DMS is triggered</strong>.</li>
</ol>
<p>In this post opening picture, is depicted an image from Conan Doyle&rsquo;s story
<a href="https://en.wikipedia.org/wiki/The_Final_Problem">The Final Problem</a>,
where Sherlock Holmes fights Moriarty at the Reichenbach Falls.
Eventually, both fall to their deaths.
I am pretty confident that Sherlock Holmes had a DMS in place to send Watson
a message.</p>
<p>I&rsquo;ve tried finding nice implementations of DMS, but to no avail.
They all were either unmaintained or plaged with spaghetti code.
My inspiration to build one came from two sources.
First, a friend of mine told me that he is using a bunch of badly-written
shell scripts with some cron jobs to manage his DMS.
Second, there might be a genuine need for a simple DMS in the privacy community.
For example, <a href="https://finalmessage.io">finalmessage.io</a>,
despite being closed source, and you have no idea who&rsquo;s behind it,
has gathered enough users in a subscription model and they are not accepting new
users anymore.
If people are paying for this, they can pay for a Linux server somewhere.
But they would need a simple DMS to run on it.</p>
<h2 id="how-to-use-it">How to Use It</h2>
<blockquote>
<p><strong>Disclaimer</strong>: Use at your own risk. Check the f****(as in <em>friendly</em>) code.</p>
</blockquote>
<p>I invite you to check out the code on GitHub at
<a href="https://github.com/storopoli/dead-man-switch"><code>storopoli/dead-man-switch</code></a>.
The license is <a href="https://www.gnu.org/licenses/agpl-3.0.html">AGPL-3.0</a>,
which means you can use it for free as long as you share your code.
The package is also available on <a href="https://crates.io/crates/dead-man-switch">crates.io</a>,
Rust&rsquo;s package manager.</p>
<p>DMS is very easy to use and deploy.
There are several alternatives on how to deploy it.
Here are the two easiest ways:</p>
<ol>
<li>
<p><strong>Building from Source</strong>:</p>
<ol>
<li>
<p>In a fresh Debian/Ubuntu server install the following dependencies:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install -y cargo pkg-config libssl-dev
</span></span></code></pre></div></li>
<li>
<p>Install the DMS:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cargo install dead-man-switch-tui
</span></span></code></pre></div></li>
<li>
<p>Run the app with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dead-man-switch-tui
</span></span></code></pre></div></li>
</ol>
</li>
<li>
<p><strong>Using Nix</strong>. This is the easiest just do
<code>nix run github:storopoli/dead-man-switch</code>.</p>
</li>
</ol>
<blockquote>
<p><strong>Note</strong>: I&rsquo;ve also released a Web Interface for the dead-man-switch.
You can easily deploy it using Docker or Docker Compose.
Check out the <a href="https://github.com/storopoli/dead-man-switch">GitHub repository</a>.</p>
<p>I&rsquo;ve also launched a <a href="https://start9.com">StartOS</a> app with a simple interface
for configuring and checking in with the Dead Man&rsquo;s Switch.
Check out the instructions on the
<a href="https://github.com/storopoli/dead-man-switch-startos"><code>dead-man-switch-startos</code> repository</a>.</p>
</blockquote>
<p>Once, you successfully run the app, you will see the following output:</p>
<figure>
    <img loading="lazy" src="app_first_run.png#center"
         alt="Initial Screen of Dead Man&#39;s Switch" width="800"/> <figcaption>
            Initial Screen of Dead Man&#39;s Switch
        </figcaption>
</figure>

<p>If you read the instructions carefully, all you need to know is detailed in
these 3 steps:</p>
<ol>
<li>Edit the Config at <code>/root/.config/deadman/config.toml</code> and modify the settings.</li>
<li>Check-In with <code>c</code> within the warning time.</li>
<li>Otherwise the Dead Man&rsquo;s Switch will be triggered and the message with
optional attachment will be sent.</li>
</ol>
<p>Upon the first run, the app will create a configuration file at an OS-agnostic
config file location:</p>
<ul>
<li>Linux: <code>$XDG_CONFIG_HOME</code>, i.e. <code>$HOME/.config|/home/alice/.config</code></li>
<li>macOS: <code>$HOME/Library/Application Support</code>, i.e. <code>/Users/Alice/Library/Application Support</code></li>
<li>Windows: <code>{FOLDERID_RoamingAppData}</code>, i.e. <code>C:\Users\Alice\AppData\Roaming</code></li>
</ul>
<p>In this example, I am running it from a Debian server as the <code>root</code> user.
Hence, the configuration file is at <code>/root/.config/deadman/config.toml</code>.</p>
<p>If you open the configuration file, you will see the following content.
I&rsquo;ve added some default values for inspiration<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">username</span> <span class="p">=</span> <span class="s2">&#34;me@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">password</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">smtp_server</span> <span class="p">=</span> <span class="s2">&#34;smtp.example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">smtp_port</span> <span class="p">=</span> <span class="mi">587</span>
</span></span><span class="line"><span class="cl"><span class="nx">message</span> <span class="p">=</span> <span class="s2">&#34;I&#39;m probably dead, go to Central Park NY under bench #137 you&#39;ll find an age-encrypted drive. Password is our favorite music in Pascal case.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">message_warning</span> <span class="p">=</span> <span class="s2">&#34;Hey, you haven&#39;t checked in for a while. Are you okay?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">subject</span> <span class="p">=</span> <span class="s2">&#34;[URGENT] Something Happened to Me!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">subject_warning</span> <span class="p">=</span> <span class="s2">&#34;[URGENT] You need to check in!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">to</span> <span class="p">=</span> <span class="s2">&#34;someone@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">from</span> <span class="p">=</span> <span class="s2">&#34;me@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">timer_warning</span> <span class="p">=</span> <span class="mi">1209600</span>
</span></span><span class="line"><span class="cl"><span class="nx">timer_dead_man</span> <span class="p">=</span> <span class="mi">604800</span>
</span></span></code></pre></div><p>The configs are self-explanatory.
You might need some help to set up and find a reliable SMTP server.
One option is to use Gmail.
Unfortunately, Proton or Tutanota are not supported because they don&rsquo;t support
SMTP.
Just grab the support page of your email provider and search for SMTP settings.
Plug the values in and you are good to go.</p>
<p>I want to bring your attention to the <strong><code>timer_warning</code></strong> and <strong><code>timer_dead_man</code></strong>
configs.
These are very important.</p>
<p>The way DMS works is by <strong>checking in periodically</strong>.
If you <strong><em>don&rsquo;t</em> check in within the <code>timer_warning</code> time,
the DMS will send a warning message to your own email</strong>, i.e. the <code>from</code> email declared in
the config, with the message <code>message_warning</code>
and subject <code>subject_warning</code>.</p>
<p>If you <strong><em>still don&rsquo;t check in</em> within the <code>timer_dead_man</code> time,
the DMS will send the &ldquo;Dead Man&rsquo;s&rdquo; message to the <code>to</code> email declared in the
config</strong>,
with the message <code>message</code> and subject <code>subject</code>.</p>
<p>The timers are in <strong>seconds</strong>, and the <strong>default values</strong> are:</p>
<ul>
<li><strong>Warning Timer</strong>: 2 weeks</li>
<li><strong>Dead Man&rsquo;s Timer</strong>: 1 week</li>
</ul>
<p>Feel free to change these values to your liking.</p>
<p>You can also add an attachment to the Dead Man&rsquo;s Message.
Just add an <code>attachment</code> field to the config file with the <em>absolute</em> path
to the file.
For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">attachment</span> <span class="p">=</span> <span class="s2">&#34;/root/important_file.txt&#34;</span>
</span></span></code></pre></div><p>A good idea is to make this file encrypted.
Actually, it&rsquo;s even better if you encrypted the whole fucking thing.
You can use <a href="https://gnupg.org/">PGP</a> or <a href="https://age-encryption.org"><code>age</code></a>.
For example, this is a PGP-encrypted message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">-----BEGIN PGP MESSAGE-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jA0ECQMKDpTufzWBF+//0ukBT/vslTBHGlMeri/cqpkxO2X7ZY1SYwiYwDqvdFAV
</span></span><span class="line"><span class="cl">FGzPHUaGh8tQiuoh7tj0HJEIqBaktJoDNe3XsszFVSp3eQAAiWUh+t/5pTIcQhW9
</span></span><span class="line"><span class="cl">iKJHPUKGhqf9vg0Q4LS0F1RMhLejoeXt/TvtHfsHE+kymbvp8p5gNiwoyugEZlta
</span></span><span class="line"><span class="cl">qLd0ZJvMDg5c0/Qw81+e6jW0ApwcT7MVf/Y0dFKW1epsA1QfGH5rQYUWPJDP+SZR
</span></span><span class="line"><span class="cl">hBd5034eKNKTUZYwAAoR0UJ6eqcnev9z9sTuct3uGPeXnNqK0zDKaP3rV/9hnVPN
</span></span><span class="line"><span class="cl">3gwEQEWL2Dl39pjv+x+QdViCirlrjPa0BaHzwveid2N8Ik3QBsxKGkyAXd0w3G+g
</span></span><span class="line"><span class="cl">VAGwKDLUkXUIDytk/PI8vRGLUhSmyG29KdeGdEiKde+DG5MUtjC4UyFCWxa5ZX5y
</span></span><span class="line"><span class="cl">WNEg7049bd5Nx3B5WlFmKyWbsHynoziDJU2aq2uvaBLYA48roDN/0sEUsuGFpxm3
</span></span><span class="line"><span class="cl">0/3vd0kGxMt20HlsVpDRQz75mWJEmzxY2itRJbR84bEyN0ItWE9G5WwQ4mjmU+XL
</span></span><span class="line"><span class="cl">0xYazglNYoAG0FXCxD6EpbDbQZxO/OKIaGWI4d2Zs1zcwbcEfZnhsKB5kI4tYJZ2
</span></span><span class="line"><span class="cl">ZTq+Q4xY4sFEoYzmNQbHY+mpgskgmHbRdBAGea+raiAXK/wL4Qc9x1bDdNIKNBup
</span></span><span class="line"><span class="cl">lsCRA1Dj/5s0Qy64d2cbfWvCvx3R9B0JsHTcFq4DBELSOzSyzC/mpCXCAi9K/jE5
</span></span><span class="line"><span class="cl">5VAnsnqaTZm+DVpciMTRxuRPD50MDYogTA/N+Jer9WmQOgc0e1VrWsho2CgX0Z8I
</span></span><span class="line"><span class="cl">ycF56Wm+lBjTGRMLXexA1Ietm88wg/OrY6BE57xpBMVemRc0P0A2g0KC1WkX8J3I
</span></span><span class="line"><span class="cl">fw5IKoiGsd9mvuHNxJ40Rm14iTYV0z9t97GFTmWji5BZtKoQ8vNmy8skgEgEUuHS
</span></span><span class="line"><span class="cl">LtwCU8D5XsHQY2EWsQv23KPyxpbdvl7vGP75xCzRqcWmeCMSyH1qYPsO87sPJ4eL
</span></span><span class="line"><span class="cl">Z4ywlr9ULagMgNMK/KO7F45yJRCqGKCaYB3cpcEpgUIIlZRCiXZSUifb/0EMWNAb
</span></span><span class="line"><span class="cl">DzV/otFp8aMrhwGxIEYv1wOmot9OrBRVgLVSNTU9EtJVzISEowbhe+7ZP1jUaAaW
</span></span><span class="line"><span class="cl">WrjvDA==
</span></span><span class="line"><span class="cl">=cfGG
</span></span><span class="line"><span class="cl">-----END PGP MESSAGE-----
</span></span></code></pre></div><p>In this message there&rsquo;s a nice Easter Egg for you, my friend.
The password is the name of the waterfall depicted in this post,
all together and in PascalCase.</p>
<p>Upon checking in, the timer will be reset to the Warning Timer,
even if you are already in the Dead Man&rsquo;s Timer.</p>
<p>If both timers run out, the messages will be sent and DMS will exit.</p>
<h2 id="the-implementation-details">The Implementation Details</h2>
<blockquote>
<p>For the stupid smelly nerds that want to go beyond the
<a href="https://github.com/sherlock-project/sherlock/issues/2019">&ldquo;JUST MAKE A FUCKING .EXE AND GIVE IT TO ME&rdquo;</a>.</p>
</blockquote>
<p>Before we dive into the code, here are the <strong>dependencies</strong> that I am using.
I&rsquo;ve tried to keep them to a minimum, since I want this to be a dead-simple
program.
This also helps with reducing the incidence of bugs and narrowing the
attack surface:</p>
<ul>
<li><a href="https://ratatui.rs"><code>ratatui</code></a> for the Terminal User Interface (TUI)</li>
<li><a href="https://serde.rs"><code>serde</code></a>, <a href="https://crates.io/crates/toml"><code>toml</code></a>,
and <a href="https://crates.io/crates/directories-next"><code>directories-next</code></a>
for managing the TOML configuration file.</li>
<li><a href="https://lettre.rs"><code>lettre</code></a> to manage email sending,
and <a href="https://crates.io/crates/mime_guess"><code>mime_guess</code></a> to robustly
handle optional attachments.</li>
<li><a href="https://crates.io/crates/chrono"><code>chrono</code></a> to handle timers and date/time
formatting.</li>
</ul>
<blockquote>
<p><strong>Note</strong>: the Dead Man&rsquo;s Switch Web Interface uses <a href="https://github.com/tokio-rs/axum"><code>axum</code></a>,
<a href="https://djc.github.io/askama/"><code>askama</code></a> and <a href="https://github.com/tower-rs/tower"><code>tower</code></a>.</p>
</blockquote>
<p>The app is divided into a library and a binary.
The library is contained in the <code>lib.rs</code> file and the binary in the <code>main.rs</code>,
both under the <code>src/</code> directory.
Here&rsquo;s a representation of the structure of <code>src/</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">src/
</span></span><span class="line"><span class="cl">├── config.rs
</span></span><span class="line"><span class="cl">├── email.rs
</span></span><span class="line"><span class="cl">├── lib.rs
</span></span><span class="line"><span class="cl">├── main.rs
</span></span><span class="line"><span class="cl">├── timer.rs
</span></span><span class="line"><span class="cl">└── tui.rs
</span></span></code></pre></div><p>As we can see, it is divided into 4 modules:</p>
<ul>
<li><strong><code>config.rs</code></strong>: Handles the configuration file.</li>
<li><strong><code>email.rs</code></strong>: Handles the email sending.</li>
<li><strong><code>timer.rs</code></strong>: Handles the timers and timer logic.</li>
<li><strong><code>tui.rs</code></strong>: Handles the Terminal User Interface (TUI).</li>
</ul>
<p>Feel free to dive in any of these files to understand the implementation details.
I&rsquo;ve made sure that the code is <em>both</em> <strong>well-tested</strong> and <strong>well-documented</strong>.</p>
<h2 id="contributions-are-welcome">Contributions are Welcome</h2>
<p>If you want to contribute to the project, feel free to open a pull request.
I&rsquo;ve marked a few issues as <code>good first issue</code> to help you get started.
Check out the <a href="https://github.com/storopoli/dead-man-switch">GitHub repository</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve built a simple no-bullshit Dead Man&rsquo;s Switch so that any person can use it.
Feel free to use it and share it with your friends.
Let&rsquo;s hope that we don&rsquo;t go to a dystopian future where everyone needs to use it.
Although, I am pretty sure that Sherlock Holmes would have used it no matter what.
Probably the way he would have used it is by:</p>
<ol>
<li>Set-up a non-KYC email account that supports SMTP.</li>
<li>Sign-up for a non-KYC VPS with Bitcoin or Monero.</li>
<li>Access the VPS via Tor using Tails.</li>
<li>Change the server&rsquo;s default SSH port to a random one.</li>
<li>Disallow password authentication and only allow key-based authentication.</li>
<li>Encrypt everything in the case the server is seized.</li>
</ol>
<blockquote>
<p><strong>Note</strong>: Sherlock could also use a coreboot non-KYC piece of hardware that
runs StartOS and the newly launched Dead Man&rsquo;s Switch StartOS app that already
uses an onion service for handling the check-ins via Tor.</p>
</blockquote>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Please don&rsquo;t go to bench 137 in Central Park, NY.
That was just an example.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Fullstack and Progressive Web Apps in Rust: A Tale of a Sudoku Spyware</title>
        <link rel="alternate" href="https://storopoli.io/2024-01-30-sudoku/" />
        <id>https://storopoli.io/2024-01-30-sudoku/</id>
        <published>2024-01-30T08:57:33Z</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;rust_webdev_meme.jpg#center&#34; alt=&#34;rust webdev meme&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;It all started when I had to accompany my mom to the hospital.
It was just a routine checkup, but I had to wait for a few hours.
I brought my laptop with me, since they have good WiFi and I could work on my projects.
Then I realized that my mom was playing a &lt;a href=&#34;https://en.wikipedia.org/wiki/Sudoku&#34;&gt;Sudoku&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
game on her phone.
I couln&amp;rsquo;t help but notice that the game was full of ads and it was asking for a lot of permissions,
like location and sensor data.
So I decided to make a &lt;strong&gt;Sudoku game for her, without ads or using any permission&lt;/strong&gt;.
It wouldn&amp;rsquo;t even need to ask for the blessing of Google or &lt;a href=&#34;https://youtu.be/XHVxm12NbrY&#34;&gt;Tim Apple&lt;/a&gt;
since it was a Progressive Web App (PWA) and it would work offline.&lt;/p&gt;</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="rust_webdev_meme.jpg#center" alt="rust webdev meme"  />
</p>
<p>It all started when I had to accompany my mom to the hospital.
It was just a routine checkup, but I had to wait for a few hours.
I brought my laptop with me, since they have good WiFi and I could work on my projects.
Then I realized that my mom was playing a <a href="https://en.wikipedia.org/wiki/Sudoku">Sudoku</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
game on her phone.
I couln&rsquo;t help but notice that the game was full of ads and it was asking for a lot of permissions,
like location and sensor data.
So I decided to make a <strong>Sudoku game for her, without ads or using any permission</strong>.
It wouldn&rsquo;t even need to ask for the blessing of Google or <a href="https://youtu.be/XHVxm12NbrY">Tim Apple</a>
since it was a Progressive Web App (PWA) and it would work offline.</p>
<p>You can play the game at <a href="https://storopoli.io/sudoku">storopoli.io/sudoku</a>
or check the source code at <a href="https://github.com/storopoli/sudoku"><code>storopoli/sudoku</code></a>.</p>
<p>Here&rsquo;s a screenshot of the game:</p>
<p><img loading="lazy" src="sudoku_screenshot.png#center" alt="sudoku screenshot"  />
</p>
<h2 id="tools-of-choice">Tools of Choice</h2>
<p>So what would I use to build this game?
Only one thing: <a href="https://dioxuslabs.com/"><strong>Dioxus</strong></a>.
Dioxus is a fullstack framework for Rust,
that allows you to build web applications with Rust.
You can benefit from the safety and performance of Rust,
powerful type system and borrow checker,
along with the low memory footprint.</p>
<p>That&rsquo;s it. <strong>Just Rust and HTML with some raw CSS</strong>.
No &ldquo;YavaScript&rdquo;. No Node.js. No npm. No webpack. No Tailwind CSS.
Just <code>cargo run --release</code> and you&rsquo;re done.</p>
<h2 id="package-management">Package Management</h2>
<p>Using Rust for fullstack development is an amazing thing.
First, <strong>package management is a breeze with Cargo</strong>.
Second, you don&rsquo;t have to worry about <strong>&ldquo;npm vulnerabilities&rdquo;</strong>.
Have you ever gone into your project and ran <code>npm audit</code>?</p>
<p><img loading="lazy" src="npm_vulnerabilities.png#center" alt="npm_vulnerabilities"  />
</p>
<p>This is solvable with Rust.</p>
<h2 id="runtime-errors">Runtime Errors</h2>
<p>An additional advantage is that you <strong>don&rsquo;t have to worry about common
runtime errors</strong> like <code>undefined is not a function</code> or <code>null is not an object</code>.
These are all picked-up by <strong>Rust on compile time</strong>.
So you can focus on the logic of your application knowing that it will work as <strong>expected</strong>.</p>
<p>A common workflow in Rust fullstack applications is to use Rust&rsquo;s powerful type system
to parse any user input into a type that you can trust, and then propagate that type
throughout your application. This way you can be sure that you&rsquo;re not going to have
any runtime errors due to invalid input. This is not the case with &ldquo;YavaScript&rdquo;.
You need to validate the input at every step of the way, and you can&rsquo;t be sure
that the input is valid at any point in time.</p>
<p>You can sleep soundly at night knowing that your application won&rsquo;t crash
and as long as the <strong>host machine has electricity and internet access,
your app is working as expected</strong><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="performance">Performance</h2>
<p>Rust is known for its <strong>performance</strong>.
This is due to the fact that Rust gives you control over deciding on which type you&rsquo;ll use for a variable.
This is not the case with &ldquo;YavaScript&rdquo;, where you can&rsquo;t decide if a variable is a number or a string.
Also you can use references and lifetimes to avoid copying data around.</p>
<p>So, if you make sane decisions, like <code>u8</code> (unsigned 8-bit integer) instead of <code>i32</code> (signed 32-bit integer)
for a number that will never be greater than 255, you can have a very low memory footprint.
Also you can use <code>&amp;str</code> (string slice) instead of <code>String</code> to avoid copying strings around.</p>
<p>You just don&rsquo;t have this level of control with &ldquo;YavaScript&rdquo;.
You get either strings or numbers and you can&rsquo;t decide on the size of the number.
And all of your strings will be heap-allocated and copied around.</p>
<h2 id="progressive-web-apps">Progressive Web Apps</h2>
<p>Progressive Web Apps (PWAs) are web applications that are regular web pages or websites,
but can appear to the user like traditional applications or native mobile applications.
Since they use the device&rsquo;s browser, they don&rsquo;t need to be installed through an app store.
This is a great advantage, since you don&rsquo;t have to ask for permissions to Google or
<a href="https://youtu.be/XHVxm12NbrY">Tim Apple</a>.</p>
<p><strong>In Dioxus making a PWA was really easy</strong>.
There is a PWA template in the <a href="https://github.com/DioxusLabs/dioxus/tree/master/examples/PWA-example"><code>examples/</code> directory in their repository</a>.
You just have to follow the instructions in the README and you&rsquo;re done.
In my case, I only had to change the metadata in the <code>manifest.json</code> file
and add what I wanted to cache in the service worker <code>.js</code> file.
These were only the favicon icon and the CSS style file.</p>
<h2 id="sudoku-algorithm">Sudoku Algorithm</h2>
<p>I didn&rsquo;t have to worry about the algorithm to generate the Sudoku board.
This was already implemented in the <a href="https://crates.io/crates/sudoku"><code>sudoku</code></a> crate.
But I had to implement some <strong>Sudoku logic to make the user interface work</strong>.</p>
<p>Some things that I had to implement were:</p>
<ul>
<li><strong>find the related cells</strong>.
Given a cell, find the cells in the same row, column and sub-grid.</li>
<li><strong>find the conflicting cells</strong>.
Given a cell, find the cells in the same row, column and sub-grid that have the same value.</li>
</ul>
<h3 id="find-the-related-cells">Find the Related Cells</h3>
<p>This was a simple task, yet it was very fun to implement.</p>
<p>To get the related cells, you need to find the row and column of the cell.
Then you can find the start row and start column of the 3x3 sub-grid.
After that, you can add the cells in the same row, column and sub-grid to a vector.
Finally, you can remove the duplicates and the original cell from the vector.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_related_cells</span><span class="p">(</span><span class="n">index</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">related_cells</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">start_row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">start_col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Add cells in the same row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">9</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">related_cells</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">row</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Add cells in the same column
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">9</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">related_cells</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">col</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Add cells in the same 3x3 sub-grid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">start_row</span><span class="o">..</span><span class="n">start_row</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">start_col</span><span class="o">..</span><span class="n">start_col</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">related_cells</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">j</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Remove duplicates and the original cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">related_cells</span><span class="p">.</span><span class="n">sort_unstable</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">related_cells</span><span class="p">.</span><span class="n">dedup</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">related_cells</span><span class="p">.</span><span class="n">retain</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">related_cells</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="find-the-conflicting-cells">Find the Conflicting Cells</h3>
<p>To find the conflicting cells, you need to get the value of the target cell.
Then you can get the related cells and filter the ones that have the same value as the target cell.
Easy peasy.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_conflicting_cells</span><span class="p">(</span><span class="n">board</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">,</span><span class="w"> </span><span class="n">index</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Get the value of the target cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">board</span><span class="p">[</span><span class="n">index</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Ignore if the target cell is empty (value 0)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Get related cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">related_cells</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_related_cells</span><span class="p">(</span><span class="n">index</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Find cells that have the same value as the target cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">related_cells</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">index</span><span class="o">|</span><span class="w"> </span><span class="n">board</span><span class="p">[</span><span class="n">index</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">collect</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Note that I am using <code>0</code> to represent empty cells.</p>
<p>But if the user ignores the conflicting cells and adds a number to the board,
there will be more conflicting cells than the ones related to the target cell.
This can be done with another helper function.</p>
<p>Here&rsquo;s the code, and I took the liberty of adding the docstrings (the <code>///</code> comments that renders as documentation):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Get all the conflictings cells for all filled cells in a Sudoku board
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Parameters
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// - `current_sudoku: SudokuState` - A reference to the current [`SudokuState`]
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Returns
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// Returns a `Vec&lt;u8&gt;` representing all cell&#39;s indices that are conflicting
</span></span></span><span class="line"><span class="cl"><span class="sd">/// with the current Sudoku board.
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_all_conflicting_cells</span><span class="p">(</span><span class="n">current_sudoku</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">filled</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current_sudoku</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">enumerate</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">filter_map</span><span class="p">(</span><span class="o">|</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">value</span><span class="p">)</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">u8</span>::<span class="n">try_from</span><span class="p">(</span><span class="n">idx</span><span class="p">).</span><span class="n">ok</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nb">None</span><span class="w"> </span><span class="c1">// Filter out the item if the value is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">})</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Get all conflicting cells for the filled cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">conflicting</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">filled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">flat_map</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">v</span><span class="o">|</span><span class="w"> </span><span class="n">get_conflicting_cells</span><span class="p">(</span><span class="n">current_sudoku</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">collect</span>::<span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Retain unique
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">conflicting</span><span class="p">.</span><span class="n">sort_unstable</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">conflicting</span><span class="p">.</span><span class="n">dedup</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">conflicting</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The trick here is that we are using a <code>flat_map</code> since a naive <code>map</code> would return a nested <code>Vec&lt;Vec&lt;Vec&lt;...&gt;&gt;&gt;</code>
of <code>u8</code>s, and we don&rsquo;t want that.
We want a flat <code>Vec&lt;u8&gt;</code> of all conflicting cells.
Recursion is always tricky, go ask Alan Turing.</p>
<h2 id="sudoku-app-state">Sudoku App State</h2>
<p>As you can see, I used a <code>SudokuState</code> type to represent the state of the game.
This is just a type alias for a <code>[u8; 81]</code> array.
This is a very simple and efficient way to represent the state of the game.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">type</span> <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="kt">u8</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span></code></pre></div><p>The Sudoku app has also an undo button.
This is implemented by using a <code>Vec&lt;SudokuState&gt;</code> to store the history of the game.
Every time that the user adds a number to the board, the new update state is pushed to the history vector.
When the user clicks the undo button, the last state is popped from the history vector and the board is updated.</p>
<p>There&rsquo;s one additional problem with the undo button.
It needs to switch the clicked cell to the one that was clicked before.
Yet another simple, but fun, task.
First you need to find the index at which two given <code>SudokuState</code>, the current and the last,
differ by exactly one item.</p>
<p>Again I&rsquo;ll add the docstrings since they incorporate some good practices that are worth mentioning:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// Finds the index at which two given [`SudokuState`]
</span></span></span><span class="line"><span class="cl"><span class="sd">/// differ by exactly one item.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// This function iterates over both arrays in lockstep and checks for a
</span></span></span><span class="line"><span class="cl"><span class="sd">/// pair of elements that are not equal.
</span></span></span><span class="line"><span class="cl"><span class="sd">/// It assumes that there is exactly one such pair and returns its index.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Parameters
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// * `previous: SudokuState` - A reference to the first [`SudokuState`] to compare.
</span></span></span><span class="line"><span class="cl"><span class="sd">/// * `current: SudokuState` - A reference to the second [`SudokuState`] to compare.
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Returns
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// Returns `Some(usize)` with the index of the differing element if found,
</span></span></span><span class="line"><span class="cl"><span class="sd">/// otherwise returns `None` if the arrays are identical (which should not
</span></span></span><span class="line"><span class="cl"><span class="sd">/// happen given the problem constraints).
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Panics
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// The function will panic if cannot convert any of the Sudoku&#39;s board cells
</span></span></span><span class="line"><span class="cl"><span class="sd">/// indexes from `usize` into a `u8`
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ## Examples
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ```
</span></span></span><span class="line"><span class="cl"><span class="sd">/// let old_board: SudokuState = [0; 81];
</span></span></span><span class="line"><span class="cl"><span class="sd">/// let mut new_boad: SudokuState = [0; 81];
</span></span></span><span class="line"><span class="cl"><span class="sd">/// new_board[42] = 1; // Introduce a change
</span></span></span><span class="line"><span class="cl"><span class="sd">///
</span></span></span><span class="line"><span class="cl"><span class="sd">/// let index = find_changed_cell(&amp;old_board, &amp;new_board);
</span></span></span><span class="line"><span class="cl"><span class="sd">/// assert_eq!(index, Some(42));
</span></span></span><span class="line"><span class="cl"><span class="sd">/// ```
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">find_changed_cell</span><span class="p">(</span><span class="n">previous</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">,</span><span class="w"> </span><span class="n">current</span>: <span class="kp">&amp;</span><span class="nc">SudokuState</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell1</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cell2</span><span class="p">))</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">previous</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">zip</span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="n">iter</span><span class="p">()).</span><span class="n">enumerate</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">cell1</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">cell2</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="kt">u8</span>::<span class="n">try_from</span><span class="p">(</span><span class="n">index</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;cannot convert from u8&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">None</span><span class="w"> </span><span class="c1">// Return None if no change is found (which should not happen in your case)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The function <code>find_changed_cell</code> can panic if it cannot convert any of the Sudoku&rsquo;s board cells indexes from <code>usize</code> into a <code>u8</code>.
Hence, we add a <code>## Panics</code> section to the docstring to inform the user of this possibility.
Additionally, we add an <code>## Examples</code> section to show how to use the function.
These are good practices that are worth mentioning<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> and I highly encourage you to use them in your Rust code.</p>
<h2 id="tests">Tests</h2>
<p>Another advantage of using Rust is that you can write tests for your code
without needing to use a third-party library.
It is baked into the language and you can run your tests with <code>cargo test</code>.</p>
<p>Here&rsquo;s an example of a test for the <code>get_conflicting_cells</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_conflicts_multiple</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">board</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 1 with conflict
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 2 with conflict
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="c1">// Row 9 with conflict
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">get_conflicting_cells</span><span class="p">(</span><span class="o">&amp;</span><span class="n">board</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">72</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>And also two tests for the <code>find_changed_cell</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_find_changed_cell_single_difference</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_board</span>: <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">new_board</span>: <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">new_board</span><span class="p">[</span><span class="mi">42</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// Introduce a change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">find_changed_cell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">old_board</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">new_board</span><span class="p">),</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[test]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">test_find_changed_cell_no_difference</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_board</span>: <span class="nc">SudokuState</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="mi">81</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// This should return None since there is no difference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">find_changed_cell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">old_board</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">old_board</span><span class="p">),</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I had a lot of fun building this game.
I gave my mother an amazing gift that she&rsquo;ll treasure forever.
Her smartphone has one less spyware now.
I deployed a fullstack web app with Rust that is fast, safe and efficient;
with the caveat that I didn&rsquo;t touched any &ldquo;YavaScript&rdquo; or complexes build tools.</p>
<p>I hope you enjoyed this post and that you&rsquo;ll give Rust a try in your next fullstack project.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>According to <a href="https://en.wikipedia.org/wiki/Sudoku">Wikipedia</a>,
Sudoku is a logic-based, combinatorial number-placement puzzle.
The objective is to fill a 9×9 grid with digits so that each column, each row,
and each of the nine 3×3 subgrids that compose the grid contain all of the digits from 1 to 9.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>in my case I am sending the bill to Bill Gates,
since it is using the GitHub Pages to host the app.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The <code>clippy</code> linter can warn you if you don&rsquo;t add these sections to your docstrings.
Just add <code>pedantic = &quot;deny&quot;</code> inside your <code>Cargo.toml</code> file in the <code>[lints.clippy]</code> section and you&rsquo;re good to go.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>htmx: an Oasis in a Desert of Soy</title>
        <link rel="alternate" href="https://storopoli.io/2024-01-14-htmx/" />
        <id>https://storopoli.io/2024-01-14-htmx/</id>
        <published>2024-01-14T06:13:19-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;bellcurve.png#center&#34; alt=&#34;htmx bell curve&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: This post has &lt;a href=&#34;https://mermaid.js.org&#34;&gt;&lt;code&gt;mermaid.js&lt;/code&gt;&lt;/a&gt; enabled,
so if you want to view the rendered diagrams,
you&amp;rsquo;ll have to unfortunately enable JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I love to learn new things and I&amp;rsquo;m passionate about Stoic philosophy.
So, when I acquired the domain
&lt;a href=&#34;https://stoicquotes.io&#34;&gt;&lt;code&gt;stoicquotes.io&lt;/code&gt;&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,
I&amp;rsquo;ve decided to give &lt;a href=&#34;https://htmx.org&#34;&gt;&lt;code&gt;htmx&lt;/code&gt;&lt;/a&gt; a try.&lt;/p&gt;
&lt;h2 id=&#34;what-is-htmx&#34;&gt;What is &lt;code&gt;htmx&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;htmx&lt;/code&gt;&lt;/strong&gt; is a small JavaScript library that allows you to enhance your HTML with
attributes to perform AJAX (Asynchronous JavaScript and XML) without writing
JavaScript&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. It focuses on extending HTML by adding custom attributes
that describe how to perform common dynamic web page behaviors like partial page
updates, form submission, etc. &lt;code&gt;htmx&lt;/code&gt; is designed to be easy to use, requiring
minimal JavaScript knowledge, so that you can add interactivity&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to web pages
with just HTML.&lt;/p&gt;</summary>
          <content type="html"><![CDATA[<p><img loading="lazy" src="bellcurve.png#center" alt="htmx bell curve"  />
</p>
<blockquote>
<p>Warning: This post has <a href="https://mermaid.js.org"><code>mermaid.js</code></a> enabled,
so if you want to view the rendered diagrams,
you&rsquo;ll have to unfortunately enable JavaScript.</p>
</blockquote>
<p>I love to learn new things and I&rsquo;m passionate about Stoic philosophy.
So, when I acquired the domain
<a href="https://stoicquotes.io"><code>stoicquotes.io</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
I&rsquo;ve decided to give <a href="https://htmx.org"><code>htmx</code></a> a try.</p>
<h2 id="what-is-htmx">What is <code>htmx</code>?</h2>
<p><strong><code>htmx</code></strong> is a small JavaScript library that allows you to enhance your HTML with
attributes to perform AJAX (Asynchronous JavaScript and XML) without writing
JavaScript<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It focuses on extending HTML by adding custom attributes
that describe how to perform common dynamic web page behaviors like partial page
updates, form submission, etc. <code>htmx</code> is designed to be easy to use, requiring
minimal JavaScript knowledge, so that you can add interactivity<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> to web pages
with just HTML.</p>
<p>Let&rsquo;s contrast this with the <a href="../2023-11-10-2023-11-13-soydev/">Soy stuff</a>
like the notorious React framework. <strong>React</strong>, on the other hand, is a JavaScript
library for building user interfaces, primarily through a component-based
architecture. It manages the creation of user interface elements, updates the UI
efficiently when data changes, and helps keep your UI in sync with the state of
your application. React requires a deeper knowledge of JavaScript and understanding
of its principles, such as components, state, and props.</p>
<p><strong>In simple terms:</strong></p>
<ul>
<li><strong><code>htmx</code></strong> enhances plain HTML by letting you add attributes for dynamic
behaviors, so you can make webpages interactive with no JavaScript coding;
you can think of it as boosting your HTML to do more.</li>
<li><strong>React</strong> is more like building a complex machine from customizable parts that
you program with JavaScript, giving you full control over how your application
looks and behaves but also requiring more from you in terms of code complexity
and architecture.</li>
</ul>
<p>Additionally, React can be slower and less performant than <code>htmx</code>.
This is due to <code>htmx</code> manipulating the actual
<a href="https://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> itself,
while React updates objects in the Virtual DOM. Afterward, React compares the
new Virtual DOM with a pre-update version and calculates the
most efficient way to make these changes to the real DOM.
So React has to do this whole trip around diff&rsquo;ing all the time the Virtual DOM
against the actual DOM for <strong>every fucking change</strong>.</p>
<p>Finally, <code>htmx</code> receives pure HTML from the server.
React needs to the <strong>JSON busboy thing</strong>: the server sends JSON, React parses
JSON into JavaScript code, then it parses it again to HTML for the browser.</p>
<p>Here are some <a href="https://mermaid.js.org/"><code>mermaid.js</code></a> diagrams to illustrate
what is going on under the hood:</p>
<div class="mermaid" style="text-align: center">

---

## title: htmx

flowchart LR
HTML --> DOM
</div>

<div class="mermaid" style="text-align: center">

---

## title: React

flowchart LR
JSON --> JavaScript --> HTML --> VDOM[Virtual DOM] --> DOM
</div>

<p>A consequence of these different paradigms is that <code>htmx</code> don&rsquo;t care about
what the server sends back and will happily include in the DOM.
Hence, front-end and back-end are decoupled and less complex.
Whereas in Reactland, we need to have a tight synchronicity between front-end
and back-end. If the JSON that the server sends doesn&rsquo;t conform to the exact
specifications of the front-end, the application <del>becomes a dumpster fire</del>
breaks.</p>
<h2 id="hypermedia">Hypermedia</h2>
<p>When the web was created it was based on the concept of
<a href="https://en.wikipedia.org/wiki/Hypermedia"><strong>Hypermedia</strong></a>.
Hypermedia refers to a system of interconnected multimedia elements, which can
include text, graphics, audio, video, and hyperlinks. It allows users to
navigate between related pieces of content across the web or within
applications, creating a non-linear way of accessing information.</p>
<p>HTML follows the Hypermedia protocol. HTML is the native language of browsers<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.
That&rsquo;s why all the React-like frameworks have to convert JavaScript into HTML.
So it&rsquo;s only natural to rely primarily on HTML to deliver content and sprinkle
JavaScript sparingly when you need something that HTML cannot offer.</p>
<p>Unfortunately, HTML has stopped in time. Despite all the richness of
<a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a> with the diverse request methods:
<code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>CONNECT</code>, <code>OPTIONS</code>, <code>TRACE</code>, <code>PATCH</code>;
HTML only has <em>two</em> elements that interact with the server:</p>
<ul>
<li><code>&lt;a&gt;</code>: sends a <code>GET</code> request to fetch new data.</li>
<li><code>&lt;form&gt;</code>: sends a <code>POST</code> request to create new data.</li>
</ul>
<p>That&rsquo;s the main purpose of <code>htmx</code>: allowing HTML elements to leverage all the
capabilities of HTTP.</p>
<h2 id="htmx-in-practice"><code>htmx</code> in Practice</h2>
<p>OK, enough of abstract and theoretical concepts. Let&rsquo;s see how <code>htmx</code> works in
practice.</p>
<p>First, the only thing you need to do enable <code>htmx</code> is to insert this <code>&lt;script&gt;</code>
tag in your HTML:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://unpkg.com/htmx.org@{version}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>where <code>{version}</code> is the desired <code>htmx</code> version that you&rsquo;ll want to use.
I has around 40kb of size.</p>
<p>Inside the code behind <a href="https://stoicquotes.io"><code>stoicquotes.io</code></a><sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
we have the following HTML<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;quote&#34;</span><span class="p">&gt;</span>Some nice Stoic quote...<span class="p">&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-get</span><span class="o">=</span><span class="s">&#34;/quote&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-trigger</span><span class="o">=</span><span class="s">&#34;click&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-target</span><span class="o">=</span><span class="s">&#34;#quote&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hx-swap</span><span class="o">=</span><span class="s">&#34;outerHTML&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  New
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>When the user clicks (<code>hx-trigger</code>) in the &ldquo;New&rdquo; button, <code>htmx</code> sends a <code>GET</code>
request to the <code>/quote</code> endpoint (<code>hx-get</code>). Then it swaps the whole HTML
(<code>hx-swap</code>) of the element that has id &ldquo;quote&rdquo; (<code>hx-target</code>).
This is accomplished without a single character of JavaScript.
Instead we extend HTML by adding new attributes to the HTML elements:</p>
<ul>
<li><code>hx-get</code></li>
<li><code>hx-trigger</code></li>
<li><code>hx-target</code></li>
<li><code>hx-swap</code></li>
</ul>
<p>The server replies with a new <code>&lt;blockquote&gt;</code> element every time it gets a <code>GET</code>
request in the <code>/quote</code> endpoint.</p>
<p>This is truly amazing. We just used one line of <code>htmx</code>.</p>
<p><img loading="lazy" src="4-lines.png#center" alt="htmx 4 lines"  />
</p>
<p><code>htmx</code> adheres to my trifecta of amazing tools<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>:</p>
<ul>
<li>powerful</li>
<li>expressive</li>
<li>concise</li>
</ul>
<p>Here&rsquo;s a breakdown of what the trifecta of amazing tools means:</p>
<ol>
<li>
<p><strong>Powerful:</strong>
A powerful tool has the capability to handle complex, demanding tasks with
relative ease. It possesses the strength, performance, and features necessary to
accomplish a wide range of functions.</p>
</li>
<li>
<p><strong>Expressive:</strong>
An expressive tool gives users the ability to articulate complex ideas,
designs, or concepts with simplicity and nuance. It provides a rich set of
capabilities that allow for diverse and sophisticated forms of expression.</p>
</li>
<li>
<p><strong>Concise:</strong>
A concise tool allows for achieving goals with minimal effort or complexity.
It focuses on efficiency and effectiveness, often through simplification and the
removal of unnecessary components. It should be capable of performing tasks
without requiring verbose instructions or processes.</p>
</li>
</ol>
<h3 id="how-we-would-do-this-in-react">How we would do this in React?</h3>
<p>Now compare this with React.</p>
<p>First, we need to install React.
This is not simple, but here&rsquo;s a breakdown:</p>
<ol>
<li>
<p>install Node.js</p>
</li>
<li>
<p>install React: <code>npm install react react-dom</code></p>
</li>
<li>
<p>create an <code>index.js</code> file with some variant of:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">createRoot</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react-dom/client&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div id=&#34;app&#34;&gt;&lt;/div&gt;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;app&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="err">/h1&gt;);</span>
</span></span></code></pre></div></li>
</ol>
<p>And now here&rsquo;s the code for the <code>Quote</code> component:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Quote</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">[</span><span class="nx">quote</span><span class="p">,</span> <span class="nx">setQuote</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="s2">&#34;Some nice Stoic quote...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">fetchNewQuote</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;/quote&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">newQuote</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setQuote</span><span class="p">(</span><span class="nx">newQuote</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&#34;Error fetching new quote:&#34;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">blockquote</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;quote&#34;</span><span class="p">&gt;{</span><span class="nx">quote</span><span class="p">}&lt;/</span><span class="nt">blockquote</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">fetchNewQuote</span><span class="p">}&gt;</span><span class="nx">New</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">Quote</span><span class="p">;</span>
</span></span></code></pre></div><p>That&rsquo;s a LOT of JavaScript code.
The Soy Gods must be smiling upon you, my friend.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I highly recommend that you check out <a href="https://htmx.org"><code>htmx</code></a>,
especially the free <a href="https://htmx.org/#book">Hypermedia systems book</a> which
goes into details and it is way more comprehensive than this short blog post.</p>
<p><code>htmx</code> is a fresh and elegant approach to build simple reactive web pages.
It extends HTML to be able to use all of the capabilities of any JavaScript-based
reactive framework without a single drop of JavaScript.
You just add some new HTML attributes to your HTML elements.</p>
<p>I&rsquo;ve had such joy using <code>htmx</code> lately.
It made me go back into my early teens, when I was doing HTML pages in
<a href="https://en.wikipedia.org/wiki/GeoCities">GeoCities</a>.
Good times, no JavaScript-bloated code.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>you can find the source code at
<a href="https://github.com/storopoli/stoic-quotes"><code>storopoli/stoic-quotes</code></a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>YES, yes, no YavaScript. Hooray!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><code>htmx</code> can do much more, such as lazy loading, infinite scroll,
or submitting forms without a full page reload, etc.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>actually we also have <a href="https://webassembly.org">WASM</a>.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I&rsquo;ve simplified a bit removing some styling for the purpose of clarity.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>there are some other tools that I use that adhere to the trifecta.
Most notoriously is <a href="https://julialang.org">Julia</a> and
<a href="https://rust-lang.org">Rust</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>
      <entry>
        <title>Zero-cost Abstractions</title>
        <link rel="alternate" href="https://storopoli.io/2023-11-28-zero_cost_abstractions/" />
        <id>https://storopoli.io/2023-11-28-zero_cost_abstractions/</id>
        <published>2023-11-28T18:19:36-03:00</published>
        <updated>2024-04-10T08:57:32-03:00</updated>
        <summary type="html">&lt;p&gt;In programming language circles there&amp;rsquo;s a recently trend of discussing a concept
called &lt;strong&gt;zero-cost abstractions&lt;/strong&gt;:
the ability to use higher-levels abstractions without suffering any loss of performance.&lt;/p&gt;
&lt;p&gt;Zero-cost abstractions allows you to write performant code without having to
give up a single drop of convenience and expressiveness:&lt;/p&gt;
&lt;p&gt;You want for-loops?
&lt;em&gt;You can have it&lt;/em&gt;.
Generics?
&lt;em&gt;Yeah, why not&lt;/em&gt;?
Data structures?
&lt;em&gt;Sure, keep&amp;rsquo;em coming&lt;/em&gt;.
Async operations?
&lt;em&gt;You bet ya&lt;/em&gt;!
Multi-threading?
&lt;em&gt;Hell yes&lt;/em&gt;!&lt;/p&gt;</summary>
          <content type="html"><![CDATA[<p>In programming language circles there&rsquo;s a recently trend of discussing a concept
called <strong>zero-cost abstractions</strong>:
the ability to use higher-levels abstractions without suffering any loss of performance.</p>
<p>Zero-cost abstractions allows you to write performant code without having to
give up a single drop of convenience and expressiveness:</p>
<p>You want for-loops?
<em>You can have it</em>.
Generics?
<em>Yeah, why not</em>?
Data structures?
<em>Sure, keep&rsquo;em coming</em>.
Async operations?
<em>You bet ya</em>!
Multi-threading?
<em>Hell yes</em>!</p>
<p>To put more formally,
I like <a href="https://stackoverflow.com/a/69178445">this definition from StackOverflow</a>:</p>
<blockquote>
<p>Zero Cost Abstractions means adding higher-level programming concepts, like generics,
collections and so on do not come with a run-time cost,
only compile time cost (the code will be slower to compile).
Any operation on zero-cost abstractions is as fast as you would write out
matching functionality by hand using lower-level programming concepts like
for loops, counters, ifs and using raw pointers.</p>
</blockquote>
<p>Here&rsquo;s an analogy:</p>
<blockquote>
<p>Imagine that you are going to buy a car.
The sales person offers you a fancy car praising how easy it is to drive it,
that you don&rsquo;t need to think about RPM, clutch and stick shift,
parking maneuver, fuel type, and other shenanigans.
You just turn it on and drive.
However, once you take a look at the car&rsquo;s data sheet, you are horrified.
The car is bad in every aspect except easy of use.
It has dreadful fuel consumption,
atrocious safety ratings,
disastrous handling, and so on&hellip;</p>
</blockquote>
<p>Believe me, you wouldn&rsquo;t want to own that car.</p>
<p>Metaphors aside, that&rsquo;s <strong>exactly what professional developers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and whole teams
choose to use every day: unacceptable inferior tools</strong>.
Tools that, not only don&rsquo;t have <strong>zero-cost abstractions</strong>,
rather don&rsquo;t allow you to even have non-zero-cost anything!</p>
<p>Let&rsquo;s do some Python bashing in the meantime.
I know that&rsquo;s easy to bash Python,
but that&rsquo;s not the point.
If Python wasn&rsquo;t used so widely in production,
I would definitely leave it alone.
Don&rsquo;t get me wrong, Python is the second-best language for everything<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="the-curious-case-of-the-python-boolean">The curious case of the Python boolean</h2>
<p><img loading="lazy" src="non-zero-cost-abstraction.png#center" alt="non-zero-cost-abstraction"  />
</p>
<p>I wish this meme was a joke, but it isn&rsquo;t.
A boolean is one of the simplest data type taking only two possible values:
true or false.
Just grab your nearest Python REPL:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">getsizeof</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">getsizeof</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">28</span>
</span></span></code></pre></div><p>The function <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof"><code>sys.getsizeof</code></a>
returns the size of an object in bytes.
<strong>How the hell Python needs 28 bytes to represent something that needs at most 1 byte</strong><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>?
Imagine incurring a 28x penalty in memory size requirements for every boolean
that you use.
Now multiply this by every operation that your code is going to run in production
over time.
Again: <strong>unacceptable</strong>.</p>
<p>That&rsquo;s because all objects in Python,
in the sense that everything that you can instantiate,
i.e. everything that you can put on the left hand-side of the <code>=</code> assignment,
is a <a href="https://docs.python.org/3/c-api/structures.html#c.PyObject"><code>PyObject</code></a>:</p>
<blockquote>
<p>All Python objects ultimately share a small number of fields at the
beginning of the object’s representation in memory.
These are represented by the <code>PyObject</code> and <code>PyVarObject</code> types.</p>
</blockquote>
<p>Python is dynamically-typed, which means that you don&rsquo;t have primitives like
8-, 16-, 32-bit (un)signed integers and so on.
Everything is a huge mess allocated in the heap that must carry not only its value,
but also information about its type.</p>
<p>Most important, everything that is fast in Python is <em>not Python-based</em>.
Take a look at the image below,
I grabbed some popular Python libraries from GitHub,
namely <a href="https://github.com/numpy/numpy">NumPy</a> (linear algebra package)
and <a href="https://github.com/pytorch/pytorch">PyToch</a> (deep learning package),
and checked the
language codebase percentage.</p>
<p><img loading="lazy" src="python-my-ass.jpg#center" alt="python-my-ass"  />
</p>
<p>Surprise, they are <strong><em>not</em> Python libraries</strong>.
They are <strong>C/C++ codebases</strong>.
Even if Python is the main language used in these codebases<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>,
I still think that this is not the case due to the nature of the Python code:
<strong>all docstrings are written in Python</strong>.
If you have a very fast C function in your codebase that takes 50 lines of code,
followed by a Python wrapper function that calls it using 10 lines of code,
<em>but</em> with a docstring that is 50 lines of code;
you have a &ldquo;Python&rdquo;-majority codebase.</p>
<p>In a sense the most efficient Python programmer is a C/C++ programmer&hellip;</p>
<p>Here&rsquo;s <a href="https://julialang.org">Julia</a>, which is also dynamically-typed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Base</span><span class="o">.</span><span class="n">summarysize</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></div><p>And to your surprise,
Julia is coded in &hellip;. Julia!
Check the image below for the language codebase percentage of
<a href="https://github.com/JuliaLang/julia">Julia</a>
and <a href="https://github.com/LuxDL/Lux.jl"><code>Lux.jl</code></a><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> (deep learning package).</p>
<p><img loading="lazy" src="julia.jpg#center" alt="julia"  />
</p>
<p>Finally, here&rsquo;s <a href="https://rust-lang.org">Rust</a>, which is not dynamically-,
but static-typed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Size of bool: </span><span class="si">{}</span><span class="s"> byte&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem</span>::<span class="n">size_of</span>::<span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo run --release
</span></span><span class="line"><span class="cl">   Compiling size_of_bool v0.1.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/release/size_of_bool<span class="sb">`</span>
</span></span><span class="line"><span class="cl">Size of bool: <span class="m">1</span> byte
</span></span></code></pre></div><h2 id="more-zero-costs-abstractions">More zero-costs abstractions</h2>
<p>Let&rsquo;s cover two more zero-costs abstractions, both in Julia and in Rust:
<strong>for-loops</strong> and <strong>enums</strong>.</p>
<h3 id="for-loops">For-loops</h3>
<p>A friend and a Julia-advocate once told me that Julia&rsquo;s master plan is to secretly
&ldquo;make everyone aware about <em>compilers</em>&rdquo;.
The <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>
is a program that translate source code from a high-level programming language
to a low-level programming language
(e.g. assembly language, object code, or machine code) to create an
executable program.</p>
<p>Python uses <a href="https://github.com/python/cpython">CPython</a> as the compiler.
If you search around on why CPython/Python is so slow and inefficient,
you&rsquo;ll find that the culprits are:</p>
<ol>
<li>Python is <strong>dynamic-typed language</strong>.</li>
<li>Python&rsquo;s <strong>Global Interpreter Lock (GIL) restricts multi-threading capabilities</strong>.</li>
<li>Python is <strong>interpreted</strong>, which means that Python code is executed sequentially:
line-by-line.</li>
<li>Python is <strong>garbage-collected</strong>: all memory its tracked,
and allocated or deallocated which introduces overhead.</li>
</ol>
<p>I completely disagree with almost all the above reasons, except the GIL.
<strong>Python is slow because of its design decisions</strong>,
more specifically the way CPython works under the hood.
It is not built for performance in mind.
Actually, the main objective of Python was to be a
&ldquo;language that would be easy to read, write, and maintain&rdquo;.
I salute that: Python has remained true to its main objective.</p>
<p>Now let&rsquo;s switch to Julia:</p>
<ol>
<li>Julia is <strong>dynamic-typed language</strong>.</li>
<li>Julia is <strong>interpreted</strong>, which means that Julia code is executed sequentially:
line-by-line.</li>
<li>Julia is <strong>garbage-collected</strong>: all memory its tracked,
and allocated or deallocated which introduces overhead.</li>
</ol>
<p>I&rsquo;ve copy-pasted all Python&rsquo;s arguments for inefficiency, except the GIL.
And, contrary to Python, <a href="https://julialang.org/benchmarks/">Julia is fast</a>!
Sometimes even faster than C<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.
Actually, that was the goal all along since Julia&rsquo;s inception.
If you check the <a href="https://julialang.org/blog/2012/02/why-we-created-julia/">notorious Julia announcement blog post from 2012</a>:</p>
<blockquote>
<p>We want a language that&rsquo;s open source, with a liberal license.
We want the speed of C with the dynamism of Ruby.
We want a language that&rsquo;s homoiconic, with true macros like Lisp,
but with obvious, familiar mathematical notation like Matlab.
We want something as usable for general programming as Python,
as easy for statistics as R, as natural for string processing as Perl,
as powerful for linear algebra as Matlab, as good at gluing programs together as the shell.
Something that is dirt simple to learn,
yet keeps the most serious hackers happy.
We want it interactive and we want it compiled.</p>
<p>(Did we mention it should be as fast as C?)</p>
</blockquote>
<p>It mentions &ldquo;speed&rdquo; twice.
Not only that, but also specifically says that it should match C&rsquo;s speed.</p>
<p>Julia is fast because of its design decisions.
One of the major reasons why Julia is fast is because of the choice of compiler
that it uses: <a href="https://llvm.org/">LLVM</a>.</p>
<p>LLVM originally stood for <strong>l</strong>ow <strong>l</strong>evel <strong>v</strong>irtual <strong>m</strong>achine.
Despite its name, LLVM has little to do with traditional virtual machines.
LLVM can take <a href="https://en.wikipedia.org/wiki/Intermediate_representation">intermediate representation (IR)</a>
code and compile it into machine-dependent instructions.
It has <a href="https://foundation.llvm.org/docs/sponsors/">support and sponsorship</a>
from a lot of big-tech corporations,
such as Apple, Google, IBM, Meta, Arm, Intel, AMD, Nvidia, and so on.
It is a pretty fast compiler that can do wonders in optimizing IR code to a
plethora of computer architectures.</p>
<p>In a sense, Julia is a front-end for LLVM.
It turns your easy-to-read and easy-to-write Julia code into LLVM IR code.
Take this for-loop example inside a function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">10</span>
</span></span><span class="line"><span class="cl">        <span class="n">acc</span> <span class="o">+=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">acc</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Let&rsquo;s check what Julia generates as LLVM IR code for this function.
We can do that with the <code>@code_llvm</code> macro.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@code_llvm</span> <span class="n">debuginfo</span><span class="o">=</span><span class="ss">:none</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">define</span> <span class="n">i64</span> <span class="nd">@julia_sum_10_172</span><span class="p">()</span> <span class="c">#0 {</span>
</span></span><span class="line"><span class="cl"><span class="n">top</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">ret</span> <span class="n">i64</span> <span class="mi">55</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></div><p>You can&rsquo;t easily fool the compiler.
Julia understands that the answer is 55,
and the LLVM IR generated code is pretty much just &ldquo;return 55 as a 64-bit integer&rdquo;.</p>
<p>Let&rsquo;s also check the machine-dependent instructions with the <code>@code_native</code> macro.
I am using an Apple Silicon machine, so these instructions might differ from yours:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@code_native</span> <span class="n">debuginfo</span><span class="o">=</span><span class="ss">:none</span> <span class="n">sum_10</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">section</span>        <span class="n">__TEXT</span><span class="p">,</span><span class="n">__text</span><span class="p">,</span><span class="n">regular</span><span class="p">,</span><span class="n">pure_instructions</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">build_version</span> <span class="n">macos</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">globl</span>  <span class="n">_julia_sum_10_214</span>               <span class="p">;</span> <span class="o">--</span> <span class="n">Begin</span> <span class="k">function</span> <span class="n">julia_sum_10_214</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">p2align</span>        <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">_julia_sum_10_214</span><span class="o">:</span>                      <span class="p">;</span> <span class="nd">@julia_sum_10_214</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">cfi_startproc</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">%</span><span class="n">bb</span><span class="mf">.0</span><span class="o">:</span>                                <span class="p">;</span> <span class="o">%</span><span class="n">top</span>
</span></span><span class="line"><span class="cl">        <span class="n">mov</span>     <span class="n">w0</span><span class="p">,</span> <span class="c">#55</span>
</span></span><span class="line"><span class="cl">        <span class="n">ret</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">cfi_endproc</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">;</span> <span class="o">--</span> <span class="n">End</span> <span class="k">function</span>
</span></span><span class="line"><span class="cl"><span class="o">.</span><span class="n">subsections_via_symbols</span>
</span></span></code></pre></div><p>The only important instruction for our argument here is the <code>mov w0, #55</code>.
This means &ldquo;move the value 55 into the <code>w0</code> register&rdquo;,
where <code>w0</code> is one of registers available in ARM-based architectures
(which Apple Silicon chips are).</p>
<p>This is a <strong>zero-cost abstraction</strong>!
I don&rsquo;t need to give up for-loops, because they might be slow and inefficient;
like some Python users suggest newcomers.
I can have the full convenience and expressiveness of for-loops without
paying performance costs.
Pretty much the definition of a zero-cost abstraction from above.</p>
<p>Using LLVM as a compiler backend is not something unique to Julia.
Rust also uses LLVM under the hood.
Take for example this simple Rust code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">sum_10</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..=</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">acc</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">acc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;sum_10: </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">sum_10</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>We can inspect both LLVM IR code and machine instructions with the
<a href="https://github.com/pacak/cargo-show-asm"><code>cargo-show-asm</code></a> crate:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo asm --llvm <span class="s2">&#34;sum_10::main&#34;</span> <span class="p">|</span> grep <span class="m">55</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  store i32 55, ptr %_9, align <span class="m">4</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo asm <span class="s2">&#34;sum_10::main&#34;</span> <span class="p">|</span> grep <span class="m">55</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.00s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        mov w8, <span class="c1">#55</span>
</span></span></code></pre></div><p>No coincidence that the LLVM IR code is very similar,
with the difference that integers, by default,
in Julia are 64 bits and in Rust 32 bits.
However, the machine code is <strong>identical</strong>:
&ldquo;move the value 55 into a <code>w</code> something register&rdquo;.</p>
<h3 id="enums">Enums</h3>
<p>Another zero-cost abstraction, in Julia and Rust, is <strong>enums</strong>.</p>
<p>In Julia all enums, by default have a <code>BaseType</code> of <code>Int32</code>:
a signed 32-bit integer.
However, we can override this with type annotations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nd">@enum</span> <span class="n">Thing</span><span class="o">::</span><span class="kt">Bool</span> <span class="n">One</span> <span class="n">Two</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Base</span><span class="o">.</span><span class="n">summarysize</span><span class="p">(</span><span class="n">Thing</span><span class="p">(</span><span class="nb">false</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></div><p>Here we have an enum <code>Thing</code> with two variants: <code>One</code> and <code>Two</code>.
Since we can safely represent all the possible variant space of <code>Thing</code>
with a boolean type, we override the <code>BaseType</code> of <code>Thing</code> to be the <code>Bool</code> type.
Unsurprised, any object of <code>Thing</code> occupies 1 byte in memory.</p>
<p>We can achieve the same with Rust:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// main.rs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">mem</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cp">#[allow(dead_code)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">enum</span> <span class="nc">Thing</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">One</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Two</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Size of Thing: </span><span class="si">{}</span><span class="s"> byte&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">mem</span>::<span class="n">size_of</span>::<span class="o">&lt;</span><span class="n">Thing</span><span class="o">&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo run --release
</span></span><span class="line"><span class="cl">   Compiling enum_size v0.1.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.09s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/release/enum_size<span class="sb">`</span>
</span></span><span class="line"><span class="cl">Size of Thing: <span class="m">1</span> byte
</span></span></code></pre></div><p>However, contrary to Julia, Rust compiler automatically detects the enum&rsquo;s
variant space size and adjust accordingly.
So, no need of overrides.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Zero-cost abstractions are a joy to have in a programming language.
It enables you, as a programmer, to just focus on what&rsquo;s important:
write expressive code that is easy to read, maintain, debug, and build upon.</p>
<p>It is no wonder that zero-cost abstractions is a pervasive feature
of two of my top-favorite languages:
<a href="https://julialang.org">Julia</a>
and <a href="https://rust-lang.org">Rust</a>.</p>
<h2 id="license">License</h2>
<p>This post is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img loading="lazy" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png" alt="CC BY-NC-SA 4.0"  />
</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>this post is somehow connected to my <a href="../2023-11-10-2023-11-13-soydev/">soydev rant</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>and that&rsquo;s not a compliment.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>technically, we can represent a boolean with just one bit.
However, the short answer is still one byte,
because that&rsquo;s <a href="https://en.wikipedia.org/wiki/Byte">smallest addressable unit of memory</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>and modifying <code>.gitattributes</code> is cheating.
Yes, I am talking to you <a href="https://github.com/numpy/numpy/blob/06d7bdfbb585264dcf23d4322be7aee449733ca2/.gitattributes#L6-L7">NumPy</a>!&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://github.com/LuxDL/Lux.jl"><code>Lux.jl</code></a> doesn&rsquo;t even have a <code>.gitattributes</code> file.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>if you compare runtime execution.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
      </entry>

</feed>


